var nr=Object.create;var ht=Object.defineProperty;var sr=Object.getOwnPropertyDescriptor;var or=Object.getOwnPropertyNames;var fr=Object.getPrototypeOf,hr=Object.prototype.hasOwnProperty;var d=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),ur=(t,e)=>{for(var r in e)ht(t,r,{get:e[r],enumerable:!0})},Ht=(t,e,r,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of or(e))!hr.call(t,s)&&s!==r&&ht(t,s,{get:()=>e[s],enumerable:!(i=sr(e,s))||i.enumerable});return t};var pr=(t,e,r)=>(r=t!=null?nr(fr(t)):{},Ht(e||!t||!t.__esModule?ht(r,"default",{value:t,enumerable:!0}):r,t)),ar=t=>Ht(ht({},"__esModule",{value:!0}),t);var I=d((Bn,H)=>{var bn=require("crypto");H.exports.linebrk=function(t,e){for(var r="",i=0;i+e<t.length;)r+=t.substring(i,i+e)+`
`,i+=e;return r+t.substring(i,t.length)};H.exports.detectEnvironment=function(){return typeof window<"u"&&window&&!(process&&process.title==="node")?"browser":"node"};H.exports.get32IntFromBuffer=function(t,e){e=e||0;var r=0;if((r=t.length-e)>0){if(r>=4)return t.readUIntBE(e,r);for(var i=0,s=e+r,n=0;s>e;s--,n+=2)i+=t[s-1]*Math.pow(16,n);return i}else return NaN};H.exports._={isObject:function(t){var e=typeof t;return!!t&&(e=="object"||e=="function")},isString:function(t){return typeof t=="string"||t instanceof String},isNumber:function(t){return typeof t=="number"||!isNaN(parseFloat(t))&&isFinite(t)},omit:function(t,e){var r={};for(var i in t)!t.hasOwnProperty(i)||i===e||(r[i]=t[i]);return r}};H.exports.trimSurroundingText=function(t,e,r){var i=0,s=t.length,n=t.indexOf(e);n>=0&&(i=n+e.length);var o=t.indexOf(r,n);return o>=0&&(s=o),t.substring(i,s)}});var V=d((En,Qt)=>{var cr=require("crypto"),lr=I()._,j,gr=0xdeadbeefcafe,wn=(gr&16777215)==15715070;function h(t,e){t!=null&&(typeof t=="number"?this.fromNumber(t,e):Buffer.isBuffer(t)?this.fromBuffer(t):e==null&&typeof t!="string"?this.fromByteArray(t):this.fromString(t,e))}function y(){return new h(null)}function yr(t,e,r,i,s,n){for(var o=e&16383,f=e>>14;--n>=0;){var u=this[t]&16383,p=this[t++]>>14,c=f*u+p*o;u=o*u+((c&16383)<<14)+r[i]+s,s=(u>>28)+(c>>14)+f*p,r[i++]=u&268435455}return s}h.prototype.am=yr;j=28;h.prototype.DB=j;h.prototype.DM=(1<<j)-1;h.prototype.DV=1<<j;var kt=52;h.prototype.FV=Math.pow(2,kt);h.prototype.F1=kt-j;h.prototype.F2=2*j-kt;var mr="0123456789abcdefghijklmnopqrstuvwxyz",ut=new Array,z,A;z="0".charCodeAt(0);for(A=0;A<=9;++A)ut[z++]=A;z="a".charCodeAt(0);for(A=10;A<36;++A)ut[z++]=A;z="A".charCodeAt(0);for(A=10;A<36;++A)ut[z++]=A;function Lt(t){return mr.charAt(t)}function jt(t,e){var r=ut[t.charCodeAt(e)];return r==null?-1:r}function vr(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s}function dr(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+DV:this.t=0}function k(t){var e=y();return e.fromInt(t),e}function Sr(t,e,r){var i;switch(e){case 2:i=1;break;case 4:i=2;break;case 8:i=3;break;case 16:i=4;break;case 32:i=5;break;case 256:i=8;break;default:this.fromRadix(t,e);return}this.t=0,this.s=0;for(var s=t.length,n=!1,o=0;--s>=0;){var f=i==8?t[s]&255:jt(t,s);if(f<0){t.charAt(s)=="-"&&(n=!0);continue}n=!1,o===0?this[this.t++]=f:o+i>this.DB?(this[this.t-1]|=(f&(1<<this.DB-o)-1)<<o,this[this.t++]=f>>this.DB-o):this[this.t-1]|=f<<o,o+=i,o>=this.DB&&(o-=this.DB)}!r&&i==8&&(t[0]&128)!=0&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),n&&h.ZERO.subTo(this,this)}function br(t,e){this.fromString(t,256,e)}function Br(t){this.fromString(t,256,!0)}function wr(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t}function Er(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(t==16)e=4;else if(t==8)e=3;else if(t==2)e=1;else if(t==32)e=5;else if(t==4)e=2;else return this.toRadix(t);var r=(1<<e)-1,i,s=!1,n="",o=this.t,f=this.DB-o*this.DB%e;if(o-- >0)for(f<this.DB&&(i=this[o]>>f)>0&&(s=!0,n=Lt(i));o>=0;)f<e?(i=(this[o]&(1<<f)-1)<<e-f,i|=this[--o]>>(f+=this.DB-e)):(i=this[o]>>(f-=e)&r,f<=0&&(f+=this.DB,--o)),i>0&&(s=!0),s&&(n+=Lt(i));return s?n:"0"}function Tr(){var t=y();return h.ZERO.subTo(this,t),t}function Ir(){return this.s<0?this.negate():this}function _r(t){var e=this.s-t.s;if(e!=0)return e;var r=this.t;if(e=r-t.t,e!=0)return this.s<0?-e:e;for(;--r>=0;)if((e=this[r]-t[r])!=0)return e;return 0}function pt(t){var e=1,r;return(r=t>>>16)!=0&&(t=r,e+=16),(r=t>>8)!=0&&(t=r,e+=8),(r=t>>4)!=0&&(t=r,e+=4),(r=t>>2)!=0&&(t=r,e+=2),(r=t>>1)!=0&&(t=r,e+=1),e}function xr(){return this.t<=0?0:this.DB*(this.t-1)+pt(this[this.t-1]^this.s&this.DM)}function Or(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s}function Dr(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s}function Ar(t,e){var r=t%this.DB,i=this.DB-r,s=(1<<i)-1,n=Math.floor(t/this.DB),o=this.s<<r&this.DM,f;for(f=this.t-1;f>=0;--f)e[f+n+1]=this[f]>>i|o,o=(this[f]&s)<<r;for(f=n-1;f>=0;--f)e[f]=0;e[n]=o,e.t=this.t+n+1,e.s=this.s,e.clamp()}function Pr(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t){e.t=0;return}var i=t%this.DB,s=this.DB-i,n=(1<<i)-1;e[0]=this[r]>>i;for(var o=r+1;o<this.t;++o)e[o-r-1]|=(this[o]&n)<<s,e[o-r]=this[o]>>i;i>0&&(e[this.t-r-1]|=(this.s&n)<<s),e.t=this.t-r,e.clamp()}function qr(t,e){for(var r=0,i=0,s=Math.min(t.t,this.t);r<s;)i+=this[r]-t[r],e[r++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;r<this.t;)i+=this[r],e[r++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;r<t.t;)i-=t[r],e[r++]=i&this.DM,i>>=this.DB;i-=t.s}e.s=i<0?-1:0,i<-1?e[r++]=this.DV+i:i>0&&(e[r++]=i),e.t=r,e.clamp()}function Nr(t,e){var r=this.abs(),i=t.abs(),s=r.t;for(e.t=s+i.t;--s>=0;)e[s]=0;for(s=0;s<i.t;++s)e[s+r.t]=r.am(0,i[s],e,s,0,r.t);e.s=0,e.clamp(),this.s!=t.s&&h.ZERO.subTo(e,e)}function Rr(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var i=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,i,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp()}function Lr(t,e,r){var i=t.abs();if(!(i.t<=0)){var s=this.abs();if(s.t<i.t){e!=null&&e.fromInt(0),r!=null&&this.copyTo(r);return}r==null&&(r=y());var n=y(),o=this.s,f=t.s,u=this.DB-pt(i[i.t-1]);u>0?(i.lShiftTo(u,n),s.lShiftTo(u,r)):(i.copyTo(n),s.copyTo(r));var p=n.t,c=n[p-1];if(c!==0){var l=c*(1<<this.F1)+(p>1?n[p-2]>>this.F2:0),g=this.FV/l,v=(1<<this.F1)/l,a=1<<this.F2,m=r.t,D=m-p,B=e==null?y():e;for(n.dlShiftTo(D,B),r.compareTo(B)>=0&&(r[r.t++]=1,r.subTo(B,r)),h.ONE.dlShiftTo(p,B),B.subTo(n,n);n.t<p;)n[n.t++]=0;for(;--D>=0;){var N=r[--m]==c?this.DM:Math.floor(r[m]*g+(r[m-1]+a)*v);if((r[m]+=n.am(0,N,r,D,0,p))<N)for(n.dlShiftTo(D,B),r.subTo(B,r);r[m]<--N;)r.subTo(B,r)}e!=null&&(r.drShiftTo(p,e),o!=f&&h.ZERO.subTo(e,e)),r.t=p,r.clamp(),u>0&&r.rShiftTo(u,r),o<0&&h.ZERO.subTo(r,r)}}}function kr(t){var e=y();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(h.ZERO)>0&&t.subTo(e,e),e}function G(t){this.m=t}function Mr(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t}function Ur(t){return t}function Kr(t){t.divRemTo(this.m,null,t)}function Cr(t,e,r){t.multiplyTo(e,r),this.reduce(r)}function Gr(t,e){t.squareTo(e),this.reduce(e)}G.prototype.convert=Mr;G.prototype.revert=Ur;G.prototype.reduce=Kr;G.prototype.mulTo=Cr;G.prototype.sqrTo=Gr;function Fr(){if(this.t<1)return 0;var t=this[0];if((t&1)===0)return 0;var e=t&3;return e=e*(2-(t&15)*e)&15,e=e*(2-(t&255)*e)&255,e=e*(2-((t&65535)*e&65535))&65535,e=e*(2-t*e%this.DV)%this.DV,e>0?this.DV-e:-e}function F(t){this.m=t,this.mp=t.invDigit(),this.mpl=this.mp&32767,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function Vr(t){var e=y();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(h.ZERO)>0&&this.m.subTo(e,e),e}function $r(t){var e=y();return t.copyTo(e),this.reduce(e),e}function Yr(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=t[e]&32767,i=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(r=e+this.m.t,t[r]+=this.m.am(0,i,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)}function Hr(t,e){t.squareTo(e),this.reduce(e)}function jr(t,e,r){t.multiplyTo(e,r),this.reduce(r)}F.prototype.convert=Vr;F.prototype.revert=$r;F.prototype.reduce=Yr;F.prototype.mulTo=jr;F.prototype.sqrTo=Hr;function zr(){return(this.t>0?this[0]&1:this.s)===0}function Zr(t,e){if(t>4294967295||t<1)return h.ONE;var r=y(),i=y(),s=e.convert(this),n=pt(t)-1;for(s.copyTo(r);--n>=0;)if(e.sqrTo(r,i),(t&1<<n)>0)e.mulTo(i,s,r);else{var o=r;r=i,i=o}return e.revert(r)}function Wr(t,e){var r;return t<256||e.isEven()?r=new G(e):r=new F(e),this.exp(t,r)}function Qr(){var t=y();return this.copyTo(t),t}function Jr(){if(this.s<0){if(this.t==1)return this[0]-this.DV;if(this.t===0)return-1}else{if(this.t==1)return this[0];if(this.t===0)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function Xr(){return this.t==0?this.s:this[0]<<24>>24}function ti(){return this.t==0?this.s:this[0]<<16>>16}function ei(t){return Math.floor(Math.LN2*this.DB/Math.log(t))}function ri(){return this.s<0?-1:this.t<=0||this.t==1&&this[0]<=0?0:1}function ii(t){if(t==null&&(t=10),this.signum()===0||t<2||t>36)return"0";var e=this.chunkSize(t),r=Math.pow(t,e),i=k(r),s=y(),n=y(),o="";for(this.divRemTo(i,s,n);s.signum()>0;)o=(r+n.intValue()).toString(t).substr(1)+o,s.divRemTo(i,s,n);return n.intValue().toString(t)+o}function ni(t,e){this.fromInt(0),e==null&&(e=10);for(var r=this.chunkSize(e),i=Math.pow(e,r),s=!1,n=0,o=0,f=0;f<t.length;++f){var u=jt(t,f);if(u<0){t.charAt(f)=="-"&&this.signum()===0&&(s=!0);continue}o=e*o+u,++n>=r&&(this.dMultiply(i),this.dAddOffset(o,0),n=0,o=0)}n>0&&(this.dMultiply(Math.pow(e,n)),this.dAddOffset(o,0)),s&&h.ZERO.subTo(this,this)}function si(t,e){if(typeof e=="number")if(t<2)this.fromInt(1);else for(this.fromNumber(t),this.testBit(t-1)||this.bitwiseTo(h.ONE.shiftLeft(t-1),Mt,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(h.ONE.shiftLeft(t-1),this);else{var r=cr.randomBytes((t>>3)+1),i=t&7;i>0?r[0]&=(1<<i)-1:r[0]=0,this.fromByteArray(r)}}function oi(){var t=this.t,e=new Array;e[0]=this.s;var r=this.DB-t*this.DB%8,i,s=0;if(t-- >0)for(r<this.DB&&(i=this[t]>>r)!=(this.s&this.DM)>>r&&(e[s++]=i|this.s<<this.DB-r);t>=0;)r<8?(i=(this[t]&(1<<r)-1)<<8-r,i|=this[--t]>>(r+=this.DB-8)):(i=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),(i&128)!=0&&(i|=-256),s===0&&(this.s&128)!=(i&128)&&++s,(s>0||i!=this.s)&&(e[s++]=i);return e}function fi(t){var e=Buffer.from(this.toByteArray());if(t===!0&&e[0]===0)e=e.slice(1);else if(lr.isNumber(t)){if(e.length>t){for(var r=0;r<e.length-t;r++)if(e[r]!==0)return null;return e.slice(e.length-t)}else if(e.length<t){var i=Buffer.alloc(t);return i.fill(0,0,t-e.length),e.copy(i,t-e.length),i}}return e}function hi(t){return this.compareTo(t)==0}function ui(t){return this.compareTo(t)<0?this:t}function pi(t){return this.compareTo(t)>0?this:t}function ai(t,e,r){var i,s,n=Math.min(t.t,this.t);for(i=0;i<n;++i)r[i]=e(this[i],t[i]);if(t.t<this.t){for(s=t.s&this.DM,i=n;i<this.t;++i)r[i]=e(this[i],s);r.t=this.t}else{for(s=this.s&this.DM,i=n;i<t.t;++i)r[i]=e(s,t[i]);r.t=t.t}r.s=e(this.s,t.s),r.clamp()}function ci(t,e){return t&e}function li(t){var e=y();return this.bitwiseTo(t,ci,e),e}function Mt(t,e){return t|e}function gi(t){var e=y();return this.bitwiseTo(t,Mt,e),e}function zt(t,e){return t^e}function yi(t){var e=y();return this.bitwiseTo(t,zt,e),e}function Zt(t,e){return t&~e}function mi(t){var e=y();return this.bitwiseTo(t,Zt,e),e}function vi(){for(var t=y(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t}function di(t){var e=y();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e}function Si(t){var e=y();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e}function bi(t){if(t===0)return-1;var e=0;return(t&65535)===0&&(t>>=16,e+=16),(t&255)===0&&(t>>=8,e+=8),(t&15)===0&&(t>>=4,e+=4),(t&3)===0&&(t>>=2,e+=2),(t&1)===0&&++e,e}function Bi(){for(var t=0;t<this.t;++t)if(this[t]!=0)return t*this.DB+bi(this[t]);return this.s<0?this.t*this.DB:-1}function wi(t){for(var e=0;t!=0;)t&=t-1,++e;return e}function Ei(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=wi(this[r]^e);return t}function Ti(t){var e=Math.floor(t/this.DB);return e>=this.t?this.s!=0:(this[e]&1<<t%this.DB)!=0}function Ii(t,e){var r=h.ONE.shiftLeft(t);return this.bitwiseTo(r,e,r),r}function _i(t){return this.changeBit(t,Mt)}function xi(t){return this.changeBit(t,Zt)}function Oi(t){return this.changeBit(t,zt)}function Di(t,e){for(var r=0,i=0,s=Math.min(t.t,this.t);r<s;)i+=this[r]+t[r],e[r++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;r<this.t;)i+=this[r],e[r++]=i&this.DM,i>>=this.DB;i+=this.s}else{for(i+=this.s;r<t.t;)i+=t[r],e[r++]=i&this.DM,i>>=this.DB;i+=t.s}e.s=i<0?-1:0,i>0?e[r++]=i:i<-1&&(e[r++]=this.DV+i),e.t=r,e.clamp()}function Ai(t){var e=y();return this.addTo(t,e),e}function Pi(t){var e=y();return this.subTo(t,e),e}function qi(t){var e=y();return this.multiplyTo(t,e),e}function Ni(){var t=y();return this.squareTo(t),t}function Ri(t){var e=y();return this.divRemTo(t,e,null),e}function Li(t){var e=y();return this.divRemTo(t,null,e),e}function ki(t){var e=y(),r=y();return this.divRemTo(t,e,r),new Array(e,r)}function Mi(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()}function Ui(t,e){if(t!==0){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}}function it(){}function Wt(t){return t}function Ki(t,e,r){t.multiplyTo(e,r)}function Ci(t,e){t.squareTo(e)}it.prototype.convert=Wt;it.prototype.revert=Wt;it.prototype.mulTo=Ki;it.prototype.sqrTo=Ci;function Gi(t){return this.exp(t,new it)}function Fi(t,e,r){var i=Math.min(this.t+t.t,e);for(r.s=0,r.t=i;i>0;)r[--i]=0;var s;for(s=r.t-this.t;i<s;++i)r[i+this.t]=this.am(0,t[i],r,i,0,this.t);for(s=Math.min(t.t,e);i<s;++i)this.am(0,t[i],r,i,0,e-i);r.clamp()}function Vi(t,e,r){--e;var i=r.t=this.t+t.t-e;for(r.s=0;--i>=0;)r[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)r[this.t+i-e]=this.am(e-i,t[i],r,0,0,this.t+i-e);r.clamp(),r.drShiftTo(1,r)}function Z(t){this.r2=y(),this.q3=y(),h.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}function $i(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=y();return t.copyTo(e),this.reduce(e),e}function Yi(t){return t}function Hi(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)}function ji(t,e){t.squareTo(e),this.reduce(e)}function zi(t,e,r){t.multiplyTo(e,r),this.reduce(r)}Z.prototype.convert=$i;Z.prototype.revert=Yi;Z.prototype.reduce=Hi;Z.prototype.mulTo=zi;Z.prototype.sqrTo=ji;function Zi(t,e){var r=t.bitLength(),i,s=k(1),n;if(r<=0)return s;r<18?i=1:r<48?i=3:r<144?i=4:r<768?i=5:i=6,r<8?n=new G(e):e.isEven()?n=new Z(e):n=new F(e);var o=new Array,f=3,u=i-1,p=(1<<i)-1;if(o[1]=n.convert(this),i>1){var c=y();for(n.sqrTo(o[1],c);f<=p;)o[f]=y(),n.mulTo(c,o[f-2],o[f]),f+=2}var l=t.t-1,g,v=!0,a=y(),m;for(r=pt(t[l])-1;l>=0;){for(r>=u?g=t[l]>>r-u&p:(g=(t[l]&(1<<r+1)-1)<<u-r,l>0&&(g|=t[l-1]>>this.DB+r-u)),f=i;(g&1)===0;)g>>=1,--f;if((r-=f)<0&&(r+=this.DB,--l),v)o[g].copyTo(s),v=!1;else{for(;f>1;)n.sqrTo(s,a),n.sqrTo(a,s),f-=2;f>0?n.sqrTo(s,a):(m=s,s=a,a=m),n.mulTo(a,o[g],s)}for(;l>=0&&(t[l]&1<<r)===0;)n.sqrTo(s,a),m=s,s=a,a=m,--r<0&&(r=this.DB-1,--l)}return n.revert(s)}function Wi(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var i=e;e=r,r=i}var s=e.getLowestSetBit(),n=r.getLowestSetBit();if(n<0)return e;for(s<n&&(n=s),n>0&&(e.rShiftTo(n,e),r.rShiftTo(n,r));e.signum()>0;)(s=e.getLowestSetBit())>0&&e.rShiftTo(s,e),(s=r.getLowestSetBit())>0&&r.rShiftTo(s,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return n>0&&r.lShiftTo(n,r),r}function Qi(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(e===0)r=this[0]%t;else for(var i=this.t-1;i>=0;--i)r=(e*r+this[i])%t;return r}function Ji(t){var e=t.isEven();if(this.isEven()&&e||t.signum()===0)return h.ZERO;for(var r=t.clone(),i=this.clone(),s=k(1),n=k(0),o=k(0),f=k(1);r.signum()!=0;){for(;r.isEven();)r.rShiftTo(1,r),e?((!s.isEven()||!n.isEven())&&(s.addTo(this,s),n.subTo(t,n)),s.rShiftTo(1,s)):n.isEven()||n.subTo(t,n),n.rShiftTo(1,n);for(;i.isEven();)i.rShiftTo(1,i),e?((!o.isEven()||!f.isEven())&&(o.addTo(this,o),f.subTo(t,f)),o.rShiftTo(1,o)):f.isEven()||f.subTo(t,f),f.rShiftTo(1,f);r.compareTo(i)>=0?(r.subTo(i,r),e&&s.subTo(o,s),n.subTo(f,n)):(i.subTo(r,i),e&&o.subTo(s,o),f.subTo(n,f))}if(i.compareTo(h.ONE)!=0)return h.ZERO;if(f.compareTo(t)>=0)return f.subtract(t);if(f.signum()<0)f.addTo(t,f);else return f;return f.signum()<0?f.add(t):f}var _=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],Xi=(1<<26)/_[_.length-1];function tn(t){var e,r=this.abs();if(r.t==1&&r[0]<=_[_.length-1]){for(e=0;e<_.length;++e)if(r[0]==_[e])return!0;return!1}if(r.isEven())return!1;for(e=1;e<_.length;){for(var i=_[e],s=e+1;s<_.length&&i<Xi;)i*=_[s++];for(i=r.modInt(i);e<s;)if(i%_[e++]===0)return!1}return r.millerRabin(t)}function en(t){var e=this.subtract(h.ONE),r=e.getLowestSetBit();if(r<=0)return!1;var i=e.shiftRight(r);t=t+1>>1,t>_.length&&(t=_.length);for(var s=y(),n=0;n<t;++n){s.fromInt(_[Math.floor(Math.random()*_.length)]);var o=s.modPow(i,this);if(o.compareTo(h.ONE)!=0&&o.compareTo(e)!=0){for(var f=1;f++<r&&o.compareTo(e)!=0;)if(o=o.modPowInt(2,this),o.compareTo(h.ONE)===0)return!1;if(o.compareTo(e)!=0)return!1}}return!0}h.prototype.copyTo=vr;h.prototype.fromInt=dr;h.prototype.fromString=Sr;h.prototype.fromByteArray=br;h.prototype.fromBuffer=Br;h.prototype.clamp=wr;h.prototype.dlShiftTo=Or;h.prototype.drShiftTo=Dr;h.prototype.lShiftTo=Ar;h.prototype.rShiftTo=Pr;h.prototype.subTo=qr;h.prototype.multiplyTo=Nr;h.prototype.squareTo=Rr;h.prototype.divRemTo=Lr;h.prototype.invDigit=Fr;h.prototype.isEven=zr;h.prototype.exp=Zr;h.prototype.chunkSize=ei;h.prototype.toRadix=ii;h.prototype.fromRadix=ni;h.prototype.fromNumber=si;h.prototype.bitwiseTo=ai;h.prototype.changeBit=Ii;h.prototype.addTo=Di;h.prototype.dMultiply=Mi;h.prototype.dAddOffset=Ui;h.prototype.multiplyLowerTo=Fi;h.prototype.multiplyUpperTo=Vi;h.prototype.modInt=Qi;h.prototype.millerRabin=en;h.prototype.toString=Er;h.prototype.negate=Tr;h.prototype.abs=Ir;h.prototype.compareTo=_r;h.prototype.bitLength=xr;h.prototype.mod=kr;h.prototype.modPowInt=Wr;h.prototype.clone=Qr;h.prototype.intValue=Jr;h.prototype.byteValue=Xr;h.prototype.shortValue=ti;h.prototype.signum=ri;h.prototype.toByteArray=oi;h.prototype.toBuffer=fi;h.prototype.equals=hi;h.prototype.min=ui;h.prototype.max=pi;h.prototype.and=li;h.prototype.or=gi;h.prototype.xor=yi;h.prototype.andNot=mi;h.prototype.not=vi;h.prototype.shiftLeft=di;h.prototype.shiftRight=Si;h.prototype.getLowestSetBit=Bi;h.prototype.bitCount=Ei;h.prototype.testBit=Ti;h.prototype.setBit=_i;h.prototype.clearBit=xi;h.prototype.flipBit=Oi;h.prototype.add=Ai;h.prototype.subtract=Pi;h.prototype.multiply=qi;h.prototype.divide=Ri;h.prototype.remainder=Li;h.prototype.divideAndRemainder=ki;h.prototype.modPow=Zi;h.prototype.modInverse=Ji;h.prototype.pow=Gi;h.prototype.gcd=Wi;h.prototype.isProbablePrime=tn;h.int2char=Lt;h.ZERO=k(0);h.ONE=k(1);h.prototype.square=Ni;Qt.exports=h});var ee=d((Tn,Ut)=>{var Jt=V(),W=require("crypto"),at=require("constants"),rn={md2:Buffer.from("3020300c06082a864886f70d020205000410","hex"),md5:Buffer.from("3020300c06082a864886f70d020505000410","hex"),sha1:Buffer.from("3021300906052b0e03021a05000414","hex"),sha224:Buffer.from("302d300d06096086480165030402040500041c","hex"),sha256:Buffer.from("3031300d060960864801650304020105000420","hex"),sha384:Buffer.from("3041300d060960864801650304020205000430","hex"),sha512:Buffer.from("3051300d060960864801650304020305000440","hex"),ripemd160:Buffer.from("3021300906052b2403020105000414","hex"),rmd160:Buffer.from("3021300906052b2403020105000414","hex")},Xt={ripemd160:"rmd160"},te="sha256";Ut.exports={isEncryption:!0,isSignature:!0};Ut.exports.makeScheme=function(t,e){function r(i,s){this.key=i,this.options=s}return r.prototype.maxMessageLength=function(){return this.options.encryptionSchemeOptions&&this.options.encryptionSchemeOptions.padding==at.RSA_NO_PADDING?this.key.encryptedDataLength:this.key.encryptedDataLength-11},r.prototype.encPad=function(i,s){s=s||{};var n;if(i.length>this.key.maxMessageLength)throw new Error("Message too long for RSA (n="+this.key.encryptedDataLength+", l="+i.length+")");if(this.options.encryptionSchemeOptions&&this.options.encryptionSchemeOptions.padding==at.RSA_NO_PADDING)return n=Buffer.alloc(this.key.maxMessageLength-i.length),n.fill(0),Buffer.concat([n,i]);if(s.type===1)return n=Buffer.alloc(this.key.encryptedDataLength-i.length-1),n.fill(255,0,n.length-1),n[0]=1,n[n.length-1]=0,Buffer.concat([n,i]);n=Buffer.alloc(this.key.encryptedDataLength-i.length),n[0]=0,n[1]=2;for(var o=W.randomBytes(n.length-3),f=0;f<o.length;f++){for(var u=o[f];u===0;)u=W.randomBytes(1)[0];n[f+2]=u}return n[n.length-1]=0,Buffer.concat([n,i])},r.prototype.encUnPad=function(i,s){s=s||{};var n=0;if(this.options.encryptionSchemeOptions&&this.options.encryptionSchemeOptions.padding==at.RSA_NO_PADDING){var o;return typeof i.lastIndexOf=="function"?o=i.slice(i.lastIndexOf("\0")+1,i.length):o=i.slice(String.prototype.lastIndexOf.call(i,"\0")+1,i.length),o}if(i.length<4)return null;if(s.type===1){if(i[0]!==0||i[1]!==1)return null;for(n=3;i[n]!==0;)if(i[n]!=255||++n>=i.length)return null}else{if(i[0]!==0||i[1]!==2)return null;for(n=3;i[n]!==0;)if(++n>=i.length)return null}return i.slice(n+1,i.length)},r.prototype.sign=function(i){var s=this.options.signingSchemeOptions.hash||te;if(this.options.environment==="browser"){s=Xt[s]||s;var n=W.createHash(s);n.update(i);var o=this.pkcs1pad(n.digest(),s),f=this.key.$doPrivate(new Jt(o)).toBuffer(this.key.encryptedDataLength);return f}else{var u=W.createSign("RSA-"+s.toUpperCase());return u.update(i),u.sign(this.options.rsaUtils.exportKey("private"))}},r.prototype.verify=function(i,s,n){if(this.options.encryptionSchemeOptions&&this.options.encryptionSchemeOptions.padding==at.RSA_NO_PADDING)return!1;var o=this.options.signingSchemeOptions.hash||te;if(this.options.environment==="browser"){o=Xt[o]||o,n&&(s=Buffer.from(s,n));var f=W.createHash(o);f.update(i);var u=this.pkcs1pad(f.digest(),o),p=this.key.$doPublic(new Jt(s));return p.toBuffer().toString("hex")==u.toString("hex")}else{var c=W.createVerify("RSA-"+o.toUpperCase());return c.update(i),c.verify(this.options.rsaUtils.exportKey("public"),s,n)}},r.prototype.pkcs0pad=function(i){var s=Buffer.alloc(this.key.maxMessageLength-i.length);return s.fill(0),Buffer.concat([s,i])},r.prototype.pkcs0unpad=function(i){var s;return typeof i.lastIndexOf=="function"?s=i.slice(i.lastIndexOf("\0")+1,i.length):s=i.slice(String.prototype.lastIndexOf.call(i,"\0")+1,i.length),s},r.prototype.pkcs1pad=function(i,s){var n=rn[s];if(!n)throw Error("Unsupported hash algorithm");var o=Buffer.concat([n,i]);if(o.length+10>this.key.encryptedDataLength)throw Error("Key is too short for signing algorithm ("+s+")");var f=Buffer.alloc(this.key.encryptedDataLength-o.length-1);f.fill(255,0,f.length-1),f[0]=1,f[f.length-1]=0;var u=Buffer.concat([f,o]);return u},new r(t,e)}});var re=d((_n,R)=>{var In=V(),ct=require("crypto");R.exports={isEncryption:!0,isSignature:!1};R.exports.digestLength={md4:16,md5:16,ripemd160:20,rmd160:20,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64};var lt="sha1";R.exports.eme_oaep_mgf1=function(t,e,r){r=r||lt;for(var i=R.exports.digestLength[r],s=Math.ceil(e/i),n=Buffer.alloc(i*s),o=Buffer.alloc(4),f=0;f<s;++f){var u=ct.createHash(r);u.update(t),o.writeUInt32BE(f,0),u.update(o),u.digest().copy(n,f*i)}return n.slice(0,e)};R.exports.makeScheme=function(t,e){function r(i,s){this.key=i,this.options=s}return r.prototype.maxMessageLength=function(){return this.key.encryptedDataLength-2*R.exports.digestLength[this.options.encryptionSchemeOptions.hash||lt]-2},r.prototype.encPad=function(i){var s=this.options.encryptionSchemeOptions.hash||lt,n=this.options.encryptionSchemeOptions.mgf||R.exports.eme_oaep_mgf1,o=this.options.encryptionSchemeOptions.label||Buffer.alloc(0),f=this.key.encryptedDataLength,u=R.exports.digestLength[s];if(i.length>f-2*u-2)throw new Error("Message is too long to encode into an encoded message with a length of "+f+" bytes, increaseemLen to fix this error (minimum value for given parameters and options: "+(f-2*u-2)+")");var p=ct.createHash(s);p.update(o),p=p.digest();var c=Buffer.alloc(f-i.length-2*u-1);c.fill(0),c[c.length-1]=1;for(var l=Buffer.concat([p,c,i]),g=ct.randomBytes(u),v=n(g,l.length,s),a=0;a<l.length;a++)l[a]^=v[a];for(v=n(l,u,s),a=0;a<g.length;a++)g[a]^=v[a];var m=Buffer.alloc(1+g.length+l.length);return m[0]=0,g.copy(m,1),l.copy(m,1+g.length),m},r.prototype.encUnPad=function(i){var s=this.options.encryptionSchemeOptions.hash||lt,n=this.options.encryptionSchemeOptions.mgf||R.exports.eme_oaep_mgf1,o=this.options.encryptionSchemeOptions.label||Buffer.alloc(0),f=R.exports.digestLength[s];if(i.length<2*f+2)throw new Error("Error decoding message, the supplied message is not long enough to be a valid OAEP encoded message");for(var u=i.slice(1,f+1),p=i.slice(1+f),c=n(p,f,s),l=0;l<u.length;l++)u[l]^=c[l];for(c=n(u,p.length,s),l=0;l<p.length;l++)p[l]^=c[l];var g=ct.createHash(s);g.update(o),g=g.digest();var v=p.slice(0,f);if(v.toString("hex")!=g.toString("hex"))throw new Error("Error decoding message, the lHash calculated from the label provided and the lHash in the encrypted data do not match.");for(l=f;p[l++]===0&&l<p.length;);if(p[l-1]!=1)throw new Error("Error decoding message, there is no padding message separator byte");return p.slice(l)},new r(t,e)}});var se=d((xn,Kt)=>{var ie=V(),nt=require("crypto");Kt.exports={isEncryption:!1,isSignature:!0};var gt="sha1",ne=20;Kt.exports.makeScheme=function(t,e){var r=$().pkcs1_oaep;function i(s,n){this.key=s,this.options=n}return i.prototype.sign=function(s){var n=nt.createHash(this.options.signingSchemeOptions.hash||gt);n.update(s);var o=this.emsa_pss_encode(n.digest(),this.key.keySize-1);return this.key.$doPrivate(new ie(o)).toBuffer(this.key.encryptedDataLength)},i.prototype.verify=function(s,n,o){o&&(n=Buffer.from(n,o)),n=new ie(n);var f=Math.ceil((this.key.keySize-1)/8),u=this.key.$doPublic(n).toBuffer(f),p=nt.createHash(this.options.signingSchemeOptions.hash||gt);return p.update(s),this.emsa_pss_verify(p.digest(),u,this.key.keySize-1)},i.prototype.emsa_pss_encode=function(s,n){var o=this.options.signingSchemeOptions.hash||gt,f=this.options.signingSchemeOptions.mgf||r.eme_oaep_mgf1,u=this.options.signingSchemeOptions.saltLength||ne,p=r.digestLength[o],c=Math.ceil(n/8);if(c<p+u+2)throw new Error("Output length passed to emBits("+n+") is too small for the options specified("+o+", "+u+"). To fix this issue increase the value of emBits. (minimum size: "+(8*p+8*u+9)+")");var l=nt.randomBytes(u),g=Buffer.alloc(8+p+u);g.fill(0,0,8),s.copy(g,8),l.copy(g,8+s.length);var v=nt.createHash(o);v.update(g),v=v.digest();var a=Buffer.alloc(c-l.length-p-2);a.fill(0);var m=Buffer.alloc(a.length+1+l.length);a.copy(m),m[a.length]=1,l.copy(m,a.length+1);for(var D=f(v,m.length,o),B=Buffer.alloc(m.length),N=0;N<D.length;N++)B[N]=m[N]^D[N];var C=8*c-n,Y=255^255>>8-C<<8-C;B[0]=B[0]&Y;var rt=Buffer.alloc(B.length+v.length+1);return B.copy(rt,0),v.copy(rt,B.length),rt[rt.length-1]=188,rt},i.prototype.emsa_pss_verify=function(s,n,o){var f=this.options.signingSchemeOptions.hash||gt,u=this.options.signingSchemeOptions.mgf||r.eme_oaep_mgf1,p=this.options.signingSchemeOptions.saltLength||ne,c=r.digestLength[f],l=Math.ceil(o/8);if(l<c+p+2||n[n.length-1]!=188)return!1;var g=Buffer.alloc(l-c-1);n.copy(g,0,0,l-c-1);for(var v=0,a=0,m=8*l-o;a<m;a++)v|=1<<7-a;if((g[0]&v)!==0)return!1;var D=n.slice(l-c-1,l-1),B=u(D,g.length,f);for(a=0;a<g.length;a++)g[a]^=B[a];for(m=8*l-o,v=255^255>>8-m<<8-m,g[0]=g[0]&v,a=0;g[a]===0&&a<g.length;a++);if(g[a]!=1)return!1;var N=g.slice(g.length-p),C=Buffer.alloc(8+c+p);C.fill(0,0,8),s.copy(C,8),N.copy(C,8+s.length);var Y=nt.createHash(f);return Y.update(C),Y=Y.digest(),D.toString("hex")===Y.toString("hex")},new i(t,e)}});var $=d((On,Q)=>{Q.exports={pkcs1:ee(),pkcs1_oaep:re(),pss:se(),isEncryption:function(t){return Q.exports[t]&&Q.exports[t].isEncryption},isSignature:function(t){return Q.exports[t]&&Q.exports[t].isSignature}}});var Gt=d((Dn,oe)=>{var Ct=V(),nn=$();oe.exports=function(t,e){var r=nn.pkcs1.makeScheme(t,e);return{encrypt:function(i,s){var n,o;return s?(n=new Ct(r.encPad(i,{type:1})),o=t.$doPrivate(n)):(n=new Ct(t.encryptionScheme.encPad(i)),o=t.$doPublic(n)),o.toBuffer(t.encryptedDataLength)},decrypt:function(i,s){var n,o=new Ct(i);return s?(n=t.$doPublic(o),r.encUnPad(n.toBuffer(t.encryptedDataLength),{type:1})):(n=t.$doPrivate(o),t.encryptionScheme.encUnPad(n.toBuffer(t.encryptedDataLength)))}}}});var he=d((An,fe)=>{var yt=require("crypto"),M=require("constants"),sn=$();fe.exports=function(t,e){var r=sn.pkcs1.makeScheme(t,e);return{encrypt:function(i,s){var n;if(s)return n=M.RSA_PKCS1_PADDING,e.encryptionSchemeOptions&&e.encryptionSchemeOptions.padding&&(n=e.encryptionSchemeOptions.padding),yt.privateEncrypt({key:e.rsaUtils.exportKey("private"),padding:n},i);n=M.RSA_PKCS1_OAEP_PADDING,e.encryptionScheme==="pkcs1"&&(n=M.RSA_PKCS1_PADDING),e.encryptionSchemeOptions&&e.encryptionSchemeOptions.padding&&(n=e.encryptionSchemeOptions.padding);var o=i;return n===M.RSA_NO_PADDING&&(o=r.pkcs0pad(i)),yt.publicEncrypt({key:e.rsaUtils.exportKey("public"),padding:n},o)},decrypt:function(i,s){var n;if(s)return n=M.RSA_PKCS1_PADDING,e.encryptionSchemeOptions&&e.encryptionSchemeOptions.padding&&(n=e.encryptionSchemeOptions.padding),yt.publicDecrypt({key:e.rsaUtils.exportKey("public"),padding:n},i);n=M.RSA_PKCS1_OAEP_PADDING,e.encryptionScheme==="pkcs1"&&(n=M.RSA_PKCS1_PADDING),e.encryptionSchemeOptions&&e.encryptionSchemeOptions.padding&&(n=e.encryptionSchemeOptions.padding);var o=yt.privateDecrypt({key:e.rsaUtils.exportKey("private"),padding:n},i);return n===M.RSA_NO_PADDING?r.pkcs0unpad(o):o}}}});var ae=d((Pn,pe)=>{var ue=require("crypto"),J=require("constants"),on=$();pe.exports=function(t,e){var r=Gt()(t,e),i=on.pkcs1.makeScheme(t,e);return{encrypt:function(s,n){if(n)return r.encrypt(s,n);var o=J.RSA_PKCS1_OAEP_PADDING;e.encryptionScheme==="pkcs1"&&(o=J.RSA_PKCS1_PADDING),e.encryptionSchemeOptions&&e.encryptionSchemeOptions.padding&&(o=e.encryptionSchemeOptions.padding);var f=s;return o===J.RSA_NO_PADDING&&(f=i.pkcs0pad(s)),ue.publicEncrypt({key:e.rsaUtils.exportKey("public"),padding:o},f)},decrypt:function(s,n){if(n)return r.decrypt(s,n);var o=J.RSA_PKCS1_OAEP_PADDING;e.encryptionScheme==="pkcs1"&&(o=J.RSA_PKCS1_PADDING),e.encryptionSchemeOptions&&e.encryptionSchemeOptions.padding&&(o=e.encryptionSchemeOptions.padding);var f=ue.privateDecrypt({key:e.rsaUtils.exportKey("private"),padding:o},s);return o===J.RSA_NO_PADDING?i.pkcs0unpad(f):f}}}});var le=d((qn,ce)=>{var mt=require("crypto");ce.exports={getEngine:function(t,e){var r=Gt();return e.environment==="node"&&typeof mt.publicEncrypt=="function"&&typeof mt.privateDecrypt=="function"&&(typeof mt.privateEncrypt=="function"&&typeof mt.publicDecrypt=="function"?r=he():r=ae()),r(t,e)}}});var de=d((me,ve)=>{var vt=I()._,Nn=require("crypto"),S=V(),ge=I(),ye=$(),fn=le();me.BigInteger=S;ve.exports.Key=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.setOptions=function(e){var r=ye[e.signingScheme],i=ye[e.encryptionScheme];r===i?this.signingScheme=this.encryptionScheme=i.makeScheme(this,e):(this.encryptionScheme=i.makeScheme(this,e),this.signingScheme=r.makeScheme(this,e)),this.encryptEngine=fn.getEngine(this,e)},t.prototype.generate=function(e,r){var i=e>>1;this.e=parseInt(r,16);for(var s=new S(r,16);;){for(;this.p=new S(e-i,1),!(this.p.subtract(S.ONE).gcd(s).compareTo(S.ONE)===0&&this.p.isProbablePrime(10)););for(;this.q=new S(i,1),!(this.q.subtract(S.ONE).gcd(s).compareTo(S.ONE)===0&&this.q.isProbablePrime(10)););if(this.p.compareTo(this.q)<=0){var n=this.p;this.p=this.q,this.q=n}var o=this.p.subtract(S.ONE),f=this.q.subtract(S.ONE),u=o.multiply(f);if(u.gcd(s).compareTo(S.ONE)===0){if(this.n=this.p.multiply(this.q),this.n.bitLength()<e)continue;this.d=s.modInverse(u),this.dmp1=this.d.mod(o),this.dmq1=this.d.mod(f),this.coeff=this.q.modInverse(this.p);break}}this.$$recalculateCache()},t.prototype.setPrivate=function(e,r,i,s,n,o,f,u){if(e&&r&&i&&e.length>0&&(vt.isNumber(r)||r.length>0)&&i.length>0)this.n=new S(e),this.e=vt.isNumber(r)?r:ge.get32IntFromBuffer(r,0),this.d=new S(i),s&&n&&o&&f&&u&&(this.p=new S(s),this.q=new S(n),this.dmp1=new S(o),this.dmq1=new S(f),this.coeff=new S(u)),this.$$recalculateCache();else throw Error("Invalid RSA private key")},t.prototype.setPublic=function(e,r){if(e&&r&&e.length>0&&(vt.isNumber(r)||r.length>0))this.n=new S(e),this.e=vt.isNumber(r)?r:ge.get32IntFromBuffer(r,0),this.$$recalculateCache();else throw Error("Invalid RSA public key")},t.prototype.$doPrivate=function(e){if(this.p||this.q)return e.modPow(this.d,this.n);for(var r=e.mod(this.p).modPow(this.dmp1,this.p),i=e.mod(this.q).modPow(this.dmq1,this.q);r.compareTo(i)<0;)r=r.add(this.p);return r.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.$doPublic=function(e){return e.modPowInt(this.e,this.n)},t.prototype.encrypt=function(e,r){var i=[],s=[],n=e.length,o=Math.ceil(n/this.maxMessageLength)||1,f=Math.ceil(n/o||1);if(o==1)i.push(e);else for(var u=0;u<o;u++)i.push(e.slice(u*f,(u+1)*f));for(var p=0;p<i.length;p++)s.push(this.encryptEngine.encrypt(i[p],r));return Buffer.concat(s)},t.prototype.decrypt=function(e,r){if(e.length%this.encryptedDataLength>0)throw Error("Incorrect data or key");for(var i=[],s=0,n=0,o=e.length/this.encryptedDataLength,f=0;f<o;f++)s=f*this.encryptedDataLength,n=s+this.encryptedDataLength,i.push(this.encryptEngine.decrypt(e.slice(s,Math.min(n,e.length)),r));return Buffer.concat(i)},t.prototype.sign=function(e){return this.signingScheme.sign.apply(this.signingScheme,arguments)},t.prototype.verify=function(e,r,i){return this.signingScheme.verify.apply(this.signingScheme,arguments)},t.prototype.isPrivate=function(){return this.n&&this.e&&this.d&&!0||!1},t.prototype.isPublic=function(e){return this.n&&this.e&&!(e&&this.d)||!1},Object.defineProperty(t.prototype,"keySize",{get:function(){return this.cache.keyBitLength}}),Object.defineProperty(t.prototype,"encryptedDataLength",{get:function(){return this.cache.keyByteLength}}),Object.defineProperty(t.prototype,"maxMessageLength",{get:function(){return this.encryptionScheme.maxMessageLength()}}),t.prototype.$$recalculateCache=function(){this.cache=this.cache||{},this.cache.keyBitLength=this.n.bitLength(),this.cache.keyByteLength=this.cache.keyBitLength+6>>3},t}()});var dt=d((Rn,Se)=>{Se.exports={newInvalidAsn1Error:function(t){var e=new Error;return e.name="InvalidAsn1Error",e.message=t||"",e}}});var St=d((Ln,be)=>{be.exports={EOC:0,Boolean:1,Integer:2,BitString:3,OctetString:4,Null:5,OID:6,ObjectDescriptor:7,External:8,Real:9,Enumeration:10,PDV:11,Utf8String:12,RelativeOID:13,Sequence:16,Set:17,NumericString:18,PrintableString:19,T61String:20,VideotexString:21,IA5String:22,UTCTime:23,GeneralizedTime:24,GraphicString:25,VisibleString:26,GeneralString:28,UniversalString:29,CharacterString:30,BMPString:31,Constructor:32,Context:128}});var Ft=d((kn,Be)=>{"use strict";var bt=require("buffer"),X=bt.Buffer,P={},q;for(q in bt)!bt.hasOwnProperty(q)||q==="SlowBuffer"||q==="Buffer"||(P[q]=bt[q]);var tt=P.Buffer={};for(q in X)!X.hasOwnProperty(q)||q==="allocUnsafe"||q==="allocUnsafeSlow"||(tt[q]=X[q]);P.Buffer.prototype=X.prototype;(!tt.from||tt.from===Uint8Array.from)&&(tt.from=function(t,e,r){if(typeof t=="number")throw new TypeError('The "value" argument must not be of type number. Received type '+typeof t);if(t&&typeof t.length>"u")throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);return X(t,e,r)});tt.alloc||(tt.alloc=function(t,e,r){if(typeof t!="number")throw new TypeError('The "size" argument must be of type number. Received type '+typeof t);if(t<0||t>=2*(1<<30))throw new RangeError('The value "'+t+'" is invalid for option "size"');var i=X(t);return!e||e.length===0?i.fill(0):typeof r=="string"?i.fill(e,r):i.fill(e),i});if(!P.kStringMaxLength)try{P.kStringMaxLength=process.binding("buffer").kStringMaxLength}catch(t){}P.constants||(P.constants={MAX_LENGTH:P.kMaxLength},P.kStringMaxLength&&(P.constants.MAX_STRING_LENGTH=P.kStringMaxLength));Be.exports=P});var Te=d((Mn,Ee)=>{var hn=require("assert"),we=Ft().Buffer,st=St(),un=dt(),et=un.newInvalidAsn1Error;function x(t){if(!t||!we.isBuffer(t))throw new TypeError("data must be a node Buffer");this._buf=t,this._size=t.length,this._len=0,this._offset=0}Object.defineProperty(x.prototype,"length",{enumerable:!0,get:function(){return this._len}});Object.defineProperty(x.prototype,"offset",{enumerable:!0,get:function(){return this._offset}});Object.defineProperty(x.prototype,"remain",{get:function(){return this._size-this._offset}});Object.defineProperty(x.prototype,"buffer",{get:function(){return this._buf.slice(this._offset)}});x.prototype.readByte=function(t){if(this._size-this._offset<1)return null;var e=this._buf[this._offset]&255;return t||(this._offset+=1),e};x.prototype.peek=function(){return this.readByte(!0)};x.prototype.readLength=function(t){if(t===void 0&&(t=this._offset),t>=this._size)return null;var e=this._buf[t++]&255;if(e===null)return null;if((e&128)===128){if(e&=127,e===0)throw et("Indefinite length not supported");if(e>4)throw et("encoding too long");if(this._size-t<e)return null;this._len=0;for(var r=0;r<e;r++)this._len=(this._len<<8)+(this._buf[t++]&255)}else this._len=e;return t};x.prototype.readSequence=function(t){var e=this.peek();if(e===null)return null;if(t!==void 0&&t!==e)throw et("Expected 0x"+t.toString(16)+": got 0x"+e.toString(16));var r=this.readLength(this._offset+1);return r===null?null:(this._offset=r,e)};x.prototype.readInt=function(){return this._readTag(st.Integer)};x.prototype.readBoolean=function(){return this._readTag(st.Boolean)!==0};x.prototype.readEnumeration=function(){return this._readTag(st.Enumeration)};x.prototype.readString=function(t,e){t||(t=st.OctetString);var r=this.peek();if(r===null)return null;if(r!==t)throw et("Expected 0x"+t.toString(16)+": got 0x"+r.toString(16));var i=this.readLength(this._offset+1);if(i===null||this.length>this._size-i)return null;if(this._offset=i,this.length===0)return e?we.alloc(0):"";var s=this._buf.slice(this._offset,this._offset+this.length);return this._offset+=this.length,e?s:s.toString("utf8")};x.prototype.readOID=function(t){t||(t=st.OID);var e=this.readString(t,!0);if(e===null)return null;for(var r=[],i=0,s=0;s<e.length;s++){var n=e[s]&255;i<<=7,i+=n&127,(n&128)===0&&(r.push(i),i=0)}return i=r.shift(),r.unshift(i%40),r.unshift(i/40>>0),r.join(".")};x.prototype._readTag=function(t){hn.ok(t!==void 0);var e=this.peek();if(e===null)return null;if(e!==t)throw et("Expected 0x"+t.toString(16)+": got 0x"+e.toString(16));var r=this.readLength(this._offset+1);if(r===null)return null;if(this.length>4)throw et("Integer too long: "+this.length);if(this.length>this._size-r)return null;this._offset=r;for(var i=this._buf[this._offset],s=0,n=0;n<this.length;n++)s<<=8,s|=this._buf[this._offset++]&255;return(i&128)===128&&n!==4&&(s-=1<<n*8),s>>0};Ee.exports=x});var _e=d((Un,Ie)=>{var U=require("assert"),Bt=Ft().Buffer,K=St(),pn=dt(),wt=pn.newInvalidAsn1Error,an={size:1024,growthFactor:8};function cn(t,e){U.ok(t),U.equal(typeof t,"object"),U.ok(e),U.equal(typeof e,"object");var r=Object.getOwnPropertyNames(t);return r.forEach(function(i){if(!e[i]){var s=Object.getOwnPropertyDescriptor(t,i);Object.defineProperty(e,i,s)}}),e}function T(t){t=cn(an,t||{}),this._buf=Bt.alloc(t.size||1024),this._size=this._buf.length,this._offset=0,this._options=t,this._seq=[]}Object.defineProperty(T.prototype,"buffer",{get:function(){if(this._seq.length)throw wt(this._seq.length+" unended sequence(s)");return this._buf.slice(0,this._offset)}});T.prototype.writeByte=function(t){if(typeof t!="number")throw new TypeError("argument must be a Number");this._ensure(1),this._buf[this._offset++]=t};T.prototype.writeInt=function(t,e){if(typeof t!="number")throw new TypeError("argument must be a Number");typeof e!="number"&&(e=K.Integer);for(var r=4;((t&4286578688)===0||(t&4286578688)===-8388608)&&r>1;)r--,t<<=8;if(r>4)throw wt("BER ints cannot be > 0xffffffff");for(this._ensure(2+r),this._buf[this._offset++]=e,this._buf[this._offset++]=r;r-- >0;)this._buf[this._offset++]=(t&4278190080)>>>24,t<<=8};T.prototype.writeNull=function(){this.writeByte(K.Null),this.writeByte(0)};T.prototype.writeEnumeration=function(t,e){if(typeof t!="number")throw new TypeError("argument must be a Number");return typeof e!="number"&&(e=K.Enumeration),this.writeInt(t,e)};T.prototype.writeBoolean=function(t,e){if(typeof t!="boolean")throw new TypeError("argument must be a Boolean");typeof e!="number"&&(e=K.Boolean),this._ensure(3),this._buf[this._offset++]=e,this._buf[this._offset++]=1,this._buf[this._offset++]=t?255:0};T.prototype.writeString=function(t,e){if(typeof t!="string")throw new TypeError("argument must be a string (was: "+typeof t+")");typeof e!="number"&&(e=K.OctetString);var r=Bt.byteLength(t);this.writeByte(e),this.writeLength(r),r&&(this._ensure(r),this._buf.write(t,this._offset),this._offset+=r)};T.prototype.writeBuffer=function(t,e){if(typeof e!="number")throw new TypeError("tag must be a number");if(!Bt.isBuffer(t))throw new TypeError("argument must be a buffer");this.writeByte(e),this.writeLength(t.length),this._ensure(t.length),t.copy(this._buf,this._offset,0,t.length),this._offset+=t.length};T.prototype.writeStringArray=function(t){if(!t instanceof Array)throw new TypeError("argument must be an Array[String]");var e=this;t.forEach(function(r){e.writeString(r)})};T.prototype.writeOID=function(t,e){if(typeof t!="string")throw new TypeError("argument must be a string");if(typeof e!="number"&&(e=K.OID),!/^([0-9]+\.){3,}[0-9]+$/.test(t))throw new Error("argument is not a valid OID string");function r(o,f){f<128?o.push(f):f<16384?(o.push(f>>>7|128),o.push(f&127)):f<2097152?(o.push(f>>>14|128),o.push((f>>>7|128)&255),o.push(f&127)):f<268435456?(o.push(f>>>21|128),o.push((f>>>14|128)&255),o.push((f>>>7|128)&255),o.push(f&127)):(o.push((f>>>28|128)&255),o.push((f>>>21|128)&255),o.push((f>>>14|128)&255),o.push((f>>>7|128)&255),o.push(f&127))}var i=t.split("."),s=[];s.push(parseInt(i[0],10)*40+parseInt(i[1],10)),i.slice(2).forEach(function(o){r(s,parseInt(o,10))});var n=this;this._ensure(2+s.length),this.writeByte(e),this.writeLength(s.length),s.forEach(function(o){n.writeByte(o)})};T.prototype.writeLength=function(t){if(typeof t!="number")throw new TypeError("argument must be a Number");if(this._ensure(4),t<=127)this._buf[this._offset++]=t;else if(t<=255)this._buf[this._offset++]=129,this._buf[this._offset++]=t;else if(t<=65535)this._buf[this._offset++]=130,this._buf[this._offset++]=t>>8,this._buf[this._offset++]=t;else if(t<=16777215)this._buf[this._offset++]=131,this._buf[this._offset++]=t>>16,this._buf[this._offset++]=t>>8,this._buf[this._offset++]=t;else throw wt("Length too long (> 4 bytes)")};T.prototype.startSequence=function(t){typeof t!="number"&&(t=K.Sequence|K.Constructor),this.writeByte(t),this._seq.push(this._offset),this._ensure(3),this._offset+=3};T.prototype.endSequence=function(){var t=this._seq.pop(),e=t+3,r=this._offset-e;if(r<=127)this._shift(e,r,-2),this._buf[t]=r;else if(r<=255)this._shift(e,r,-1),this._buf[t]=129,this._buf[t+1]=r;else if(r<=65535)this._buf[t]=130,this._buf[t+1]=r>>8,this._buf[t+2]=r;else if(r<=16777215)this._shift(e,r,1),this._buf[t]=131,this._buf[t+1]=r>>16,this._buf[t+2]=r>>8,this._buf[t+3]=r;else throw wt("Sequence too long")};T.prototype._shift=function(t,e,r){U.ok(t!==void 0),U.ok(e!==void 0),U.ok(r),this._buf.copy(this._buf,t+r,t,t+e),this._offset+=r};T.prototype._ensure=function(t){if(U.ok(t),this._size-this._offset<t){var e=this._size*this._options.growthFactor;e-this._offset<t&&(e+=t);var r=Bt.alloc(e);this._buf.copy(r,0,0,this._offset),this._buf=r,this._size=e}};Ie.exports=T});var xe=d((Kn,It)=>{var Vt=dt(),$t=St(),ln=Te(),gn=_e();It.exports={Reader:ln,Writer:gn};for(Et in $t)$t.hasOwnProperty(Et)&&(It.exports[Et]=$t[Et]);var Et;for(Tt in Vt)Vt.hasOwnProperty(Tt)&&(It.exports[Tt]=Vt[Tt]);var Tt});var _t=d((Cn,Oe)=>{var Yt=xe();Oe.exports={Ber:Yt,BerReader:Yt.Reader,BerWriter:Yt.Writer}});var Re=d((Gn,Dt)=>{var xt=_t().Ber,De=I()._,Ot=I(),Ae="-----BEGIN RSA PRIVATE KEY-----",Pe="-----END RSA PRIVATE KEY-----",qe="-----BEGIN RSA PUBLIC KEY-----",Ne="-----END RSA PUBLIC KEY-----";Dt.exports={privateExport:function(t,e){e=e||{};var r=t.n.toBuffer(),i=t.d.toBuffer(),s=t.p.toBuffer(),n=t.q.toBuffer(),o=t.dmp1.toBuffer(),f=t.dmq1.toBuffer(),u=t.coeff.toBuffer(),p=r.length+i.length+s.length+n.length+o.length+f.length+u.length+512,c=new xt.Writer({size:p});return c.startSequence(),c.writeInt(0),c.writeBuffer(r,2),c.writeInt(t.e),c.writeBuffer(i,2),c.writeBuffer(s,2),c.writeBuffer(n,2),c.writeBuffer(o,2),c.writeBuffer(f,2),c.writeBuffer(u,2),c.endSequence(),e.type==="der"?c.buffer:Ae+`
`+Ot.linebrk(c.buffer.toString("base64"),64)+`
`+Pe},privateImport:function(t,e,r){r=r||{};var i;if(r.type!=="der")if(Buffer.isBuffer(e)&&(e=e.toString("utf8")),De.isString(e)){var s=Ot.trimSurroundingText(e,Ae,Pe).replace(/\s+|\n\r|\n|\r$/gm,"");i=Buffer.from(s,"base64")}else throw Error("Unsupported key format");else if(Buffer.isBuffer(e))i=e;else throw Error("Unsupported key format");var n=new xt.Reader(i);n.readSequence(),n.readString(2,!0),t.setPrivate(n.readString(2,!0),n.readString(2,!0),n.readString(2,!0),n.readString(2,!0),n.readString(2,!0),n.readString(2,!0),n.readString(2,!0),n.readString(2,!0))},publicExport:function(t,e){e=e||{};var r=t.n.toBuffer(),i=r.length+512,s=new xt.Writer({size:i});return s.startSequence(),s.writeBuffer(r,2),s.writeInt(t.e),s.endSequence(),e.type==="der"?s.buffer:qe+`
`+Ot.linebrk(s.buffer.toString("base64"),64)+`
`+Ne},publicImport:function(t,e,r){r=r||{};var i;if(r.type!=="der"){if(Buffer.isBuffer(e)&&(e=e.toString("utf8")),De.isString(e)){var s=Ot.trimSurroundingText(e,qe,Ne).replace(/\s+|\n\r|\n|\r$/gm,"");i=Buffer.from(s,"base64")}}else if(Buffer.isBuffer(e))i=e;else throw Error("Unsupported key format");var n=new xt.Reader(i);n.readSequence(),t.setPublic(n.readString(2,!0),n.readString(2,!0))},autoImport:function(t,e){return/^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(e)?(Dt.exports.privateImport(t,e),!0):/^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(e)?(Dt.exports.publicImport(t,e),!0):!1}}});var Ce=d((Fn,qt)=>{var L=_t().Ber,Le=I()._,At="1.2.840.113549.1.1.1",Pt=I(),ke="-----BEGIN PRIVATE KEY-----",Me="-----END PRIVATE KEY-----",Ue="-----BEGIN PUBLIC KEY-----",Ke="-----END PUBLIC KEY-----";qt.exports={privateExport:function(t,e){e=e||{};var r=t.n.toBuffer(),i=t.d.toBuffer(),s=t.p.toBuffer(),n=t.q.toBuffer(),o=t.dmp1.toBuffer(),f=t.dmq1.toBuffer(),u=t.coeff.toBuffer(),p=r.length+i.length+s.length+n.length+o.length+f.length+u.length+512,c=new L.Writer({size:p});c.startSequence(),c.writeInt(0),c.writeBuffer(r,2),c.writeInt(t.e),c.writeBuffer(i,2),c.writeBuffer(s,2),c.writeBuffer(n,2),c.writeBuffer(o,2),c.writeBuffer(f,2),c.writeBuffer(u,2),c.endSequence();var l=new L.Writer({size:p});return l.startSequence(),l.writeInt(0),l.startSequence(),l.writeOID(At),l.writeNull(),l.endSequence(),l.writeBuffer(c.buffer,4),l.endSequence(),e.type==="der"?l.buffer:ke+`
`+Pt.linebrk(l.buffer.toString("base64"),64)+`
`+Me},privateImport:function(t,e,r){r=r||{};var i;if(r.type!=="der")if(Buffer.isBuffer(e)&&(e=e.toString("utf8")),Le.isString(e)){var s=Pt.trimSurroundingText(e,ke,Me).replace("-----END PRIVATE KEY-----","").replace(/\s+|\n\r|\n|\r$/gm,"");i=Buffer.from(s,"base64")}else throw Error("Unsupported key format");else if(Buffer.isBuffer(e))i=e;else throw Error("Unsupported key format");var n=new L.Reader(i);n.readSequence(),n.readInt(0);var o=new L.Reader(n.readString(48,!0));if(o.readOID(6,!0)!==At)throw Error("Invalid Public key format");var f=new L.Reader(n.readString(4,!0));f.readSequence(),f.readString(2,!0),t.setPrivate(f.readString(2,!0),f.readString(2,!0),f.readString(2,!0),f.readString(2,!0),f.readString(2,!0),f.readString(2,!0),f.readString(2,!0),f.readString(2,!0))},publicExport:function(t,e){e=e||{};var r=t.n.toBuffer(),i=r.length+512,s=new L.Writer({size:i});s.writeByte(0),s.startSequence(),s.writeBuffer(r,2),s.writeInt(t.e),s.endSequence();var n=new L.Writer({size:i});return n.startSequence(),n.startSequence(),n.writeOID(At),n.writeNull(),n.endSequence(),n.writeBuffer(s.buffer,3),n.endSequence(),e.type==="der"?n.buffer:Ue+`
`+Pt.linebrk(n.buffer.toString("base64"),64)+`
`+Ke},publicImport:function(t,e,r){r=r||{};var i;if(r.type!=="der"){if(Buffer.isBuffer(e)&&(e=e.toString("utf8")),Le.isString(e)){var s=Pt.trimSurroundingText(e,Ue,Ke).replace(/\s+|\n\r|\n|\r$/gm,"");i=Buffer.from(s,"base64")}}else if(Buffer.isBuffer(e))i=e;else throw Error("Unsupported key format");var n=new L.Reader(i);n.readSequence();var o=new L.Reader(n.readString(48,!0));if(o.readOID(6,!0)!==At)throw Error("Invalid Public key format");var f=new L.Reader(n.readString(3,!0));f.readByte(),f.readSequence(),t.setPublic(f.readString(2,!0),f.readString(2,!0))},autoImport:function(t,e){return/^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(e)?(qt.exports.privateImport(t,e),!0):/^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(e)?(qt.exports.publicImport(t,e),!0):!1}}});var Ge=d((Yn,Nt)=>{var Vn=I()._,$n=I();Nt.exports={privateExport:function(t,e){return{n:t.n.toBuffer(),e:t.e,d:t.d.toBuffer(),p:t.p.toBuffer(),q:t.q.toBuffer(),dmp1:t.dmp1.toBuffer(),dmq1:t.dmq1.toBuffer(),coeff:t.coeff.toBuffer()}},privateImport:function(t,e,r){if(e.n&&e.e&&e.d&&e.p&&e.q&&e.dmp1&&e.dmq1&&e.coeff)t.setPrivate(e.n,e.e,e.d,e.p,e.q,e.dmp1,e.dmq1,e.coeff);else throw Error("Invalid key data")},publicExport:function(t,e){return{n:t.n.toBuffer(),e:t.e}},publicImport:function(t,e,r){if(e.n&&e.e)t.setPublic(e.n,e.e);else throw Error("Invalid key data")},autoImport:function(t,e){return e.n&&e.e?e.d&&e.p&&e.q&&e.dmp1&&e.dmq1&&e.coeff?(Nt.exports.privateImport(t,e),!0):(Nt.exports.publicImport(t,e),!0):!1}}});var He=d((Hn,Rt)=>{var Fe=I()._,Ve=I(),ot=V(),$e="-----BEGIN OPENSSH PRIVATE KEY-----",Ye="-----END OPENSSH PRIVATE KEY-----";Rt.exports={privateExport:function(t,e){let r=t.n.toBuffer(),i=Buffer.alloc(4);for(i.writeUInt32BE(t.e,0);i[0]===0;)i=i.slice(1);let s=t.d.toBuffer(),n=t.coeff.toBuffer(),o=t.p.toBuffer(),f=t.q.toBuffer(),u;typeof t.sshcomment<"u"?u=Buffer.from(t.sshcomment):u=Buffer.from([]);let p=11+4+i.byteLength+4+r.byteLength,c=8+11+4+r.byteLength+4+i.byteLength+4+s.byteLength+4+n.byteLength+4+o.byteLength+4+f.byteLength+4+u.byteLength,l=15+16+4+4+4+p+4+c;l+=Math.ceil(c/8)*8-c;let v=Buffer.alloc(l),a={buf:v,off:0};v.write("openssh-key-v1","utf8"),v.writeUInt8(0,14),a.off+=15,E(a,Buffer.from("none")),E(a,Buffer.from("none")),E(a,Buffer.from("")),a.off=a.buf.writeUInt32BE(1,a.off),a.off=a.buf.writeUInt32BE(p,a.off),E(a,Buffer.from("ssh-rsa")),E(a,i),E(a,r),a.off=a.buf.writeUInt32BE(l-47-p,a.off),a.off+=8,E(a,Buffer.from("ssh-rsa")),E(a,r),E(a,i),E(a,s),E(a,n),E(a,o),E(a,f),E(a,u);let m=1;for(;a.off<l;)a.off=a.buf.writeUInt8(m++,a.off);return e.type==="der"?a.buf:$e+`
`+Ve.linebrk(v.toString("base64"),70)+`
`+Ye+`
`},privateImport:function(t,e,r){r=r||{};var i;if(r.type!=="der")if(Buffer.isBuffer(e)&&(e=e.toString("utf8")),Fe.isString(e)){var s=Ve.trimSurroundingText(e,$e,Ye).replace(/\s+|\n\r|\n|\r$/gm,"");i=Buffer.from(s,"base64")}else throw Error("Unsupported key format");else if(Buffer.isBuffer(e))i=e;else throw Error("Unsupported key format");let n={buf:i,off:0};if(i.slice(0,14).toString("ascii")!=="openssh-key-v1")throw"Invalid file format.";if(n.off+=15,w(n).toString("ascii")!=="none"||w(n).toString("ascii")!=="none"||w(n).toString("ascii")!==""||(n.off+=4,n.off+=4,w(n).toString("ascii")!=="ssh-rsa")||(w(n),w(n),n.off+=12,w(n).toString("ascii")!=="ssh-rsa"))throw Error("Unsupported key type");let o=w(n),f=w(n),u=w(n),p=w(n),c=w(n),l=w(n),g=new ot(u),v=new ot(l),a=new ot(c),m=g.mod(a.subtract(ot.ONE)),D=g.mod(v.subtract(ot.ONE));t.setPrivate(o,f,u,c,l,m.toBuffer(),D.toBuffer(),p),t.sshcomment=w(n).toString("ascii")},publicExport:function(t,e){let r=Buffer.alloc(4);for(r.writeUInt32BE(t.e,0);r[0]===0;)r=r.slice(1);let i=t.n.toBuffer(),s=Buffer.alloc(r.byteLength+4+i.byteLength+4+7+4),n={buf:s,off:0};E(n,Buffer.from("ssh-rsa")),E(n,r),E(n,i);let o=t.sshcomment||"";return e.type==="der"?n.buf:"ssh-rsa "+s.toString("base64")+" "+o+`
`},publicImport:function(t,e,r){r=r||{};var i;if(r.type!=="der")if(Buffer.isBuffer(e)&&(e=e.toString("utf8")),Fe.isString(e)){if(e.substring(0,8)!=="ssh-rsa ")throw Error("Unsupported key format");let u=e.indexOf(" ",8);u===-1?u=e.length:t.sshcomment=e.substring(u+1).replace(/\s+|\n\r|\n|\r$/gm,"");let p=e.substring(8,u).replace(/\s+|\n\r|\n|\r$/gm,"");i=Buffer.from(p,"base64")}else throw Error("Unsupported key format");else if(Buffer.isBuffer(e))i=e;else throw Error("Unsupported key format");let s={buf:i,off:0},n=w(s).toString("ascii");if(n!=="ssh-rsa")throw Error("Invalid key type: "+n);let o=w(s),f=w(s);t.setPublic(f,o)},autoImport:function(t,e){return/^[\S\s]*-----BEGIN OPENSSH PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END OPENSSH PRIVATE KEY-----[\S\s]*$/g.test(e)?(Rt.exports.privateImport(t,e),!0):/^[\S\s]*ssh-rsa \s*(?=(([A-Za-z0-9+/=]+\s*)+))\1[\S\s]*$/g.test(e)?(Rt.exports.publicImport(t,e),!0):!1}};function w(t){let e=t.buf.readInt32BE(t.off);t.off+=4;let r=t.buf.slice(t.off,t.off+e);return t.off+=e,r}function E(t,e){t.buf.writeInt32BE(e.byteLength,t.off),t.off+=4,t.off+=e.copy(t.buf,t.off)}});var ze=d((zn,b)=>{var jn=I()._;function je(t){t=t.split("-");for(var e="private",r={type:"default"},i=1;i<t.length;i++)if(t[i])switch(t[i]){case"public":e=t[i];break;case"private":e=t[i];break;case"pem":r.type=t[i];break;case"der":r.type=t[i];break}return{scheme:t[0],keyType:e,keyOpt:r}}b.exports={pkcs1:Re(),pkcs8:Ce(),components:Ge(),openssh:He(),isPrivateExport:function(t){return b.exports[t]&&typeof b.exports[t].privateExport=="function"},isPrivateImport:function(t){return b.exports[t]&&typeof b.exports[t].privateImport=="function"},isPublicExport:function(t){return b.exports[t]&&typeof b.exports[t].publicExport=="function"},isPublicImport:function(t){return b.exports[t]&&typeof b.exports[t].publicImport=="function"},detectAndImport:function(t,e,r){if(r===void 0){for(var i in b.exports)if(typeof b.exports[i].autoImport=="function"&&b.exports[i].autoImport(t,e))return!0}else if(r){var s=je(r);if(b.exports[s.scheme])s.keyType==="private"?b.exports[s.scheme].privateImport(t,e,s.keyOpt):b.exports[s.scheme].publicImport(t,e,s.keyOpt);else throw Error("Unsupported key format")}return!1},detectAndExport:function(t,e){if(e){var r=je(e);if(b.exports[r.scheme])if(r.keyType==="private"){if(!t.isPrivate())throw Error("This is not private key");return b.exports[r.scheme].privateExport(t,r.keyOpt)}else{if(!t.isPublic())throw Error("This is not public key");return b.exports[r.scheme].publicExport(t,r.keyOpt)}else throw Error("Unsupported key format")}}}});var Xe=d((Qn,Je)=>{var Ze=require("constants"),yn=de(),Zn=require("crypto"),Wn=_t().Ber,O=I()._,mn=I(),We=$(),Qe=ze();typeof Ze.RSA_NO_PADDING>"u"&&(Ze.RSA_NO_PADDING=3);Je.exports=function(){var t={node10:["md4","md5","ripemd160","sha1","sha224","sha256","sha384","sha512"],node:["md4","md5","ripemd160","sha1","sha224","sha256","sha384","sha512"],iojs:["md4","md5","ripemd160","sha1","sha224","sha256","sha384","sha512"],browser:["md5","ripemd160","sha1","sha256","sha512"]},e="pkcs1_oaep",r="pkcs1",i="private",s={private:"pkcs1-private-pem","private-der":"pkcs1-private-der",public:"pkcs8-public-pem","public-der":"pkcs8-public-der"};function n(o,f,u){if(!(this instanceof n))return new n(o,f,u);O.isObject(f)&&(u=f,f=void 0),this.$options={signingScheme:r,signingSchemeOptions:{hash:"sha256",saltLength:null},encryptionScheme:e,encryptionSchemeOptions:{hash:"sha1",label:null},environment:mn.detectEnvironment(),rsaUtils:this},this.keyPair=new yn.Key,this.$cache={},Buffer.isBuffer(o)||O.isString(o)?this.importKey(o,f):O.isObject(o)&&this.generateKeyPair(o.b,o.e),this.setOptions(u)}return n.prototype.setOptions=function(o){if(o=o||{},o.environment&&(this.$options.environment=o.environment),o.signingScheme){if(O.isString(o.signingScheme)){var f=o.signingScheme.toLowerCase().split("-");f.length==1?t.node.indexOf(f[0])>-1?(this.$options.signingSchemeOptions={hash:f[0]},this.$options.signingScheme=r):(this.$options.signingScheme=f[0],this.$options.signingSchemeOptions={hash:null}):(this.$options.signingSchemeOptions={hash:f[1]},this.$options.signingScheme=f[0])}else O.isObject(o.signingScheme)&&(this.$options.signingScheme=o.signingScheme.scheme||r,this.$options.signingSchemeOptions=O.omit(o.signingScheme,"scheme"));if(!We.isSignature(this.$options.signingScheme))throw Error("Unsupported signing scheme");if(this.$options.signingSchemeOptions.hash&&t[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash)===-1)throw Error("Unsupported hashing algorithm for "+this.$options.environment+" environment")}if(o.encryptionScheme){if(O.isString(o.encryptionScheme)?(this.$options.encryptionScheme=o.encryptionScheme.toLowerCase(),this.$options.encryptionSchemeOptions={}):O.isObject(o.encryptionScheme)&&(this.$options.encryptionScheme=o.encryptionScheme.scheme||e,this.$options.encryptionSchemeOptions=O.omit(o.encryptionScheme,"scheme")),!We.isEncryption(this.$options.encryptionScheme))throw Error("Unsupported encryption scheme");if(this.$options.encryptionSchemeOptions.hash&&t[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash)===-1)throw Error("Unsupported hashing algorithm for "+this.$options.environment+" environment")}this.keyPair.setOptions(this.$options)},n.prototype.generateKeyPair=function(o,f){if(o=o||2048,f=f||65537,o%8!==0)throw Error("Key size must be a multiple of 8.");return this.keyPair.generate(o,f.toString(16)),this.$cache={},this},n.prototype.importKey=function(o,f){if(!o)throw Error("Empty key given");if(f&&(f=s[f]||f),!Qe.detectAndImport(this.keyPair,o,f)&&f===void 0)throw Error("Key format must be specified");return this.$cache={},this},n.prototype.exportKey=function(o){return o=o||i,o=s[o]||o,this.$cache[o]||(this.$cache[o]=Qe.detectAndExport(this.keyPair,o)),this.$cache[o]},n.prototype.isPrivate=function(){return this.keyPair.isPrivate()},n.prototype.isPublic=function(o){return this.keyPair.isPublic(o)},n.prototype.isEmpty=function(o){return!(this.keyPair.n||this.keyPair.e||this.keyPair.d)},n.prototype.encrypt=function(o,f,u){return this.$$encryptKey(!1,o,f,u)},n.prototype.decrypt=function(o,f){return this.$$decryptKey(!1,o,f)},n.prototype.encryptPrivate=function(o,f,u){return this.$$encryptKey(!0,o,f,u)},n.prototype.decryptPublic=function(o,f){return this.$$decryptKey(!0,o,f)},n.prototype.$$encryptKey=function(o,f,u,p){try{var c=this.keyPair.encrypt(this.$getDataForEncrypt(f,p),o);return u=="buffer"||!u?c:c.toString(u)}catch(l){throw Error("Error during encryption. Original error: "+l)}},n.prototype.$$decryptKey=function(o,f,u){try{f=O.isString(f)?Buffer.from(f,"base64"):f;var p=this.keyPair.decrypt(f,o);if(p===null)throw Error("Key decrypt method returns null.");return this.$getDecryptedData(p,u)}catch(c){throw Error("Error during decryption (probably incorrect key). Original error: "+c)}},n.prototype.sign=function(o,f,u){if(!this.isPrivate())throw Error("This is not private key");var p=this.keyPair.sign(this.$getDataForEncrypt(o,u));return f&&f!="buffer"&&(p=p.toString(f)),p},n.prototype.verify=function(o,f,u,p){if(!this.isPublic())throw Error("This is not public key");return p=!p||p=="buffer"?null:p,this.keyPair.verify(this.$getDataForEncrypt(o,u),f,p)},n.prototype.getKeySize=function(){return this.keyPair.keySize},n.prototype.getMaxMessageSize=function(){return this.keyPair.maxMessageLength},n.prototype.$getDataForEncrypt=function(o,f){if(O.isString(o)||O.isNumber(o))return Buffer.from(""+o,f||"utf8");if(Buffer.isBuffer(o))return o;if(O.isObject(o))return Buffer.from(JSON.stringify(o));throw Error("Unexpected data type")},n.prototype.$getDecryptedData=function(o,f){return f=f||"buffer",f=="buffer"?o:f=="json"?JSON.parse(o.toString()):o.toString(f)},n}()});var dn={};ur(dn,{rsaDecrypt:()=>ir,rsaEncrypt:()=>rr});module.exports=ar(dn);var ft=pr(Xe());var tr=()=>"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDBBYVBZ8N+oiOmChlpaW5L9x4JYIsk6AE6X/6IsYoeM1oXC6ayWFg6uonF8jOl4tkvESuNP2H1yKNIUE5O1Ygnxgc8bDor4BHkgfFNXEYvZYC4U2SDgv15HzGJqUex9FmwXtOFzdH93WBasqu1vT0kB8ZPS8J/7VcUmPHdLh4IDcGcAqlJLm1iK12gMQY9MvUmAl/Ebi1T6PVDOFghKmOruplw4fTs40I7vhcZ+22kVKsbC2RpGxXk6B+kQngePNO56xl3qpxM5E/Kad7DhCtZYnM1SbIpQnsppcHOjxwbBwnvsa4Ru8mcHXPpr2anWiw6GPjn8URhFC5sBMWEbv4nAgMBAAECggEAHpSQUxdsapCnkzPAaOnyNojVMmkgQl2bbDMvMVrnZfd+y23mIBVNDSjmkPzZX+u7uvA+dSdYjscVz2whq+26n4qJNPJ0mOTsEMbhgv8eg33SUeGsaAWFwP3HLGcsW645026Clo1QOqcrD9OEzstHd4Df00pOa1Qf2ryMfR1EVsQIpSN/r1Lkt21ujymJC6lbua0mPJeam+gLMasBRo7CXx6yVpcQ23Z/rkVSOu7fj6Zdlh3qTNQAl26V4/dGsstftb3UEC7J9ZRlrxtD97jdCpdXgdnLokp6G8qHw5Y1WrvVCyPgFELGayzv2YLO2F52WhCF5zzOlNmRpUkRqKAKeQKBgQDpufTk5sbu6ShROn9cUljkhzhNiMqAexeymQY9DtPCuwILWK3cZjxiTsoQuovJ+bpHYgiy9PgfW90NrEVcqNc1AKjBMhYo4eWcWj6DDDI2tT10e8VNzQgqvuPrQQPNBFEF7rnF+oR/vSWhnhYlj6GKiT4ko5fusZWjFiOf6JEx9QKBgQDTaoT7UlbTZ1SC2mlkjlu+imb1Hvf+H8j5P070TIyzSYEeJpFbdADdSwoOAoGZ485bn61APbbJxkiaU2Ia8GcDUOcsQtjErIus90ilu5b5BMkNMVxpyEp6eRdOQN2cb15Fg76AtL6n+6JD/w0aQW5Z1Mf+NlO3uZl0wSOFekryKwKBgQDQU7bsHKNuqhYMqPaCpMelEr3lpirRcGZEA8+itsebh7KfyHBXxizGd3H2jUAyTEx0efZFBMLwuKIFIOtGVxxTmv3QDkPgNtHBllKn3kQXrV5UqEnKOhmweCuRMocfw1wwzIN76vsVHNQhBVa6LhcP85qXb9XppRI6pm4kh1h7zQKBgDkWvXwkGuAROgfvtJ/7tRh5xR2R1EOiD6IGj2p2tVPAmIYswfmhFI6tMbTgxmBo3JNvRdhgEdjgm0BZHdfKbPa/RP11u5U4RqtZRxvB0R3DRgsy9hJ2jG4P/tQZvf39MMaysaGNrSItV/7mg4JAguztAWhLAUZObvrRIKdtg4lrAoGAS9TF3XgdEu8WYnAviw5gz7ktaW4MaloiYSM+8DruMa5+a0JEw1RjsRgjTNgE6ftpjJLFKO4p3+qIFtNLyknodcZ/4ea4I+dlXBAsYv2yvArHyIHnEYb7C6oL5m4MubpBKUP+X3elgeXNEzaEBrab352CJvaQMq+WQiUnGk2MSVU=",er=()=>"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwQWFQWfDfqIjpgoZaWluS/ceCWCLJOgBOl/+iLGKHjNaFwumslhYOrqJxfIzpeLZLxErjT9h9cijSFBOTtWIJ8YHPGw6K+AR5IHxTVxGL2WAuFNkg4L9eR8xialHsfRZsF7Thc3R/d1gWrKrtb09JAfGT0vCf+1XFJjx3S4eCA3BnAKpSS5tYitdoDEGPTL1JgJfxG4tU+j1QzhYISpjq7qZcOH07ONCO74XGfttpFSrGwtkaRsV5OgfpEJ4HjzTuesZd6qcTORPymnew4QrWWJzNUmyKUJ7KaXBzo8cGwcJ77GuEbvJnB1z6a9mp1osOhj45/FEYRQubATFhG7+JwIDAQAB";var rr=(t,e,r)=>{let i=e;return r==="private"?(i.includes("-----BEGIN PRIVATE KEY-----")||(i="-----BEGIN PRIVATE KEY-----"+i),i.includes("-----END PRIVATE KEY-----")||(i=i+"-----END PRIVATE KEY-----"),new ft.default(i).encrypt(t,"base64")):(i.includes("-----BEGIN PUBLIC KEY-----")||(i="-----BEGIN PUBLIC KEY-----"+i),i.includes("-----END PUBLIC KEY-----")||(i=i+"-----END PUBLIC KEY-----"),new ft.default(i).encrypt(t,"base64"))},ir=(t,e,r)=>{let i=e;return r==="private"?(i.includes("-----BEGIN PRIVATE KEY-----")||(i="-----BEGIN PRIVATE KEY-----"+i),i.includes("-----END PRIVATE KEY-----")||(i=i+"-----END PRIVATE KEY-----"),new ft.default(i).decrypt(t,"utf8")):(i.includes("-----BEGIN PUBLIC KEY-----")||(i="-----BEGIN PUBLIC KEY-----"+i),i.includes("-----END PUBLIC KEY-----")||(i=i+"-----END PUBLIC KEY-----"),new ft.default(i).decrypt(t,"utf8"))};function vn(){let t="hello! ha. ha.";console.log("data",t);let e=rr(t,er(),"public");console.log("dataEnc",e);let r=ir(e,tr(),"private");console.log("dataDec",r)}vn();0&&(module.exports={rsaDecrypt,rsaEncrypt});
/*!
 * RSA library for Node.js
 *
 * Author: rzcoder
 * License MIT
 */
//# sourceMappingURL=data:application/json;base64,

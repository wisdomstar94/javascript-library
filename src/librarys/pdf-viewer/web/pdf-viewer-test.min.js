(()=>{var oe=Object.create;var Vt=Object.defineProperty;var le=Object.getOwnPropertyDescriptor;var ce=Object.getOwnPropertyNames;var he=Object.getPrototypeOf,de=Object.prototype.hasOwnProperty;var ue=($,p,H)=>p in $?Vt($,p,{enumerable:!0,configurable:!0,writable:!0,value:H}):$[p]=H;var Xt=($=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy($,{get:(p,H)=>(typeof require!="undefined"?require:p)[H]}):$)(function($){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+$+'" is not supported')});var Rt=($,p)=>()=>(p||$((p={exports:{}}).exports,p),p.exports);var fe=($,p,H,c)=>{if(p&&typeof p=="object"||typeof p=="function")for(let K of ce(p))!de.call($,K)&&K!==H&&Vt($,K,{get:()=>p[K],enumerable:!(c=le(p,K))||c.enumerable});return $};var Qt=($,p,H)=>(H=$!=null?oe(he($)):{},fe(p||!$||!$.__esModule?Vt(H,"default",{value:$,enumerable:!0}):H,$));var Bt=($,p,H)=>(ue($,typeof p!="symbol"?p+"":p,H),H),zt=($,p,H)=>{if(!p.has($))throw TypeError("Cannot "+H)};var ut=($,p,H)=>(zt($,p,"read from private field"),H?H.call($):p.get($)),xt=($,p,H)=>{if(p.has($))throw TypeError("Cannot add the same private member more than once");p instanceof WeakSet?p.add($):p.set($,H)},Pt=($,p,H,c)=>(zt($,p,"write to private field"),c?c.call($,H):p.set($,H),H),Zt=($,p,H,c)=>({set _(K){Pt($,p,K,H)},get _(){return ut($,p,c)}}),It=($,p,H)=>(zt($,p,"access private method"),H);var $t=Rt(()=>{});var te=Rt(()=>{});var ee=Rt(()=>{});var ne=Rt(()=>{});var se=Rt(()=>{});var ie=Rt(()=>{});var Jt=Rt((exports,module)=>{(function(p,H){typeof exports=="object"&&typeof module=="object"?module.exports=H():typeof define=="function"&&define.amd?define("pdfjs-dist/build/pdf",[],H):typeof exports=="object"?exports["pdfjs-dist/build/pdf"]=H():p["pdfjs-dist/build/pdf"]=p.pdfjsLib=H()})(exports,()=>(()=>{"use strict";var __webpack_modules__=[,($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.VerbosityLevel=p.Util=p.UnknownErrorException=p.UnexpectedResponseException=p.UNSUPPORTED_FEATURES=p.TextRenderingMode=p.StreamType=p.RenderingIntentFlag=p.PermissionFlag=p.PasswordResponses=p.PasswordException=p.PageActionEventType=p.OPS=p.MissingPDFException=p.InvalidPDFException=p.ImageKind=p.IDENTITY_MATRIX=p.FormatError=p.FontType=p.FeatureTest=p.FONT_IDENTITY_MATRIX=p.DocumentActionEventType=p.CMapCompressionType=p.BaseException=p.AnnotationType=p.AnnotationStateModelType=p.AnnotationReviewState=p.AnnotationReplyType=p.AnnotationMode=p.AnnotationMarkedState=p.AnnotationFlag=p.AnnotationFieldFlag=p.AnnotationBorderStyleType=p.AnnotationActionEventType=p.AbortException=void 0,p.arrayByteLength=D,p.arraysToBytes=M,p.assert=Y,p.bytesToString=f,p.createPromiseCapability=Et,p.createValidAbsoluteUrl=lt,p.escapeString=it,p.getModificationDate=yt,p.getVerbosityLevel=W,p.info=z,p.isArrayBuffer=St,p.isArrayEqual=Tt,p.isAscii=bt,p.objectFromMap=B,p.objectSize=j,p.setVerbosityLevel=X,p.shadow=st,p.string32=L,p.stringToBytes=E,p.stringToPDFString=ct,p.stringToUTF16BEString=_t,p.stringToUTF8String=ft,p.unreachable=Z,p.utf8StringToString=mt,p.warn=J,H(2);let c=[1,0,0,1,0,0];p.IDENTITY_MATRIX=c;let K=[.001,0,0,.001,0,0];p.FONT_IDENTITY_MATRIX=K;let q={ANY:1,DISPLAY:2,PRINT:4,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};p.RenderingIntentFlag=q;let G={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};p.AnnotationMode=G;let U={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};p.PermissionFlag=U;let F={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};p.TextRenderingMode=F;let m={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};p.ImageKind=m;let x={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};p.AnnotationType=x;let k={MARKED:"Marked",REVIEW:"Review"};p.AnnotationStateModelType=k;let R={MARKED:"Marked",UNMARKED:"Unmarked"};p.AnnotationMarkedState=R;let A={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"};p.AnnotationReviewState=A;let o={GROUP:"Group",REPLY:"R"};p.AnnotationReplyType=o;let u={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};p.AnnotationFlag=u;let r={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};p.AnnotationFieldFlag=r;let g={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};p.AnnotationBorderStyleType=g;let b={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};p.AnnotationActionEventType=b;let y={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};p.DocumentActionEventType=y;let S={O:"PageOpen",C:"PageClose"};p.PageActionEventType=S;let e={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"};p.StreamType=e;let a={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1STANDARD:"TYPE1STANDARD",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};p.FontType=a;let _={ERRORS:0,WARNINGS:1,INFOS:5};p.VerbosityLevel=_;let T={NONE:0,BINARY:1,STREAM:2};p.CMapCompressionType=T;let C={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};p.OPS=C;let P={unknown:"unknown",forms:"forms",javaScript:"javaScript",signatures:"signatures",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontBuildPath:"errorFontBuildPath",errorFontGetPath:"errorFontGetPath",errorMarkedContent:"errorMarkedContent",errorContentSubStream:"errorContentSubStream"};p.UNSUPPORTED_FEATURES=P;let w={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};p.PasswordResponses=w;let I=_.WARNINGS;function X(V){Number.isInteger(V)&&(I=V)}function W(){return I}function z(V){I>=_.INFOS&&console.log(`Info: ${V}`)}function J(V){I>=_.WARNINGS&&console.log(`Warning: ${V}`)}function Z(V){throw new Error(V)}function Y(V,O){V||Z(O)}function et(V){if(!V)return!1;switch(V.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function lt(V,O=null,N=null){if(!V)return null;try{if(N&&typeof V=="string"){if(N.addDefaultProtocol&&V.startsWith("www.")){let dt=V.match(/\./g);dt&&dt.length>=2&&(V=`http://${V}`)}if(N.tryConvertEncoding)try{V=ft(V)}catch(dt){}}let at=O?new URL(V,O):new URL(V);if(et(at))return at}catch(at){}return null}function st(V,O,N){return Object.defineProperty(V,O,{value:N,enumerable:!0,configurable:!0,writable:!1}),N}let v=function(){function O(N,at){this.constructor===O&&Z("Cannot initialize BaseException."),this.message=N,this.name=at}return O.prototype=new Error,O.constructor=O,O}();p.BaseException=v;class l extends v{constructor(O,N){super(O,"PasswordException"),this.code=N}}p.PasswordException=l;class s extends v{constructor(O,N){super(O,"UnknownErrorException"),this.details=N}}p.UnknownErrorException=s;class t extends v{constructor(O){super(O,"InvalidPDFException")}}p.InvalidPDFException=t;class n extends v{constructor(O){super(O,"MissingPDFException")}}p.MissingPDFException=n;class i extends v{constructor(O,N){super(O,"UnexpectedResponseException"),this.status=N}}p.UnexpectedResponseException=i;class d extends v{constructor(O){super(O,"FormatError")}}p.FormatError=d;class h extends v{constructor(O){super(O,"AbortException")}}p.AbortException=h;function f(V){(typeof V!="object"||V===null||V.length===void 0)&&Z("Invalid argument for bytesToString");let O=V.length,N=8192;if(O<N)return String.fromCharCode.apply(null,V);let at=[];for(let dt=0;dt<O;dt+=N){let gt=Math.min(dt+N,O),pt=V.subarray(dt,gt);at.push(String.fromCharCode.apply(null,pt))}return at.join("")}function E(V){typeof V!="string"&&Z("Invalid argument for stringToBytes");let O=V.length,N=new Uint8Array(O);for(let at=0;at<O;++at)N[at]=V.charCodeAt(at)&255;return N}function D(V){if(V.length!==void 0)return V.length;if(V.byteLength!==void 0)return V.byteLength;Z("Invalid argument for arrayByteLength")}function M(V){let O=V.length;if(O===1&&V[0]instanceof Uint8Array)return V[0];let N=0;for(let gt=0;gt<O;gt++)N+=D(V[gt]);let at=0,dt=new Uint8Array(N);for(let gt=0;gt<O;gt++){let pt=V[gt];pt instanceof Uint8Array||(typeof pt=="string"?pt=E(pt):pt=new Uint8Array(pt));let wt=pt.byteLength;dt.set(pt,at),at+=wt}return dt}function L(V){return String.fromCharCode(V>>24&255,V>>16&255,V>>8&255,V&255)}function j(V){return Object.keys(V).length}function B(V){let O=Object.create(null);for(let[N,at]of V)O[N]=at;return O}function Q(){let V=new Uint8Array(4);return V[0]=1,new Uint32Array(V.buffer,0,1)[0]===1}function nt(){try{return new Function(""),!0}catch(V){return!1}}class rt{static get isLittleEndian(){return st(this,"isLittleEndian",Q())}static get isEvalSupported(){return st(this,"isEvalSupported",nt())}static get isOffscreenCanvasSupported(){return st(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}}p.FeatureTest=rt;let ot=[...Array(256).keys()].map(V=>V.toString(16).padStart(2,"0"));class tt{static makeHexColor(O,N,at){return`#${ot[O]}${ot[N]}${ot[at]}`}static scaleMinMax(O,N){let at;O[0]?(O[0]<0&&(at=N[0],N[0]=N[1],N[1]=at),N[0]*=O[0],N[1]*=O[0],O[3]<0&&(at=N[2],N[2]=N[3],N[3]=at),N[2]*=O[3],N[3]*=O[3]):(at=N[0],N[0]=N[2],N[2]=at,at=N[1],N[1]=N[3],N[3]=at,O[1]<0&&(at=N[2],N[2]=N[3],N[3]=at),N[2]*=O[1],N[3]*=O[1],O[2]<0&&(at=N[0],N[0]=N[1],N[1]=at),N[0]*=O[2],N[1]*=O[2]),N[0]+=O[4],N[1]+=O[4],N[2]+=O[5],N[3]+=O[5]}static transform(O,N){return[O[0]*N[0]+O[2]*N[1],O[1]*N[0]+O[3]*N[1],O[0]*N[2]+O[2]*N[3],O[1]*N[2]+O[3]*N[3],O[0]*N[4]+O[2]*N[5]+O[4],O[1]*N[4]+O[3]*N[5]+O[5]]}static applyTransform(O,N){let at=O[0]*N[0]+O[1]*N[2]+N[4],dt=O[0]*N[1]+O[1]*N[3]+N[5];return[at,dt]}static applyInverseTransform(O,N){let at=N[0]*N[3]-N[1]*N[2],dt=(O[0]*N[3]-O[1]*N[2]+N[2]*N[5]-N[4]*N[3])/at,gt=(-O[0]*N[1]+O[1]*N[0]+N[4]*N[1]-N[5]*N[0])/at;return[dt,gt]}static getAxialAlignedBoundingBox(O,N){let at=tt.applyTransform(O,N),dt=tt.applyTransform(O.slice(2,4),N),gt=tt.applyTransform([O[0],O[3]],N),pt=tt.applyTransform([O[2],O[1]],N);return[Math.min(at[0],dt[0],gt[0],pt[0]),Math.min(at[1],dt[1],gt[1],pt[1]),Math.max(at[0],dt[0],gt[0],pt[0]),Math.max(at[1],dt[1],gt[1],pt[1])]}static inverseTransform(O){let N=O[0]*O[3]-O[1]*O[2];return[O[3]/N,-O[1]/N,-O[2]/N,O[0]/N,(O[2]*O[5]-O[4]*O[3])/N,(O[4]*O[1]-O[5]*O[0])/N]}static apply3dTransform(O,N){return[O[0]*N[0]+O[1]*N[1]+O[2]*N[2],O[3]*N[0]+O[4]*N[1]+O[5]*N[2],O[6]*N[0]+O[7]*N[1]+O[8]*N[2]]}static singularValueDecompose2dScale(O){let N=[O[0],O[2],O[1],O[3]],at=O[0]*N[0]+O[1]*N[2],dt=O[0]*N[1]+O[1]*N[3],gt=O[2]*N[0]+O[3]*N[2],pt=O[2]*N[1]+O[3]*N[3],wt=(at+pt)/2,Mt=Math.sqrt((at+pt)**2-4*(at*pt-gt*dt))/2,Ft=wt+Mt||1,Ct=wt-Mt||1;return[Math.sqrt(Ft),Math.sqrt(Ct)]}static normalizeRect(O){let N=O.slice(0);return O[0]>O[2]&&(N[0]=O[2],N[2]=O[0]),O[1]>O[3]&&(N[1]=O[3],N[3]=O[1]),N}static intersect(O,N){let at=Math.max(Math.min(O[0],O[2]),Math.min(N[0],N[2])),dt=Math.min(Math.max(O[0],O[2]),Math.max(N[0],N[2]));if(at>dt)return null;let gt=Math.max(Math.min(O[1],O[3]),Math.min(N[1],N[3])),pt=Math.min(Math.max(O[1],O[3]),Math.max(N[1],N[3]));return gt>pt?null:[at,gt,dt,pt]}static bezierBoundingBox(O,N,at,dt,gt,pt,wt,Mt){let Ft=[],Ct=[[],[]],Ot,kt,Nt,At,jt,Ut,qt,Gt;for(let Ht=0;Ht<2;++Ht){if(Ht===0?(kt=6*O-12*at+6*gt,Ot=-3*O+9*at-9*gt+3*wt,Nt=3*at-3*O):(kt=6*N-12*dt+6*pt,Ot=-3*N+9*dt-9*pt+3*Mt,Nt=3*dt-3*N),Math.abs(Ot)<1e-12){if(Math.abs(kt)<1e-12)continue;At=-Nt/kt,0<At&&At<1&&Ft.push(At);continue}qt=kt*kt-4*Nt*Ot,Gt=Math.sqrt(qt),!(qt<0)&&(jt=(-kt+Gt)/(2*Ot),0<jt&&jt<1&&Ft.push(jt),Ut=(-kt-Gt)/(2*Ot),0<Ut&&Ut<1&&Ft.push(Ut))}let Dt=Ft.length,vt,Lt=Dt;for(;Dt--;)At=Ft[Dt],vt=1-At,Ct[0][Dt]=vt*vt*vt*O+3*vt*vt*At*at+3*vt*At*At*gt+At*At*At*wt,Ct[1][Dt]=vt*vt*vt*N+3*vt*vt*At*dt+3*vt*At*At*pt+At*At*At*Mt;return Ct[0][Lt]=O,Ct[1][Lt]=N,Ct[0][Lt+1]=wt,Ct[1][Lt+1]=Mt,Ct[0].length=Ct[1].length=Lt+2,[Math.min(...Ct[0]),Math.min(...Ct[1]),Math.max(...Ct[0]),Math.max(...Ct[1])]}}p.Util=tt;let ht=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function ct(V){if(V[0]>="\xEF"){let N;if(V[0]==="\xFE"&&V[1]==="\xFF"?N="utf-16be":V[0]==="\xFF"&&V[1]==="\xFE"?N="utf-16le":V[0]==="\xEF"&&V[1]==="\xBB"&&V[2]==="\xBF"&&(N="utf-8"),N)try{let at=new TextDecoder(N,{fatal:!0}),dt=E(V);return at.decode(dt)}catch(at){J(`stringToPDFString: "${at}".`)}}let O=[];for(let N=0,at=V.length;N<at;N++){let dt=ht[V.charCodeAt(N)];O.push(dt?String.fromCharCode(dt):V.charAt(N))}return O.join("")}function it(V){return V.replace(/([()\\\n\r])/g,O=>O===`
`?"\\n":O==="\r"?"\\r":`\\${O}`)}function bt(V){return/^[\x00-\x7F]*$/.test(V)}function _t(V){let O=["\xFE\xFF"];for(let N=0,at=V.length;N<at;N++){let dt=V.charCodeAt(N);O.push(String.fromCharCode(dt>>8&255),String.fromCharCode(dt&255))}return O.join("")}function ft(V){return decodeURIComponent(escape(V))}function mt(V){return unescape(encodeURIComponent(V))}function St(V){return typeof V=="object"&&V!==null&&V.byteLength!==void 0}function Tt(V,O){if(V.length!==O.length)return!1;for(let N=0,at=V.length;N<at;N++)if(V[N]!==O[N])return!1;return!0}function yt(V=new Date){return[V.getUTCFullYear().toString(),(V.getUTCMonth()+1).toString().padStart(2,"0"),V.getUTCDate().toString().padStart(2,"0"),V.getUTCHours().toString().padStart(2,"0"),V.getUTCMinutes().toString().padStart(2,"0"),V.getUTCSeconds().toString().padStart(2,"0")].join("")}function Et(){let V=Object.create(null),O=!1;return Object.defineProperty(V,"settled",{get(){return O}}),V.promise=new Promise(function(N,at){V.resolve=function(dt){O=!0,N(dt)},V.reject=function(dt){O=!0,at(dt)}}),V}},($,p,H)=>{var c=H(3)},($,p)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.isNodeJS=void 0;let H=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");p.isNodeJS=H},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var $,H,c,K,q,G,U,F,m,Yt,k;Object.defineProperty(exports,"__esModule",{value:!0}),exports.build=exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.version=void 0;var _util=__w_pdfjs_require__(1),_display_utils=__w_pdfjs_require__(5),_font_loader=__w_pdfjs_require__(7),_annotation_storage=__w_pdfjs_require__(8),_canvas=__w_pdfjs_require__(10),_worker_options=__w_pdfjs_require__(13),_is_node=__w_pdfjs_require__(3),_message_handler=__w_pdfjs_require__(14),_metadata=__w_pdfjs_require__(15),_optional_content_config=__w_pdfjs_require__(16),_transport_stream=__w_pdfjs_require__(17),_xfa_text=__w_pdfjs_require__(18);let DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DefaultCanvasFactory=_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;let DefaultCMapReaderFactory=_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;let DefaultStandardFontDataFactory=_display_utils.DOMStandardFontDataFactory;if(exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory,_is_node.isNodeJS){let{NodeCanvasFactory:A,NodeCMapReaderFactory:o,NodeStandardFontDataFactory:u}=__w_pdfjs_require__(19);exports.DefaultCanvasFactory=DefaultCanvasFactory=A,exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory=o,exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory=u}let createPDFNetworkStream;function setPDFNetworkStreamFactory(A){createPDFNetworkStream=A}function getDocument(A){let o=new PDFDocumentLoadingTask,u;if(typeof A=="string"||A instanceof URL)u={url:A};else if((0,_util.isArrayBuffer)(A))u={data:A};else if(A instanceof PDFDataRangeTransport)u={range:A};else{if(typeof A!="object")throw new Error("Invalid parameter in getDocument, need either string, URL, Uint8Array, or parameter object.");if(!A.url&&!A.data&&!A.range)throw new Error("Invalid parameter object: need either .data, .range or .url");u=A}let r=Object.create(null),g=null,b=null;for(let S in u){let e=u[S];switch(S){case"url":if(typeof window<"u")try{r[S]=new URL(e,window.location).href;continue}catch(a){(0,_util.warn)(`Cannot create valid URL: "${a}".`)}else if(typeof e=="string"||e instanceof URL){r[S]=e.toString();continue}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");case"range":g=e;continue;case"worker":b=e;continue;case"data":if(_is_node.isNodeJS&&typeof Buffer<"u"&&e instanceof Buffer)r[S]=new Uint8Array(e);else{if(e instanceof Uint8Array)break;if(typeof e=="string")r[S]=(0,_util.stringToBytes)(e);else if(typeof e=="object"&&e!==null&&!isNaN(e.length))r[S]=new Uint8Array(e);else if((0,_util.isArrayBuffer)(e))r[S]=new Uint8Array(e);else throw new Error("Invalid PDF binary data: either typed array, string, or array-like object is expected in the data property.")}continue}r[S]=e}if(r.CMapReaderFactory=r.CMapReaderFactory||DefaultCMapReaderFactory,r.StandardFontDataFactory=r.StandardFontDataFactory||DefaultStandardFontDataFactory,r.ignoreErrors=r.stopAtErrors!==!0,r.fontExtraProperties=r.fontExtraProperties===!0,r.pdfBug=r.pdfBug===!0,r.enableXfa=r.enableXfa===!0,(!Number.isInteger(r.rangeChunkSize)||r.rangeChunkSize<1)&&(r.rangeChunkSize=DEFAULT_RANGE_CHUNK_SIZE),(typeof r.docBaseUrl!="string"||(0,_display_utils.isDataScheme)(r.docBaseUrl))&&(r.docBaseUrl=null),(!Number.isInteger(r.maxImageSize)||r.maxImageSize<-1)&&(r.maxImageSize=-1),typeof r.cMapUrl!="string"&&(r.cMapUrl=null),typeof r.standardFontDataUrl!="string"&&(r.standardFontDataUrl=null),typeof r.useWorkerFetch!="boolean"&&(r.useWorkerFetch=r.CMapReaderFactory===_display_utils.DOMCMapReaderFactory&&r.StandardFontDataFactory===_display_utils.DOMStandardFontDataFactory),typeof r.isEvalSupported!="boolean"&&(r.isEvalSupported=!0),typeof r.disableFontFace!="boolean"&&(r.disableFontFace=_is_node.isNodeJS),typeof r.useSystemFonts!="boolean"&&(r.useSystemFonts=!_is_node.isNodeJS&&!r.disableFontFace),(typeof r.ownerDocument!="object"||r.ownerDocument===null)&&(r.ownerDocument=globalThis.document),typeof r.disableRange!="boolean"&&(r.disableRange=!1),typeof r.disableStream!="boolean"&&(r.disableStream=!1),typeof r.disableAutoFetch!="boolean"&&(r.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(r.verbosity),!b){let S={verbosity:r.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};b=S.port?PDFWorker.fromPort(S):new PDFWorker(S),o._worker=b}let y=o.docId;return b.promise.then(function(){if(o.destroyed)throw new Error("Loading aborted");let S=_fetchDocument(b,r,g,y),e=new Promise(function(a){let _;g?_=new _transport_stream.PDFDataTransportStream({length:r.length,initialData:r.initialData,progressiveDone:r.progressiveDone,contentDispositionFilename:r.contentDispositionFilename,disableRange:r.disableRange,disableStream:r.disableStream},g):r.data||(_=createPDFNetworkStream({url:r.url,length:r.length,httpHeaders:r.httpHeaders,withCredentials:r.withCredentials,rangeChunkSize:r.rangeChunkSize,disableRange:r.disableRange,disableStream:r.disableStream})),a(_)});return Promise.all([S,e]).then(function([a,_]){if(o.destroyed)throw new Error("Loading aborted");let T=new _message_handler.MessageHandler(y,a,b.port),C=new WorkerTransport(T,o,_,r);o._transport=C,T.send("Ready",null)})}).catch(o._capability.reject),o}async function _fetchDocument(A,o,u,r){if(A.destroyed)throw new Error("Worker was destroyed");u&&(o.length=u.length,o.initialData=u.initialData,o.progressiveDone=u.progressiveDone,o.contentDispositionFilename=u.contentDispositionFilename);let g=await A.messageHandler.sendWithPromise("GetDocRequest",{docId:r,apiVersion:"2.14.305",source:{data:o.data,url:o.url,password:o.password,disableAutoFetch:o.disableAutoFetch,rangeChunkSize:o.rangeChunkSize,length:o.length},maxImageSize:o.maxImageSize,disableFontFace:o.disableFontFace,docBaseUrl:o.docBaseUrl,ignoreErrors:o.ignoreErrors,isEvalSupported:o.isEvalSupported,fontExtraProperties:o.fontExtraProperties,enableXfa:o.enableXfa,useSystemFonts:o.useSystemFonts,cMapUrl:o.useWorkerFetch?o.cMapUrl:null,standardFontDataUrl:o.useWorkerFetch?o.standardFontDataUrl:null});if(A.destroyed)throw new Error("Worker was destroyed");return g}let p=class{constructor(){this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId=`d${Zt(p,$)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}get promise(){return this._capability.promise}async destroy(){var o;this.destroyed=!0,await((o=this._transport)==null?void 0:o.destroy()),this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}},PDFDocumentLoadingTask=p;$=new WeakMap,xt(PDFDocumentLoadingTask,$,0),exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(o,u,r=!1,g=null){this.length=o,this.initialData=u,this.progressiveDone=r,this.contentDispositionFilename=g,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}addRangeListener(o){this._rangeListeners.push(o)}addProgressListener(o){this._progressListeners.push(o)}addProgressiveReadListener(o){this._progressiveReadListeners.push(o)}addProgressiveDoneListener(o){this._progressiveDoneListeners.push(o)}onDataRange(o,u){for(let r of this._rangeListeners)r(o,u)}onDataProgress(o,u){this._readyCapability.promise.then(()=>{for(let r of this._progressListeners)r(o,u)})}onDataProgressiveRead(o){this._readyCapability.promise.then(()=>{for(let u of this._progressiveReadListeners)u(o)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(let o of this._progressiveDoneListeners)o()})}transportReady(){this._readyCapability.resolve()}requestDataRange(o,u){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(o,u){this._pdfInfo=o,this._transport=u,Object.defineProperty(this,"fingerprint",{get(){return(0,_display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead."),this.fingerprints[0]}}),Object.defineProperty(this,"getStats",{value:async()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead."),this.stats||{streamTypes:{},fontTypes:{}})})}get annotationStorage(){return this._transport.annotationStorage}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get stats(){return this._transport.stats}get isPureXfa(){return!!this._transport._htmlForXfa}get allXfaHtml(){return this._transport._htmlForXfa}getPage(o){return this._transport.getPage(o)}getPageIndex(o){return this._transport.getPageIndex(o)}getDestinations(){return this._transport.getDestinations()}getDestination(o){return this._transport.getDestination(o)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(o=!1){return this._transport.startCleanup(o||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}saveDocument(){return this._transport.annotationStorage.size<=0&&(0,_display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this._transport.saveDocument()}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(o,u,r,g,b=!1){this._pageIndex=o,this._pageInfo=u,this._ownerDocument=g,this._transport=r,this._stats=b?new _display_utils.StatTimer:null,this._pdfBug=b,this.commonObjs=r.commonObjs,this.objs=new PDFObjects,this._bitmaps=new Set,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this._intentStates=new Map,this._annotationPromises=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:o,rotation:u=this.rotate,offsetX:r=0,offsetY:g=0,dontFlip:b=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:o,rotation:u,offsetX:r,offsetY:g,dontFlip:b})}getAnnotations({intent:o="display"}={}){let u=this._transport.getRenderingIntent(o),r=this._annotationPromises.get(u.cacheKey);return r||(r=this._transport.getAnnotations(this._pageIndex,u.renderingIntent),this._annotationPromises.set(u.cacheKey,r),r=r.then(g=>{for(let b of g)b.titleObj!==void 0&&Object.defineProperty(b,"title",{get(){return(0,_display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead."),b.titleObj.str}}),b.contentsObj!==void 0&&Object.defineProperty(b,"contents",{get(){return(0,_display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead."),b.contentsObj.str}});return g})),r}getJSActions(){return this._jsActionsPromise||(this._jsActionsPromise=this._transport.getPageJSActions(this._pageIndex))}async getXfa(){var o;return((o=this._transport._htmlForXfa)==null?void 0:o.children[this._pageIndex])||null}render({canvasContext:o,viewport:u,intent:r="display",annotationMode:g=_util.AnnotationMode.ENABLE,transform:b=null,imageLayer:y=null,canvasFactory:S=null,background:e=null,optionalContentConfigPromise:a=null,annotationCanvasMap:_=null,pageColors:T=null}){var J,Z;((J=arguments[0])==null?void 0:J.renderInteractiveForms)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead."),arguments[0].renderInteractiveForms===!0&&g===_util.AnnotationMode.ENABLE&&(g=_util.AnnotationMode.ENABLE_FORMS)),((Z=arguments[0])==null?void 0:Z.includeAnnotationStorage)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead."),arguments[0].includeAnnotationStorage===!0&&g===_util.AnnotationMode.ENABLE&&(g=_util.AnnotationMode.ENABLE_STORAGE)),this._stats&&this._stats.time("Overall");let C=this._transport.getRenderingIntent(r,g);this.pendingCleanup=!1,a||(a=this._transport.getOptionalContentConfig());let P=this._intentStates.get(C.cacheKey);P||(P=Object.create(null),this._intentStates.set(C.cacheKey,P)),P.streamReaderCancelTimeout&&(clearTimeout(P.streamReaderCancelTimeout),P.streamReaderCancelTimeout=null);let w=S||new DefaultCanvasFactory({ownerDocument:this._ownerDocument}),I=!!(C.renderingIntent&_util.RenderingIntentFlag.PRINT);P.displayReadyCapability||(P.displayReadyCapability=(0,_util.createPromiseCapability)(),P.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(C));let X=Y=>{P.renderTasks.delete(W),(this.cleanupAfterRender||I)&&(this.pendingCleanup=!0),this._tryCleanup(),Y?(W.capability.reject(Y),this._abortOperatorList({intentState:P,reason:Y instanceof Error?Y:new Error(Y)})):W.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"))},W=new InternalRenderTask({callback:X,params:{canvasContext:o,viewport:u,transform:b,imageLayer:y,background:e},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:_,operatorList:P.operatorList,pageIndex:this._pageIndex,canvasFactory:w,useRequestAnimationFrame:!I,pdfBug:this._pdfBug,pageColors:T});(P.renderTasks||(P.renderTasks=new Set)).add(W);let z=W.task;return Promise.all([P.displayReadyCapability.promise,a]).then(([Y,et])=>{if(this.pendingCleanup){X();return}this._stats&&this._stats.time("Rendering"),W.initializeGraphics({transparency:Y,optionalContentConfig:et}),W.operatorListChanged()}).catch(X),z}getOperatorList({intent:o="display",annotationMode:u=_util.AnnotationMode.ENABLE}={}){function r(){b.operatorList.lastChunk&&(b.opListReadCapability.resolve(b.operatorList),b.renderTasks.delete(y))}let g=this._transport.getRenderingIntent(o,u,!0),b=this._intentStates.get(g.cacheKey);b||(b=Object.create(null),this._intentStates.set(g.cacheKey,b));let y;return b.opListReadCapability||(y=Object.create(null),y.operatorListChanged=r,b.opListReadCapability=(0,_util.createPromiseCapability)(),(b.renderTasks||(b.renderTasks=new Set)).add(y),b.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(g)),b.opListReadCapability.promise}streamTextContent({disableCombineTextItems:o=!1,includeMarkedContent:u=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,combineTextItems:o!==!0,includeMarkedContent:u===!0},{highWaterMark:100,size(g){return g.items.length}})}getTextContent(o={}){if(this._transport._htmlForXfa)return this.getXfa().then(r=>_xfa_text.XfaText.textContent(r));let u=this.streamTextContent(o);return new Promise(function(r,g){function b(){y.read().then(function({value:e,done:a}){if(a){r(S);return}Object.assign(S.styles,e.styles),S.items.push(...e.items),b()},g)}let y=u.getReader(),S={items:[],styles:Object.create(null)};b()})}getStructTree(){return this._structTreePromise||(this._structTreePromise=this._transport.getStructTree(this._pageIndex))}_destroy(){this.destroyed=!0;let o=[];for(let u of this._intentStates.values())if(this._abortOperatorList({intentState:u,reason:new Error("Page was destroyed."),force:!0}),!u.opListReadCapability)for(let r of u.renderTasks)o.push(r.completed),r.cancel();this.objs.clear();for(let u of this._bitmaps)u.close();return this._bitmaps.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,this.pendingCleanup=!1,Promise.all(o)}cleanup(o=!1){return this.pendingCleanup=!0,this._tryCleanup(o)}_tryCleanup(o=!1){if(!this.pendingCleanup)return!1;for(let{renderTasks:u,operatorList:r}of this._intentStates.values())if(u.size>0||!r.lastChunk)return!1;this._intentStates.clear(),this.objs.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,o&&this._stats&&(this._stats=new _display_utils.StatTimer);for(let u of this._bitmaps)u.close();return this._bitmaps.clear(),this.pendingCleanup=!1,!0}_startRenderPage(o,u){let r=this._intentStates.get(u);!r||(this._stats&&this._stats.timeEnd("Page Request"),r.displayReadyCapability&&r.displayReadyCapability.resolve(o))}_renderPageChunk(o,u){for(let r=0,g=o.length;r<g;r++)u.operatorList.fnArray.push(o.fnArray[r]),u.operatorList.argsArray.push(o.argsArray[r]);u.operatorList.lastChunk=o.lastChunk;for(let r of u.renderTasks)r.operatorListChanged();o.lastChunk&&this._tryCleanup()}_pumpOperatorList({renderingIntent:o,cacheKey:u}){let g=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:o,cacheKey:u,annotationStorage:o&_util.RenderingIntentFlag.ANNOTATIONS_STORAGE?this._transport.annotationStorage.serializable:null}).getReader(),b=this._intentStates.get(u);b.streamReader=g;let y=()=>{g.read().then(({value:S,done:e})=>{if(e){b.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(S,b),y())},S=>{if(b.streamReader=null,!this._transport.destroyed){if(b.operatorList){b.operatorList.lastChunk=!0;for(let e of b.renderTasks)e.operatorListChanged();this._tryCleanup()}if(b.displayReadyCapability)b.displayReadyCapability.reject(S);else if(b.opListReadCapability)b.opListReadCapability.reject(S);else throw S}})};y()}_abortOperatorList({intentState:o,reason:u,force:r=!1}){if(!!o.streamReader){if(!r){if(o.renderTasks.size>0)return;if(u instanceof _display_utils.RenderingCancelledException){o.streamReaderCancelTimeout=setTimeout(()=>{this._abortOperatorList({intentState:o,reason:u,force:!0}),o.streamReaderCancelTimeout=null},RENDERING_CANCELLED_TIMEOUT);return}}if(o.streamReader.cancel(new _util.AbortException(u.message)).catch(()=>{}),o.streamReader=null,!this._transport.destroyed){for(let[g,b]of this._intentStates)if(b===o){this._intentStates.delete(g);break}this.cleanup()}}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){this._listeners=[],this._deferred=Promise.resolve()}postMessage(o,u){let r={data:structuredClone(o,u)};this._deferred.then(()=>{for(let g of this._listeners)g.call(this,r)})}addEventListener(o,u){this._listeners.push(u)}removeEventListener(o,u){let r=this._listeners.indexOf(u);this._listeners.splice(r,1)}terminate(){this._listeners.length=0}}exports.LoopbackPort=LoopbackPort;let PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_is_node.isNodeJS&&typeof Xt=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){let A=(H=document==null?void 0:document.currentScript)==null?void 0:H.src;A&&(PDFWorkerUtil.fallbackWorkerSrc=A.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(A,o){let u;try{if(u=new URL(A),!u.origin||u.origin==="null")return!1}catch(g){return!1}let r=new URL(o,u);return u.origin===r.origin},PDFWorkerUtil.createCDNWrapper=function(A){let o=`importScripts("${A}");`;return URL.createObjectURL(new Blob([o]))}}let _PDFWorker=class{constructor({name:A=null,port:o=null,verbosity:u=(0,_util.getVerbosityLevel)()}={}){if(o&&ut(_PDFWorker,c).has(o))throw new Error("Cannot use more than one PDFWorker per port.");if(this.name=A,this.destroyed=!1,this.verbosity=u,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,o){ut(_PDFWorker,c).set(o,this),this._initializeFromPort(o);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(A){this._port=A,this._messageHandler=new _message_handler.MessageHandler("main","worker",A),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve()}_initialize(){if(typeof Worker<"u"&&!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let A=_PDFWorker.workerSrc;try{PDFWorkerUtil.isSameOrigin(window.location.href,A)||(A=PDFWorkerUtil.createCDNWrapper(new URL(A,window.location).href));let o=new Worker(A),u=new _message_handler.MessageHandler("main","worker",o),r=()=>{o.removeEventListener("error",g),u.destroy(),o.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},g=()=>{this._webWorker||r()};o.addEventListener("error",g),u.on("test",y=>{if(o.removeEventListener("error",g),this.destroyed){r();return}y?(this._messageHandler=u,this._port=o,this._webWorker=o,this._readyCapability.resolve(),u.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),u.destroy(),o.terminate())}),u.on("ready",y=>{if(o.removeEventListener("error",g),this.destroyed){r();return}try{b()}catch(S){this._setupFakeWorker()}});let b=()=>{let y=new Uint8Array;u.send("test",y,[y.buffer])};b();return}catch(o){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(A=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}let o=new LoopbackPort;this._port=o;let u=`fake${PDFWorkerUtil.fakeWorkerId++}`,r=new _message_handler.MessageHandler(u+"_worker",u,o);A.setup(r,o);let g=new _message_handler.MessageHandler(u,u+"_worker",o);this._messageHandler=g,this._readyCapability.resolve(),g.send("configure",{verbosity:this.verbosity})}).catch(A=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${A.message}".`))})}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),ut(_PDFWorker,c).delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(A){if(!(A!=null&&A.port))throw new Error("PDFWorker.fromPort - invalid method signature.");return ut(this,c).has(A.port)?ut(this,c).get(A.port):new _PDFWorker(A)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var A;try{return((A=globalThis.pdfjsWorker)==null?void 0:A.WorkerMessageHandler)||null}catch(o){return null}}static get _setupFakeWorkerGlobal(){let loader=async()=>{let mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS&&typeof Xt=="function"){let worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}},PDFWorker=_PDFWorker;c=new WeakMap,xt(PDFWorker,c,new WeakMap),exports.PDFWorker=PDFWorker,PDFWorker.getWorkerSrc=function(){return(0,_display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead."),this.workerSrc};class WorkerTransport{constructor(o,u,r,g){xt(this,K,null);xt(this,q,new Map);xt(this,G,new Map);xt(this,U,null);this.messageHandler=o,this.loadingTask=u,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:u.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),ownerDocument:g.ownerDocument,styleElement:g.styleElement}),this._params=g,g.useWorkerFetch||(this.CMapReaderFactory=new g.CMapReaderFactory({baseUrl:g.cMapUrl,isCompressed:g.cMapPacked}),this.StandardFontDataFactory=new g.StandardFontDataFactory({baseUrl:g.standardFontDataUrl})),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=r,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}get stats(){return ut(this,K)}getRenderingIntent(o,u=_util.AnnotationMode.ENABLE,r=!1){let g=_util.RenderingIntentFlag.DISPLAY,b="";switch(o){case"any":g=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":g=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${o}`)}switch(u){case _util.AnnotationMode.DISABLE:g+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:g+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:g+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,b=this.annotationStorage.hash;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${u}`)}return r&&(g+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:g,cacheKey:`${g}_${b}`}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));let o=[];for(let r of ut(this,q).values())o.push(r._destroy());ut(this,q).clear(),ut(this,G).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();let u=this.messageHandler.sendWithPromise("Terminate",null);return o.push(u),Promise.all(o).then(()=>{this.commonObjs.clear(),this.fontLoader.clear(),Pt(this,U,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null,this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){let{messageHandler:o,loadingTask:u}=this;o.on("GetReader",(r,g)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=b=>{this._lastProgress={loaded:b.loaded,total:b.total}},g.onPull=()=>{this._fullReader.read().then(function({value:b,done:y}){if(y){g.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(b),"GetReader - expected an ArrayBuffer."),g.enqueue(new Uint8Array(b),1,[b])}).catch(b=>{g.error(b)})},g.onCancel=b=>{this._fullReader.cancel(b),g.ready.catch(y=>{if(!this.destroyed)throw y})}}),o.on("ReaderHeadersReady",r=>{let g=(0,_util.createPromiseCapability)(),b=this._fullReader;return b.headersReady.then(()=>{var y;(!b.isStreamingSupported||!b.isRangeSupported)&&(this._lastProgress&&((y=u.onProgress)==null||y.call(u,this._lastProgress)),b.onProgress=S=>{var e;(e=u.onProgress)==null||e.call(u,{loaded:S.loaded,total:S.total})}),g.resolve({isStreamingSupported:b.isStreamingSupported,isRangeSupported:b.isRangeSupported,contentLength:b.contentLength})},g.reject),g.promise}),o.on("GetRangeReader",(r,g)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");let b=this._networkStream.getRangeReader(r.begin,r.end);if(!b){g.close();return}g.onPull=()=>{b.read().then(function({value:y,done:S}){if(S){g.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(y),"GetRangeReader - expected an ArrayBuffer."),g.enqueue(new Uint8Array(y),1,[y])}).catch(y=>{g.error(y)})},g.onCancel=y=>{b.cancel(y),g.ready.catch(S=>{if(!this.destroyed)throw S})}}),o.on("GetDoc",({pdfInfo:r})=>{this._numPages=r.numPages,this._htmlForXfa=r.htmlForXfa,delete r.htmlForXfa,u._capability.resolve(new PDFDocumentProxy(r,this))}),o.on("DocException",function(r){let g;switch(r.name){case"PasswordException":g=new _util.PasswordException(r.message,r.code);break;case"InvalidPDFException":g=new _util.InvalidPDFException(r.message);break;case"MissingPDFException":g=new _util.MissingPDFException(r.message);break;case"UnexpectedResponseException":g=new _util.UnexpectedResponseException(r.message,r.status);break;case"UnknownErrorException":g=new _util.UnknownErrorException(r.message,r.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}u._capability.reject(g)}),o.on("PasswordRequest",r=>{if(this._passwordCapability=(0,_util.createPromiseCapability)(),u.onPassword){let g=b=>{b instanceof Error?this._passwordCapability.reject(b):this._passwordCapability.resolve({password:b})};try{u.onPassword(g,r.code)}catch(b){this._passwordCapability.reject(b)}}else this._passwordCapability.reject(new _util.PasswordException(r.message,r.code));return this._passwordCapability.promise}),o.on("DataLoaded",r=>{var g;(g=u.onProgress)==null||g.call(u,{loaded:r.length,total:r.length}),this.downloadInfoCapability.resolve(r)}),o.on("StartRenderPage",r=>{if(this.destroyed)return;ut(this,q).get(r.pageIndex)._startRenderPage(r.transparency,r.cacheKey)}),o.on("commonobj",([r,g,b])=>{var y;if(!this.destroyed&&!this.commonObjs.has(r))switch(g){case"Font":let S=this._params;if("error"in b){let _=b.error;(0,_util.warn)(`Error during font loading: ${_}`),this.commonObjs.resolve(r,_);break}let e=null;S.pdfBug&&((y=globalThis.FontInspector)==null?void 0:y.enabled)&&(e={registerFont(_,T){globalThis.FontInspector.fontAdded(_,T)}});let a=new _font_loader.FontFaceObject(b,{isEvalSupported:S.isEvalSupported,disableFontFace:S.disableFontFace,ignoreErrors:S.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:e});this.fontLoader.bind(a).catch(_=>o.sendWithPromise("FontFallback",{id:r})).finally(()=>{!S.fontExtraProperties&&a.data&&(a.data=null),this.commonObjs.resolve(r,a)});break;case"FontPath":case"Image":this.commonObjs.resolve(r,b);break;default:throw new Error(`Got unknown common object type ${g}`)}}),o.on("obj",([r,g,b,y])=>{var e;if(this.destroyed)return;let S=ut(this,q).get(g);if(!S.objs.has(r))switch(b){case"Image":S.objs.resolve(r,y);let a=8e6;if(y){let _;if(y.bitmap){let{bitmap:T,width:C,height:P}=y;_=C*P*4,S._bitmaps.add(T)}else _=((e=y.data)==null?void 0:e.length)||0;_>a&&(S.cleanupAfterRender=!0)}break;case"Pattern":S.objs.resolve(r,y);break;default:throw new Error(`Got unknown object type ${b}`)}}),o.on("DocProgress",r=>{var g;this.destroyed||(g=u.onProgress)==null||g.call(u,{loaded:r.loaded,total:r.total})}),o.on("DocStats",r=>{this.destroyed||Pt(this,K,Object.freeze({streamTypes:Object.freeze(r.streamTypes),fontTypes:Object.freeze(r.fontTypes)}))}),o.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),o.on("FetchBuiltInCMap",r=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.CMapReaderFactory?this.CMapReaderFactory.fetch(r):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),o.on("FetchStandardFontData",r=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.StandardFontDataFactory?this.StandardFontDataFactory.fetch(r):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}_onUnsupportedFeature({featureId:o}){var u,r;this.destroyed||(r=(u=this.loadingTask).onUnsupportedFeature)==null||r.call(u,o)}getData(){return this.messageHandler.sendWithPromise("GetData",null)}getPage(o){if(!Number.isInteger(o)||o<=0||o>this._numPages)return Promise.reject(new Error("Invalid page request."));let u=o-1,r=ut(this,G).get(u);if(r)return r;let g=this.messageHandler.sendWithPromise("GetPage",{pageIndex:u}).then(b=>{if(this.destroyed)throw new Error("Transport destroyed");let y=new PDFPageProxy(u,b,this,this._params.ownerDocument,this._params.pdfBug);return ut(this,q).set(u,y),y});return ut(this,G).set(u,g),g}getPageIndex(o){return typeof o!="object"||o===null||!Number.isInteger(o.num)||o.num<0||!Number.isInteger(o.gen)||o.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:o.num,gen:o.gen})}getAnnotations(o,u){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:o,intent:u})}saveDocument(){var o,u;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:(u=(o=this._fullReader)==null?void 0:o.filename)!=null?u:null}).finally(()=>{this.annotationStorage.resetModified()})}getFieldObjects(){return this._getFieldObjectsPromise||(this._getFieldObjectsPromise=this.messageHandler.sendWithPromise("GetFieldObjects",null))}hasJSActions(){return this._hasJSActionsPromise||(this._hasJSActionsPromise=this.messageHandler.sendWithPromise("HasJSActions",null))}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(o){return typeof o!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:o})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getDocJSActions(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}getPageJSActions(o){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:o})}getStructTree(o){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:o})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(o=>new _optional_content_config.OptionalContentConfig(o))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){return ut(this,U)||Pt(this,U,this.messageHandler.sendWithPromise("GetMetadata",null).then(o=>{var u,r,g,b;return{info:o[0],metadata:o[1]?new _metadata.Metadata(o[1]):null,contentDispositionFilename:(r=(u=this._fullReader)==null?void 0:u.filename)!=null?r:null,contentLength:(b=(g=this._fullReader)==null?void 0:g.contentLength)!=null?b:null}}))}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(o=!1){if(await this.messageHandler.sendWithPromise("Cleanup",null),!this.destroyed){for(let u of ut(this,q).values())if(!u.cleanup())throw new Error(`startCleanup: Page ${u.pageNumber} is currently rendering.`);this.commonObjs.clear(),o||this.fontLoader.clear(),Pt(this,U,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null}}get loadingParams(){let o=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:o.disableAutoFetch,enableXfa:o.enableXfa})}}K=new WeakMap,q=new WeakMap,G=new WeakMap,U=new WeakMap;class PDFObjects{constructor(){xt(this,m);xt(this,F,Object.create(null))}get(o,u=null){if(u){let g=It(this,m,Yt).call(this,o);return g.capability.promise.then(()=>u(g.data)),null}let r=ut(this,F)[o];if(!(r!=null&&r.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${o}.`);return r.data}has(o){let u=ut(this,F)[o];return(u==null?void 0:u.capability.settled)||!1}resolve(o,u=null){let r=It(this,m,Yt).call(this,o);r.data=u,r.capability.resolve()}clear(){Pt(this,F,Object.create(null))}}F=new WeakMap,m=new WeakSet,Yt=function(o){let u=ut(this,F)[o];return u||(ut(this,F)[o]={capability:(0,_util.createPromiseCapability)(),data:null})};class RenderTask{constructor(o){this._internalRenderTask=o,this.onContinue=null}get promise(){return this._internalRenderTask.capability.promise}cancel(){this._internalRenderTask.cancel()}}exports.RenderTask=RenderTask;let R=class{constructor({callback:o,params:u,objs:r,commonObjs:g,annotationCanvasMap:b,operatorList:y,pageIndex:S,canvasFactory:e,useRequestAnimationFrame:a=!1,pdfBug:_=!1,pageColors:T=null}){this.callback=o,this.params=u,this.objs=r,this.commonObjs=g,this.annotationCanvasMap=b,this.operatorListIdx=null,this.operatorList=y,this._pageIndex=S,this.canvasFactory=e,this._pdfBug=_,this.pageColors=T,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=a===!0&&typeof window<"u",this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=u.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:o=!1,optionalContentConfig:u}){var e;if(this.cancelled)return;if(this._canvas){if(ut(R,k).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");ut(R,k).add(this._canvas)}this._pdfBug&&((e=globalThis.StepperManager)==null?void 0:e.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());let{canvasContext:r,viewport:g,transform:b,imageLayer:y,background:S}=this.params;this.gfx=new _canvas.CanvasGraphics(r,this.commonObjs,this.objs,this.canvasFactory,y,u,this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:b,viewport:g,transparency:o,background:S}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}cancel(o=null){this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&ut(R,k).delete(this._canvas),this.callback(o||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas"))}operatorListChanged(){if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}this.stepper&&this.stepper.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&ut(R,k).delete(this._canvas),this.callback())))}},InternalRenderTask=R;k=new WeakMap,xt(InternalRenderTask,k,new WeakSet);let version="2.14.305";exports.version=version;let build="eaaa8b4ad";exports.build=build},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.StatTimer=p.RenderingCancelledException=p.PixelsPerInch=p.PageViewport=p.PDFDateString=p.DOMStandardFontDataFactory=p.DOMSVGFactory=p.DOMCanvasFactory=p.DOMCMapReaderFactory=void 0,p.deprecated=e,p.getFilenameFromUrl=r,p.getPdfFilenameFromUrl=g,p.getXfaPageViewport=T,p.isDataScheme=o,p.isPdfFile=u,p.isValidFetchUrl=y,p.loadScript=S;var c=H(6),K=H(1);let q="http://www.w3.org/2000/svg",C=class{},G=C;Bt(G,"CSS",96),Bt(G,"PDF",72),Bt(G,"PDF_TO_CSS_UNITS",C.CSS/C.PDF),p.PixelsPerInch=G;class U extends c.BaseCanvasFactory{constructor({ownerDocument:w=globalThis.document}={}){super(),this._document=w}_createCanvas(w,I){let X=this._document.createElement("canvas");return X.width=w,X.height=I,X}}p.DOMCanvasFactory=U;async function F(P,w=!1){if(y(P,document.baseURI)){let I=await fetch(P);if(!I.ok)throw new Error(I.statusText);return w?new Uint8Array(await I.arrayBuffer()):(0,K.stringToBytes)(await I.text())}return new Promise((I,X)=>{let W=new XMLHttpRequest;W.open("GET",P,!0),w&&(W.responseType="arraybuffer"),W.onreadystatechange=()=>{if(W.readyState===XMLHttpRequest.DONE){if(W.status===200||W.status===0){let z;if(w&&W.response?z=new Uint8Array(W.response):!w&&W.responseText&&(z=(0,K.stringToBytes)(W.responseText)),z){I(z);return}}X(new Error(W.statusText))}},W.send(null)})}class m extends c.BaseCMapReaderFactory{_fetchData(w,I){return F(w,this.isCompressed).then(X=>({cMapData:X,compressionType:I}))}}p.DOMCMapReaderFactory=m;class x extends c.BaseStandardFontDataFactory{_fetchData(w){return F(w,!0)}}p.DOMStandardFontDataFactory=x;class k extends c.BaseSVGFactory{_createSVG(w){return document.createElementNS(q,w)}}p.DOMSVGFactory=k;class R{constructor({viewBox:w,scale:I,rotation:X,offsetX:W=0,offsetY:z=0,dontFlip:J=!1}){this.viewBox=w,this.scale=I,this.rotation=X,this.offsetX=W,this.offsetY=z;let Z=(w[2]+w[0])/2,Y=(w[3]+w[1])/2,et,lt,st,v;switch(X%=360,X<0&&(X+=360),X){case 180:et=-1,lt=0,st=0,v=1;break;case 90:et=0,lt=1,st=1,v=0;break;case 270:et=0,lt=-1,st=-1,v=0;break;case 0:et=1,lt=0,st=0,v=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}J&&(st=-st,v=-v);let l,s,t,n;et===0?(l=Math.abs(Y-w[1])*I+W,s=Math.abs(Z-w[0])*I+z,t=Math.abs(w[3]-w[1])*I,n=Math.abs(w[2]-w[0])*I):(l=Math.abs(Z-w[0])*I+W,s=Math.abs(Y-w[1])*I+z,t=Math.abs(w[2]-w[0])*I,n=Math.abs(w[3]-w[1])*I),this.transform=[et*I,lt*I,st*I,v*I,l-et*I*Z-st*I*Y,s-lt*I*Z-v*I*Y],this.width=t,this.height=n}clone({scale:w=this.scale,rotation:I=this.rotation,offsetX:X=this.offsetX,offsetY:W=this.offsetY,dontFlip:z=!1}={}){return new R({viewBox:this.viewBox.slice(),scale:w,rotation:I,offsetX:X,offsetY:W,dontFlip:z})}convertToViewportPoint(w,I){return K.Util.applyTransform([w,I],this.transform)}convertToViewportRectangle(w){let I=K.Util.applyTransform([w[0],w[1]],this.transform),X=K.Util.applyTransform([w[2],w[3]],this.transform);return[I[0],I[1],X[0],X[1]]}convertToPdfPoint(w,I){return K.Util.applyInverseTransform([w,I],this.transform)}}p.PageViewport=R;class A extends K.BaseException{constructor(w,I){super(w,"RenderingCancelledException"),this.type=I}}p.RenderingCancelledException=A;function o(P){let w=P.length,I=0;for(;I<w&&P[I].trim()==="";)I++;return P.substring(I,I+5).toLowerCase()==="data:"}function u(P){return typeof P=="string"&&/\.pdf$/i.test(P)}function r(P){let w=P.indexOf("#"),I=P.indexOf("?"),X=Math.min(w>0?w:P.length,I>0?I:P.length);return P.substring(P.lastIndexOf("/",X)+1,X)}function g(P,w="document.pdf"){if(typeof P!="string")return w;if(o(P))return(0,K.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),w;let I=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,X=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,W=I.exec(P),z=X.exec(W[1])||X.exec(W[2])||X.exec(W[3]);if(z&&(z=z[0],z.includes("%")))try{z=X.exec(decodeURIComponent(z))[0]}catch(J){}return z||w}class b{constructor(){this.started=Object.create(null),this.times=[]}time(w){w in this.started&&(0,K.warn)(`Timer is already running for ${w}`),this.started[w]=Date.now()}timeEnd(w){w in this.started||(0,K.warn)(`Timer has not been started for ${w}`),this.times.push({name:w,start:this.started[w],end:Date.now()}),delete this.started[w]}toString(){let w=[],I=0;for(let X of this.times){let W=X.name;W.length>I&&(I=W.length)}for(let X of this.times){let W=X.end-X.start;w.push(`${X.name.padEnd(I)} ${W}ms
`)}return w.join("")}}p.StatTimer=b;function y(P,w){try{let{protocol:I}=w?new URL(P,w):new URL(P);return I==="http:"||I==="https:"}catch(I){return!1}}function S(P,w=!1){return new Promise((I,X)=>{let W=document.createElement("script");W.src=P,W.onload=function(z){w&&W.remove(),I(z)},W.onerror=function(){X(new Error(`Cannot load script at: ${W.src}`))},(document.head||document.documentElement).appendChild(W)})}function e(P){console.log("Deprecated API usage: "+P)}let a;class _{static toDateObject(w){if(!w||typeof w!="string")return null;a||(a=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));let I=a.exec(w);if(!I)return null;let X=parseInt(I[1],10),W=parseInt(I[2],10);W=W>=1&&W<=12?W-1:0;let z=parseInt(I[3],10);z=z>=1&&z<=31?z:1;let J=parseInt(I[4],10);J=J>=0&&J<=23?J:0;let Z=parseInt(I[5],10);Z=Z>=0&&Z<=59?Z:0;let Y=parseInt(I[6],10);Y=Y>=0&&Y<=59?Y:0;let et=I[7]||"Z",lt=parseInt(I[8],10);lt=lt>=0&&lt<=23?lt:0;let st=parseInt(I[9],10)||0;return st=st>=0&&st<=59?st:0,et==="-"?(J+=lt,Z+=st):et==="+"&&(J-=lt,Z-=st),new Date(Date.UTC(X,W,z,J,Z,Y))}}p.PDFDateString=_;function T(P,{scale:w=1,rotation:I=0}){let{width:X,height:W}=P.attributes.style,z=[0,0,parseInt(X),parseInt(W)];return new R({viewBox:z,scale:w,rotation:I})}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.BaseStandardFontDataFactory=p.BaseSVGFactory=p.BaseCanvasFactory=p.BaseCMapReaderFactory=void 0;var c=H(1);class K{constructor(){this.constructor===K&&(0,c.unreachable)("Cannot initialize BaseCanvasFactory.")}create(m,x){if(m<=0||x<=0)throw new Error("Invalid canvas size");let k=this._createCanvas(m,x);return{canvas:k,context:k.getContext("2d")}}reset(m,x,k){if(!m.canvas)throw new Error("Canvas is not specified");if(x<=0||k<=0)throw new Error("Invalid canvas size");m.canvas.width=x,m.canvas.height=k}destroy(m){if(!m.canvas)throw new Error("Canvas is not specified");m.canvas.width=0,m.canvas.height=0,m.canvas=null,m.context=null}_createCanvas(m,x){(0,c.unreachable)("Abstract method `_createCanvas` called.")}}p.BaseCanvasFactory=K;class q{constructor({baseUrl:m=null,isCompressed:x=!1}){this.constructor===q&&(0,c.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=m,this.isCompressed=x}async fetch({name:m}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!m)throw new Error("CMap name must be specified.");let x=this.baseUrl+m+(this.isCompressed?".bcmap":""),k=this.isCompressed?c.CMapCompressionType.BINARY:c.CMapCompressionType.NONE;return this._fetchData(x,k).catch(R=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${x}`)})}_fetchData(m,x){(0,c.unreachable)("Abstract method `_fetchData` called.")}}p.BaseCMapReaderFactory=q;class G{constructor({baseUrl:m=null}){this.constructor===G&&(0,c.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=m}async fetch({filename:m}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!m)throw new Error("Font filename must be specified.");let x=`${this.baseUrl}${m}`;return this._fetchData(x).catch(k=>{throw new Error(`Unable to load font data at: ${x}`)})}_fetchData(m){(0,c.unreachable)("Abstract method `_fetchData` called.")}}p.BaseStandardFontDataFactory=G;class U{constructor(){this.constructor===U&&(0,c.unreachable)("Cannot initialize BaseSVGFactory.")}create(m,x){if(m<=0||x<=0)throw new Error("Invalid SVG dimensions");let k=this._createSVG("svg:svg");return k.setAttribute("version","1.1"),k.setAttribute("width",`${m}px`),k.setAttribute("height",`${x}px`),k.setAttribute("preserveAspectRatio","none"),k.setAttribute("viewBox",`0 0 ${m} ${x}`),k}createElement(m){if(typeof m!="string")throw new Error("Invalid SVG element type");return this._createSVG(m)}_createSVG(m){(0,c.unreachable)("Abstract method `_createSVG` called.")}}p.BaseSVGFactory=U},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.FontLoader=p.FontFaceObject=void 0;var c=H(1);class K{constructor({docId:F,onUnsupportedFeature:m,ownerDocument:x=globalThis.document,styleElement:k=null}){this.constructor===K&&(0,c.unreachable)("Cannot initialize BaseFontLoader."),this.docId=F,this._onUnsupportedFeature=m,this._document=x,this.nativeFontFaces=[],this.styleElement=null}addNativeFontFace(F){this.nativeFontFaces.push(F),this._document.fonts.add(F)}insertRule(F){let m=this.styleElement;m||(m=this.styleElement=this._document.createElement("style"),m.id=`PDFJS_FONT_STYLE_TAG_${this.docId}`,this._document.documentElement.getElementsByTagName("head")[0].appendChild(m));let x=m.sheet;x.insertRule(F,x.cssRules.length)}clear(){for(let F of this.nativeFontFaces)this._document.fonts.delete(F);this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(F){if(F.attached||F.missingFile)return;if(F.attached=!0,this.isFontLoadingAPISupported){let x=F.createNativeFontFace();if(x){this.addNativeFontFace(x);try{await x.loaded}catch(k){throw this._onUnsupportedFeature({featureId:c.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,c.warn)(`Failed to load font '${x.family}': '${k}'.`),F.disableFontFace=!0,k}}return}let m=F.createFontFaceRule();if(m){if(this.insertRule(m),this.isSyncFontLoadingSupported)return;await new Promise(x=>{let k=this._queueLoadingCallback(x);this._prepareFontLoadEvent([m],[F],k)})}}_queueLoadingCallback(F){(0,c.unreachable)("Abstract method `_queueLoadingCallback`.")}get isFontLoadingAPISupported(){var m;let F=!!((m=this._document)!=null&&m.fonts);return(0,c.shadow)(this,"isFontLoadingAPISupported",F)}get isSyncFontLoadingSupported(){(0,c.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}get _loadTestFont(){(0,c.unreachable)("Abstract method `_loadTestFont`.")}_prepareFontLoadEvent(F,m,x){(0,c.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}let q;p.FontLoader=q,p.FontLoader=q=class extends K{constructor(F){super(F),this.loadingContext={requests:[],nextRequestId:0},this.loadTestFontId=0}get isSyncFontLoadingSupported(){let F=!1;if(typeof navigator>"u")F=!0;else{let m=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);(m==null?void 0:m[1])>=14&&(F=!0)}return(0,c.shadow)(this,"isSyncFontLoadingSupported",F)}_queueLoadingCallback(F){function m(){for((0,c.assert)(!k.done,"completeRequest() cannot be called twice."),k.done=!0;x.requests.length>0&&x.requests[0].done;){let R=x.requests.shift();setTimeout(R.callback,0)}}let x=this.loadingContext,k={id:`pdfjs-font-loading-${x.nextRequestId++}`,done:!1,complete:m,callback:F};return x.requests.push(k),k}get _loadTestFont(){let F=function(){return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==")};return(0,c.shadow)(this,"_loadTestFont",F())}_prepareFontLoadEvent(F,m,x){function k(X,W){return X.charCodeAt(W)<<24|X.charCodeAt(W+1)<<16|X.charCodeAt(W+2)<<8|X.charCodeAt(W+3)&255}function R(X,W,z,J){let Z=X.substring(0,W),Y=X.substring(W+z);return Z+J+Y}let A,o,u=this._document.createElement("canvas");u.width=1,u.height=1;let r=u.getContext("2d"),g=0;function b(X,W){if(g++,g>30){(0,c.warn)("Load test font never loaded."),W();return}if(r.font="30px "+X,r.fillText(".",0,20),r.getImageData(0,0,1,1).data[3]>0){W();return}setTimeout(b.bind(null,X,W))}let y=`lt${Date.now()}${this.loadTestFontId++}`,S=this._loadTestFont;S=R(S,976,y.length,y);let a=16,_=1482184792,T=k(S,a);for(A=0,o=y.length-3;A<o;A+=4)T=T-_+k(y,A)|0;A<y.length&&(T=T-_+k(y+"XXX",A)|0),S=R(S,a,4,(0,c.string32)(T));let C=`url(data:font/opentype;base64,${btoa(S)});`,P=`@font-face {font-family:"${y}";src:${C}}`;this.insertRule(P);let w=[];for(let X of m)w.push(X.loadedName);w.push(y);let I=this._document.createElement("div");I.style.visibility="hidden",I.style.width=I.style.height="10px",I.style.position="absolute",I.style.top=I.style.left="0px";for(let X of w){let W=this._document.createElement("span");W.textContent="Hi",W.style.fontFamily=X,I.appendChild(W)}this._document.body.appendChild(I),b(y,()=>{I.remove(),x.complete()})}};class G{constructor(F,{isEvalSupported:m=!0,disableFontFace:x=!1,ignoreErrors:k=!1,onUnsupportedFeature:R,fontRegistry:A=null}){this.compiledGlyphs=Object.create(null);for(let o in F)this[o]=F[o];this.isEvalSupported=m!==!1,this.disableFontFace=x===!0,this.ignoreErrors=k===!0,this._onUnsupportedFeature=R,this.fontRegistry=A}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let F;if(!this.cssFontInfo)F=new FontFace(this.loadedName,this.data,{});else{let m={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(m.style=`oblique ${this.cssFontInfo.italicAngle}deg`),F=new FontFace(this.cssFontInfo.fontFamily,this.data,m)}return this.fontRegistry&&this.fontRegistry.registerFont(this),F}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;let F=(0,c.bytesToString)(this.data),m=`url(data:${this.mimetype};base64,${btoa(F)});`,x;if(!this.cssFontInfo)x=`@font-face {font-family:"${this.loadedName}";src:${m}}`;else{let k=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(k+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),x=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${k}src:${m}}`}return this.fontRegistry&&this.fontRegistry.registerFont(this,m),x}getPathGenerator(F,m){if(this.compiledGlyphs[m]!==void 0)return this.compiledGlyphs[m];let x;try{x=F.get(this.loadedName+"_path_"+m)}catch(k){if(!this.ignoreErrors)throw k;return this._onUnsupportedFeature({featureId:c.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,c.warn)(`getPathGenerator - ignoring character: "${k}".`),this.compiledGlyphs[m]=function(R,A){}}if(this.isEvalSupported&&c.FeatureTest.isEvalSupported){let k=[];for(let R of x){let A=R.args!==void 0?R.args.join(","):"";k.push("c.",R.cmd,"(",A,`);
`)}return this.compiledGlyphs[m]=new Function("c","size",k.join(""))}return this.compiledGlyphs[m]=function(k,R){for(let A of x)A.cmd==="scale"&&(A.args=[R,-R]),k[A.cmd].apply(k,A.args)}}}p.FontFaceObject=G},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.AnnotationStorage=void 0;var c=H(9),K=H(1);class q{constructor(){this._storage=new Map,this._modified=!1,this.onSetModified=null,this.onResetModified=null}getValue(U,F){let m=this._storage.get(U);return m===void 0?F:Object.assign(F,m)}getRawValue(U){return this._storage.get(U)}setValue(U,F){let m=this._storage.get(U),x=!1;if(m!==void 0)for(let[k,R]of Object.entries(F))m[k]!==R&&(x=!0,m[k]=R);else x=!0,this._storage.set(U,F);x&&this._setModified()}getAll(){return this._storage.size>0?(0,K.objectFromMap)(this._storage):null}get size(){return this._storage.size}_setModified(){this._modified||(this._modified=!0,typeof this.onSetModified=="function"&&this.onSetModified())}resetModified(){this._modified&&(this._modified=!1,typeof this.onResetModified=="function"&&this.onResetModified())}get serializable(){return this._storage.size>0?this._storage:null}get hash(){let U=new c.MurmurHash3_64;for(let[F,m]of this._storage)U.update(`${F}:${JSON.stringify(m)}`);return U.hexdigest()}}p.AnnotationStorage=q},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.MurmurHash3_64=void 0;var c=H(1);let K=3285377520,q=4294901760,G=65535;class U{constructor(m){this.h1=m?m&4294967295:K,this.h2=m?m&4294967295:K}update(m){let x,k;if(typeof m=="string"){x=new Uint8Array(m.length*2),k=0;for(let _=0,T=m.length;_<T;_++){let C=m.charCodeAt(_);C<=255?x[k++]=C:(x[k++]=C>>>8,x[k++]=C&255)}}else if((0,c.isArrayBuffer)(m))x=m.slice(),k=x.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");let R=k>>2,A=k-R*4,o=new Uint32Array(x.buffer,0,R),u=0,r=0,g=this.h1,b=this.h2,y=3432918353,S=461845907,e=y&G,a=S&G;for(let _=0;_<R;_++)_&1?(u=o[_],u=u*y&q|u*e&G,u=u<<15|u>>>17,u=u*S&q|u*a&G,g^=u,g=g<<13|g>>>19,g=g*5+3864292196):(r=o[_],r=r*y&q|r*e&G,r=r<<15|r>>>17,r=r*S&q|r*a&G,b^=r,b=b<<13|b>>>19,b=b*5+3864292196);switch(u=0,A){case 3:u^=x[R*4+2]<<16;case 2:u^=x[R*4+1]<<8;case 1:u^=x[R*4],u=u*y&q|u*e&G,u=u<<15|u>>>17,u=u*S&q|u*a&G,R&1?g^=u:b^=u}this.h1=g,this.h2=b}hexdigest(){let m=this.h1,x=this.h2;m^=x>>>1,m=m*3981806797&q|m*36045&G,x=x*4283543511&q|((x<<16|m>>>16)*2950163797&q)>>>16,m^=x>>>1,m=m*444984403&q|m*60499&G,x=x*3301882366&q|((x<<16|m>>>16)*3120437893&q)>>>16,m^=x>>>1;let k=(m>>>0).toString(16),R=(x>>>0).toString(16);return k.padStart(8,"0")+R.padStart(8,"0")}}p.MurmurHash3_64=U},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.CanvasGraphics=void 0;var c=H(1),K=H(11),q=H(12),G=H(3),U=H(5);let F=16,m=100,x=4096,k=15,R=10,A=!0,o=1e3,u=16,r=1.000001;function g(v,l){if(v._removeMirroring)throw new Error("Context is already forwarding operations.");v.__originalSave=v.save,v.__originalRestore=v.restore,v.__originalRotate=v.rotate,v.__originalScale=v.scale,v.__originalTranslate=v.translate,v.__originalTransform=v.transform,v.__originalSetTransform=v.setTransform,v.__originalResetTransform=v.resetTransform,v.__originalClip=v.clip,v.__originalMoveTo=v.moveTo,v.__originalLineTo=v.lineTo,v.__originalBezierCurveTo=v.bezierCurveTo,v.__originalRect=v.rect,v.__originalClosePath=v.closePath,v.__originalBeginPath=v.beginPath,v._removeMirroring=()=>{v.save=v.__originalSave,v.restore=v.__originalRestore,v.rotate=v.__originalRotate,v.scale=v.__originalScale,v.translate=v.__originalTranslate,v.transform=v.__originalTransform,v.setTransform=v.__originalSetTransform,v.resetTransform=v.__originalResetTransform,v.clip=v.__originalClip,v.moveTo=v.__originalMoveTo,v.lineTo=v.__originalLineTo,v.bezierCurveTo=v.__originalBezierCurveTo,v.rect=v.__originalRect,v.closePath=v.__originalClosePath,v.beginPath=v.__originalBeginPath,delete v._removeMirroring},v.save=function(){l.save(),this.__originalSave()},v.restore=function(){l.restore(),this.__originalRestore()},v.translate=function(t,n){l.translate(t,n),this.__originalTranslate(t,n)},v.scale=function(t,n){l.scale(t,n),this.__originalScale(t,n)},v.transform=function(t,n,i,d,h,f){l.transform(t,n,i,d,h,f),this.__originalTransform(t,n,i,d,h,f)},v.setTransform=function(t,n,i,d,h,f){l.setTransform(t,n,i,d,h,f),this.__originalSetTransform(t,n,i,d,h,f)},v.resetTransform=function(){l.resetTransform(),this.__originalResetTransform()},v.rotate=function(t){l.rotate(t),this.__originalRotate(t)},v.clip=function(t){l.clip(t),this.__originalClip(t)},v.moveTo=function(s,t){l.moveTo(s,t),this.__originalMoveTo(s,t)},v.lineTo=function(s,t){l.lineTo(s,t),this.__originalLineTo(s,t)},v.bezierCurveTo=function(s,t,n,i,d,h){l.bezierCurveTo(s,t,n,i,d,h),this.__originalBezierCurveTo(s,t,n,i,d,h)},v.rect=function(s,t,n,i){l.rect(s,t,n,i),this.__originalRect(s,t,n,i)},v.closePath=function(){l.closePath(),this.__originalClosePath()},v.beginPath=function(){l.beginPath(),this.__originalBeginPath()}}function b(v){if(v._transformStack&&(v._transformStack=[]),!v.mozCurrentTransform){v._originalSave=v.save,v._originalRestore=v.restore,v._originalRotate=v.rotate,v._originalScale=v.scale,v._originalTranslate=v.translate,v._originalTransform=v.transform,v._originalSetTransform=v.setTransform,v._originalResetTransform=v.resetTransform,v._transformMatrix=v._transformMatrix||[1,0,0,1,0,0],v._transformStack=[];try{let l=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(v),"lineWidth");v._setLineWidth=l.set,v._getLineWidth=l.get,Object.defineProperty(v,"lineWidth",{set:function(t){this._setLineWidth(t*r)},get:function(){return this._getLineWidth()}})}catch(l){}Object.defineProperty(v,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(v,"mozCurrentTransformInverse",{get:function(){let[s,t,n,i,d,h]=this._transformMatrix,f=s*i-t*n,E=t*n-s*i;return[i/f,t/E,n/E,s/f,(i*d-n*h)/E,(t*d-s*h)/f]}}),v.save=function(){let s=this._transformMatrix;this._transformStack.push(s),this._transformMatrix=s.slice(0,6),this._originalSave()},v.restore=function(){this._transformStack.length===0&&(0,c.warn)("Tried to restore a ctx when the stack was already empty.");let s=this._transformStack.pop();s&&(this._transformMatrix=s,this._originalRestore())},v.translate=function(s,t){let n=this._transformMatrix;n[4]=n[0]*s+n[2]*t+n[4],n[5]=n[1]*s+n[3]*t+n[5],this._originalTranslate(s,t)},v.scale=function(s,t){let n=this._transformMatrix;n[0]*=s,n[1]*=s,n[2]*=t,n[3]*=t,this._originalScale(s,t)},v.transform=function(s,t,n,i,d,h){let f=this._transformMatrix;this._transformMatrix=[f[0]*s+f[2]*t,f[1]*s+f[3]*t,f[0]*n+f[2]*i,f[1]*n+f[3]*i,f[0]*d+f[2]*h+f[4],f[1]*d+f[3]*h+f[5]],v._originalTransform(s,t,n,i,d,h)},v.setTransform=function(s,t,n,i,d,h){this._transformMatrix=[s,t,n,i,d,h],v._originalSetTransform(s,t,n,i,d,h)},v.resetTransform=function(){this._transformMatrix=[1,0,0,1,0,0],v._originalResetTransform()},v.rotate=function(s){let t=Math.cos(s),n=Math.sin(s),i=this._transformMatrix;this._transformMatrix=[i[0]*t+i[2]*n,i[1]*t+i[3]*n,i[0]*-n+i[2]*t,i[1]*-n+i[3]*t,i[4],i[5]],this._originalRotate(s)}}}class y{constructor(l){this.canvasFactory=l,this.cache=Object.create(null)}getCanvas(l,s,t,n){let i;return this.cache[l]!==void 0?(i=this.cache[l],this.canvasFactory.reset(i,s,t),i.context.setTransform(1,0,0,1,0,0)):(i=this.canvasFactory.create(s,t),this.cache[l]=i),n&&b(i.context),i}delete(l){delete this.cache[l]}clear(){for(let l in this.cache){let s=this.cache[l];this.canvasFactory.destroy(s),delete this.cache[l]}}}function S(v,l,s,t,n,i,d,h,f,E){let[D,M,L,j,B,Q]=v.mozCurrentTransform;if(M===0&&L===0){let ot=d*D+B,tt=Math.round(ot),ht=h*j+Q,ct=Math.round(ht),it=(d+f)*D+B,bt=Math.abs(Math.round(it)-tt)||1,_t=(h+E)*j+Q,ft=Math.abs(Math.round(_t)-ct)||1;return v.setTransform(Math.sign(D),0,0,Math.sign(j),tt,ct),v.drawImage(l,s,t,n,i,0,0,bt,ft),v.setTransform(D,M,L,j,B,Q),[bt,ft]}if(D===0&&j===0){let ot=h*L+B,tt=Math.round(ot),ht=d*M+Q,ct=Math.round(ht),it=(h+E)*L+B,bt=Math.abs(Math.round(it)-tt)||1,_t=(d+f)*M+Q,ft=Math.abs(Math.round(_t)-ct)||1;return v.setTransform(0,Math.sign(M),Math.sign(L),0,tt,ct),v.drawImage(l,s,t,n,i,0,0,ft,bt),v.setTransform(D,M,L,j,B,Q),[ft,bt]}v.drawImage(l,s,t,n,i,d,h,f,E);let nt=Math.hypot(D,M),rt=Math.hypot(L,j);return[nt*f,rt*E]}function e(v){let{width:l,height:s}=v;if(!A||l>o||s>o)return null;let t=1e3,n=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),i=l+1,d=new Uint8Array(i*(s+1)),h,f,E,D=l+7&-8,M=new Uint8Array(D*s),L=0;for(let tt of v.data){let ht=128;for(;ht>0;)M[L++]=tt&ht?0:255,ht>>=1}let j=0;for(L=0,M[L]!==0&&(d[0]=1,++j),f=1;f<l;f++)M[L]!==M[L+1]&&(d[f]=M[L]?2:1,++j),L++;for(M[L]!==0&&(d[f]=2,++j),h=1;h<s;h++){L=h*D,E=h*i,M[L-D]!==M[L]&&(d[E]=M[L]?1:8,++j);let tt=(M[L]?4:0)+(M[L-D]?8:0);for(f=1;f<l;f++)tt=(tt>>2)+(M[L+1]?4:0)+(M[L-D+1]?8:0),n[tt]&&(d[E+f]=n[tt],++j),L++;if(M[L-D]!==M[L]&&(d[E+f]=M[L]?2:4,++j),j>t)return null}for(L=D*(s-1),E=h*i,M[L]!==0&&(d[E]=8,++j),f=1;f<l;f++)M[L]!==M[L+1]&&(d[E+f]=M[L]?4:8,++j),L++;if(M[L]!==0&&(d[E+f]=4,++j),j>t)return null;let B=new Int32Array([0,i,-1,0,-i,0,0,0,1]),Q,nt,rt;for(G.isNodeJS?nt=[]:Q=new Path2D,h=0;j&&h<=s;h++){let tt=h*i,ht=tt+l;for(;tt<ht&&!d[tt];)tt++;if(tt===ht)continue;Q?Q.moveTo(tt%i,h):rt=[tt%i,h];let ct=tt,it=d[tt];do{let bt=B[it];do tt+=bt;while(!d[tt]);let _t=d[tt];_t!==5&&_t!==10?(it=_t,d[tt]=0):(it=_t&51*it>>4,d[tt]&=it>>2|it<<2),Q?Q.lineTo(tt%i,tt/i|0):rt.push(tt%i,tt/i|0),d[tt]||--j}while(ct!==tt);Q||nt.push(rt),--h}return M=null,d=null,function(tt){if(tt.save(),tt.scale(1/l,-1/s),tt.translate(0,-s),Q)tt.fill(Q);else{tt.beginPath();for(let ht of nt){tt.moveTo(ht[0],ht[1]);for(let ct=2,it=ht.length;ct<it;ct+=2)tt.lineTo(ht[ct],ht[ct+1])}tt.fill()}tt.beginPath(),tt.restore()}}class a{constructor(l,s){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=c.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=c.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=c.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps=null,this.startNewPathAndClipBox([0,0,l,s])}clone(){let l=Object.create(this);return l.clipBox=this.clipBox.slice(),l}setCurrentPoint(l,s){this.x=l,this.y=s}updatePathMinMax(l,s,t){[s,t]=c.Util.applyTransform([s,t],l),this.minX=Math.min(this.minX,s),this.minY=Math.min(this.minY,t),this.maxX=Math.max(this.maxX,s),this.maxY=Math.max(this.maxY,t)}updateRectMinMax(l,s){let t=c.Util.applyTransform(s,l),n=c.Util.applyTransform(s.slice(2),l);this.minX=Math.min(this.minX,t[0],n[0]),this.minY=Math.min(this.minY,t[1],n[1]),this.maxX=Math.max(this.maxX,t[0],n[0]),this.maxY=Math.max(this.maxY,t[1],n[1])}updateScalingPathMinMax(l,s){c.Util.scaleMinMax(l,s),this.minX=Math.min(this.minX,s[0]),this.maxX=Math.max(this.maxX,s[1]),this.minY=Math.min(this.minY,s[2]),this.maxY=Math.max(this.maxY,s[3])}updateCurvePathMinMax(l,s,t,n,i,d,h,f,E,D){let M=c.Util.bezierBoundingBox(s,t,n,i,d,h,f,E);if(D){D[0]=Math.min(D[0],M[0],M[2]),D[1]=Math.max(D[1],M[0],M[2]),D[2]=Math.min(D[2],M[1],M[3]),D[3]=Math.max(D[3],M[1],M[3]);return}this.updateRectMinMax(l,M)}getPathBoundingBox(l=K.PathType.FILL,s=null){let t=[this.minX,this.minY,this.maxX,this.maxY];if(l===K.PathType.STROKE){s||(0,c.unreachable)("Stroke bounding box must include transform.");let n=c.Util.singularValueDecompose2dScale(s),i=n[0]*this.lineWidth/2,d=n[1]*this.lineWidth/2;t[0]-=i,t[1]-=d,t[2]+=i,t[3]+=d}return t}updateClipFromPath(){let l=c.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(l||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(l){this.clipBox=l,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(l=K.PathType.FILL,s=null){return c.Util.intersect(this.clipBox,this.getPathBoundingBox(l,s))}}function _(v,l,s=null){if(typeof ImageData<"u"&&l instanceof ImageData){v.putImageData(l,0,0);return}let t=l.height,n=l.width,i=t%u,d=(t-i)/u,h=i===0?d:d+1,f=v.createImageData(n,u),E=0,D,M=l.data,L=f.data,j,B,Q,nt,rt,ot,tt,ht;if(s)switch(s.length){case 1:rt=s[0],ot=s[0],tt=s[0],ht=s[0];break;case 4:rt=s[0],ot=s[1],tt=s[2],ht=s[3];break}if(l.kind===c.ImageKind.GRAYSCALE_1BPP){let ct=M.byteLength,it=new Uint32Array(L.buffer,0,L.byteLength>>2),bt=it.length,_t=n+7>>3,ft=4294967295,mt=c.FeatureTest.isLittleEndian?4278190080:255;for(ht&&ht[0]===255&&ht[255]===0&&([ft,mt]=[mt,ft]),j=0;j<h;j++){for(Q=j<d?u:i,D=0,B=0;B<Q;B++){let St=ct-E,Tt=0,yt=St>_t?n:St*8-7,Et=yt&-8,V=0,O=0;for(;Tt<Et;Tt+=8)O=M[E++],it[D++]=O&128?ft:mt,it[D++]=O&64?ft:mt,it[D++]=O&32?ft:mt,it[D++]=O&16?ft:mt,it[D++]=O&8?ft:mt,it[D++]=O&4?ft:mt,it[D++]=O&2?ft:mt,it[D++]=O&1?ft:mt;for(;Tt<yt;Tt++)V===0&&(O=M[E++],V=128),it[D++]=O&V?ft:mt,V>>=1}for(;D<bt;)it[D++]=0;v.putImageData(f,0,j*u)}}else if(l.kind===c.ImageKind.RGBA_32BPP){let ct=!!(rt||ot||tt);for(B=0,nt=n*u*4,j=0;j<d;j++){if(L.set(M.subarray(E,E+nt)),E+=nt,ct)for(let it=0;it<nt;it+=4)rt&&(L[it+0]=rt[L[it+0]]),ot&&(L[it+1]=ot[L[it+1]]),tt&&(L[it+2]=tt[L[it+2]]);v.putImageData(f,0,B),B+=u}if(j<h){if(nt=n*i*4,L.set(M.subarray(E,E+nt)),ct)for(let it=0;it<nt;it+=4)rt&&(L[it+0]=rt[L[it+0]]),ot&&(L[it+1]=ot[L[it+1]]),tt&&(L[it+2]=tt[L[it+2]]);v.putImageData(f,0,B)}}else if(l.kind===c.ImageKind.RGB_24BPP){let ct=!!(rt||ot||tt);for(Q=u,nt=n*Q,j=0;j<h;j++){for(j>=d&&(Q=i,nt=n*Q),D=0,B=nt;B--;)L[D++]=M[E++],L[D++]=M[E++],L[D++]=M[E++],L[D++]=255;if(ct)for(let it=0;it<D;it+=4)rt&&(L[it+0]=rt[L[it+0]]),ot&&(L[it+1]=ot[L[it+1]]),tt&&(L[it+2]=tt[L[it+2]]);v.putImageData(f,0,j*u)}}else throw new Error(`bad image kind: ${l.kind}`)}function T(v,l){if(l.bitmap){v.drawImage(l.bitmap,0,0);return}let s=l.height,t=l.width,n=s%u,i=(s-n)/u,d=n===0?i:i+1,h=v.createImageData(t,u),f=0,E=l.data,D=h.data;for(let M=0;M<d;M++){let L=M<i?u:n;({srcPos:f}=(0,q.applyMaskImageData)({src:E,srcPos:f,dest:D,width:t,height:L})),v.putImageData(h,0,M*u)}}function C(v,l){let s=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"];for(let t=0,n=s.length;t<n;t++){let i=s[t];v[i]!==void 0&&(l[i]=v[i])}v.setLineDash!==void 0&&(l.setLineDash(v.getLineDash()),l.lineDashOffset=v.lineDashOffset)}function P(v,l){v.strokeStyle=v.fillStyle=l||"#000000",v.fillRule="nonzero",v.globalAlpha=1,v.lineWidth=1,v.lineCap="butt",v.lineJoin="miter",v.miterLimit=10,v.globalCompositeOperation="source-over",v.font="10px sans-serif",v.setLineDash!==void 0&&(v.setLineDash([]),v.lineDashOffset=0)}function w(v,l,s,t){let n=v.length;for(let i=3;i<n;i+=4){let d=v[i];if(d===0)v[i-3]=l,v[i-2]=s,v[i-1]=t;else if(d<255){let h=255-d;v[i-3]=v[i-3]*d+l*h>>8,v[i-2]=v[i-2]*d+s*h>>8,v[i-1]=v[i-1]*d+t*h>>8}}}function I(v,l,s){let t=v.length,n=1/255;for(let i=3;i<t;i+=4){let d=s?s[v[i]]:v[i];l[i]=l[i]*d*n|0}}function X(v,l,s){let t=v.length;for(let n=3;n<t;n+=4){let i=v[n-3]*77+v[n-2]*152+v[n-1]*28;l[n]=s?l[n]*s[i>>8]>>8:l[n]*i>>16}}function W(v,l,s,t,n,i,d,h,f,E,D){let M=!!i,L=M?i[0]:0,j=M?i[1]:0,B=M?i[2]:0,Q;n==="Luminosity"?Q=X:Q=I;let rt=Math.min(t,Math.ceil(1048576/s));for(let ot=0;ot<t;ot+=rt){let tt=Math.min(rt,t-ot),ht=v.getImageData(h-E,ot+(f-D),s,tt),ct=l.getImageData(h,ot+f,s,tt);M&&w(ht.data,L,j,B),Q(ht.data,ct.data,d),l.putImageData(ct,h,ot+f)}}function z(v,l,s,t){let n=t[0],i=t[1],d=t[2]-n,h=t[3]-i;d===0||h===0||(W(l.context,s,d,h,l.subtype,l.backdrop,l.transferMap,n,i,l.offsetX,l.offsetY),v.save(),v.globalAlpha=1,v.globalCompositeOperation="source-over",v.setTransform(1,0,0,1,0,0),v.drawImage(s.canvas,0,0),v.restore())}function J(v,l){let s=c.Util.singularValueDecompose2dScale(v);s[0]=Math.fround(s[0]),s[1]=Math.fround(s[1]);let t=Math.fround((globalThis.devicePixelRatio||1)*U.PixelsPerInch.PDF_TO_CSS_UNITS);return l!==void 0?l:s[0]<=t||s[1]<=t}let Z=["butt","round","square"],Y=["miter","round","bevel"],et={},lt={};class st{constructor(l,s,t,n,i,d,h,f){this.ctx=l,this.current=new a(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=s,this.objs=t,this.canvasFactory=n,this.imageLayer=i,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=[],this.optionalContentConfig=d,this.cachedCanvases=new y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=h,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.backgroundColor=(f==null?void 0:f.background)||null,this.foregroundColor=(f==null?void 0:f.foreground)||null,l&&b(l),this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(l,s=null){return typeof l=="string"?l.startsWith("g_")?this.commonObjs.get(l):this.objs.get(l):s}beginDrawing({transform:l,viewport:s,transparency:t=!1,background:n=null}){let i=this.ctx.canvas.width,d=this.ctx.canvas.height,h=n||"#ffffff";if(this.ctx.save(),this.foregroundColor&&this.backgroundColor){this.ctx.fillStyle=this.foregroundColor;let f=this.foregroundColor=this.ctx.fillStyle;this.ctx.fillStyle=this.backgroundColor;let E=this.backgroundColor=this.ctx.fillStyle,D=!0,M=h;if(this.ctx.fillStyle=h,M=this.ctx.fillStyle,D=typeof M=="string"&&/^#[0-9A-Fa-f]{6}$/.test(M),f==="#000000"&&E==="#ffffff"||f===E||!D)this.foregroundColor=this.backgroundColor=null;else{let L=parseInt(M.slice(1),16),j=(L&&16711680)>>16,B=(L&&65280)>>8,Q=L&&255,nt=ot=>(ot/=255,ot<=.03928?ot/12.92:((ot+.055)/1.055)**2.4),rt=Math.round(.2126*nt(j)+.7152*nt(B)+.0722*nt(Q));this.selectColor=(ot,tt,ht)=>{let ct=.2126*nt(ot)+.7152*nt(tt)+.0722*nt(ht);return Math.round(ct)===rt?E:f}}}if(this.ctx.fillStyle=this.backgroundColor||h,this.ctx.fillRect(0,0,i,d),this.ctx.restore(),t){let f=this.cachedCanvases.getCanvas("transparent",i,d,!0);this.compositeCtx=this.ctx,this.transparentCanvas=f.canvas,this.ctx=f.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),P(this.ctx,this.foregroundColor),l&&(this.ctx.transform.apply(this.ctx,l),this.outputScaleX=l[0],this.outputScaleY=l[0]),this.ctx.transform.apply(this.ctx,s.transform),this.viewportScale=s.scale,this.baseTransform=this.ctx.mozCurrentTransform.slice(),this.imageLayer&&this.imageLayer.beginLayout()}executeOperatorList(l,s,t,n){let i=l.argsArray,d=l.fnArray,h=s||0,f=i.length;if(f===h)return h;let E=f-h>R&&typeof t=="function",D=E?Date.now()+k:0,M=0,L=this.commonObjs,j=this.objs,B;for(;;){if(n!==void 0&&h===n.nextBreakPoint)return n.breakIt(h,t),h;if(B=d[h],B!==c.OPS.dependency)this[B].apply(this,i[h]);else for(let Q of i[h]){let nt=Q.startsWith("g_")?L:j;if(!nt.has(Q))return nt.get(Q,t),h}if(h++,h===f)return h;if(E&&++M>R){if(Date.now()>D)return t(),h;M=0}}}endDrawing(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(let l of this._cachedBitmapsMap.values()){for(let s of l.values())typeof HTMLCanvasElement<"u"&&s instanceof HTMLCanvasElement&&(s.width=s.height=0);l.clear()}this._cachedBitmapsMap.clear(),this.imageLayer&&this.imageLayer.endLayout()}_scaleImage(l,s){let t=l.width,n=l.height,i=Math.max(Math.hypot(s[0],s[1]),1),d=Math.max(Math.hypot(s[2],s[3]),1),h=t,f=n,E="prescale1",D,M;for(;i>2&&h>1||d>2&&f>1;){let L=h,j=f;i>2&&h>1&&(L=Math.ceil(h/2),i/=h/L),d>2&&f>1&&(j=Math.ceil(f/2),d/=f/j),D=this.cachedCanvases.getCanvas(E,L,j,!1),M=D.context,M.clearRect(0,0,L,j),M.drawImage(l,0,0,h,f,0,0,L,j),l=D.canvas,h=L,f=j,E=E==="prescale1"?"prescale2":"prescale1"}return{img:l,paintWidth:h,paintHeight:f}}_createMaskCanvas(l){let s=this.ctx,{width:t,height:n}=l,i=this.current.fillColor,d=this.current.patternFill,h=s.mozCurrentTransform,f,E,D,M;if((l.bitmap||l.data)&&l.count>1){let bt=l.bitmap||l.data.buffer,_t=h.slice(0,4);E=JSON.stringify(d?_t:[_t,i]),f=this._cachedBitmapsMap.get(bt),f||(f=new Map,this._cachedBitmapsMap.set(bt,f));let ft=f.get(E);if(ft&&!d){let mt=Math.round(Math.min(h[0],h[2])+h[4]),St=Math.round(Math.min(h[1],h[3])+h[5]);return{canvas:ft,offsetX:mt,offsetY:St}}D=ft}D||(M=this.cachedCanvases.getCanvas("maskCanvas",t,n,!1),T(M.context,l));let L=c.Util.transform(h,[1/t,0,0,-1/n,0,0]);L=c.Util.transform(L,[1,0,0,1,0,-n]);let j=c.Util.applyTransform([0,0],L),B=c.Util.applyTransform([t,n],L),Q=c.Util.normalizeRect([j[0],j[1],B[0],B[1]]),nt=Math.round(Q[2]-Q[0])||1,rt=Math.round(Q[3]-Q[1])||1,ot=this.cachedCanvases.getCanvas("fillCanvas",nt,rt,!0),tt=ot.context,ht=Math.min(j[0],B[0]),ct=Math.min(j[1],B[1]);tt.translate(-ht,-ct),tt.transform.apply(tt,L),D||(D=this._scaleImage(M.canvas,tt.mozCurrentTransformInverse),D=D.img,f&&d&&f.set(E,D)),tt.imageSmoothingEnabled=J(tt.mozCurrentTransform,l.interpolate),S(tt,D,0,0,D.width,D.height,0,0,t,n),tt.globalCompositeOperation="source-in";let it=c.Util.transform(tt.mozCurrentTransformInverse,[1,0,0,1,-ht,-ct]);return tt.fillStyle=d?i.getPattern(s,this,it,K.PathType.FILL):i,tt.fillRect(0,0,t,n),f&&!d&&(this.cachedCanvases.delete("fillCanvas"),f.set(E,ot.canvas)),{canvas:ot.canvas,offsetX:Math.round(ht),offsetY:Math.round(ct)}}setLineWidth(l){l!==this.current.lineWidth&&(this._cachedScaleForStroking=null),this.current.lineWidth=l,this.ctx.lineWidth=l}setLineCap(l){this.ctx.lineCap=Z[l]}setLineJoin(l){this.ctx.lineJoin=Y[l]}setMiterLimit(l){this.ctx.miterLimit=l}setDash(l,s){let t=this.ctx;t.setLineDash!==void 0&&(t.setLineDash(l),t.lineDashOffset=s)}setRenderingIntent(l){}setFlatness(l){}setGState(l){for(let s=0,t=l.length;s<t;s++){let n=l[s],i=n[0],d=n[1];switch(i){case"LW":this.setLineWidth(d);break;case"LC":this.setLineCap(d);break;case"LJ":this.setLineJoin(d);break;case"ML":this.setMiterLimit(d);break;case"D":this.setDash(d[0],d[1]);break;case"RI":this.setRenderingIntent(d);break;case"FL":this.setFlatness(d);break;case"Font":this.setFont(d[0],d[1]);break;case"CA":this.current.strokeAlpha=n[1];break;case"ca":this.current.fillAlpha=n[1],this.ctx.globalAlpha=n[1];break;case"BM":this.ctx.globalCompositeOperation=d;break;case"SMask":this.current.activeSMask=d?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.current.transferMaps=d}}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){let l=this.inSMaskMode;this.current.activeSMask&&!l?this.beginSMaskMode():!this.current.activeSMask&&l&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");let l=this.ctx.canvas.width,s=this.ctx.canvas.height,t="smaskGroupAt"+this.groupLevel,n=this.cachedCanvases.getCanvas(t,l,s,!0);this.suspendedCtx=this.ctx,this.ctx=n.context;let i=this.ctx;i.setTransform.apply(i,this.suspendedCtx.mozCurrentTransform),C(this.suspendedCtx,i),g(i,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),C(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(l){if(!this.current.activeSMask)return;l?(l[0]=Math.floor(l[0]),l[1]=Math.floor(l[1]),l[2]=Math.ceil(l[2]),l[3]=Math.ceil(l[3])):l=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];let s=this.current.activeSMask,t=this.suspendedCtx;z(t,s,this.ctx,l),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(C(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();let l=this.current;this.stateStack.push(l),this.current=l.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),C(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null)}transform(l,s,t,n,i,d){this.ctx.transform(l,s,t,n,i,d),this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null}constructPath(l,s,t){let n=this.ctx,i=this.current,d=i.x,h=i.y,f,E,D=n.mozCurrentTransform,M=D[0]===0&&D[3]===0||D[1]===0&&D[2]===0,L=M?t.slice(0):null;for(let j=0,B=0,Q=l.length;j<Q;j++)switch(l[j]|0){case c.OPS.rectangle:d=s[B++],h=s[B++];let nt=s[B++],rt=s[B++],ot=d+nt,tt=h+rt;n.moveTo(d,h),nt===0||rt===0?n.lineTo(ot,tt):(n.lineTo(ot,h),n.lineTo(ot,tt),n.lineTo(d,tt)),M||i.updateRectMinMax(D,[d,h,ot,tt]),n.closePath();break;case c.OPS.moveTo:d=s[B++],h=s[B++],n.moveTo(d,h),M||i.updatePathMinMax(D,d,h);break;case c.OPS.lineTo:d=s[B++],h=s[B++],n.lineTo(d,h),M||i.updatePathMinMax(D,d,h);break;case c.OPS.curveTo:f=d,E=h,d=s[B+4],h=s[B+5],n.bezierCurveTo(s[B],s[B+1],s[B+2],s[B+3],d,h),i.updateCurvePathMinMax(D,f,E,s[B],s[B+1],s[B+2],s[B+3],d,h,L),B+=6;break;case c.OPS.curveTo2:f=d,E=h,n.bezierCurveTo(d,h,s[B],s[B+1],s[B+2],s[B+3]),i.updateCurvePathMinMax(D,f,E,d,h,s[B],s[B+1],s[B+2],s[B+3],L),d=s[B+2],h=s[B+3],B+=4;break;case c.OPS.curveTo3:f=d,E=h,d=s[B+2],h=s[B+3],n.bezierCurveTo(s[B],s[B+1],d,h,d,h),i.updateCurvePathMinMax(D,f,E,s[B],s[B+1],d,h,d,h,L),B+=4;break;case c.OPS.closePath:n.closePath();break}M&&i.updateScalingPathMinMax(D,L),i.setCurrentPoint(d,h)}closePath(){this.ctx.closePath()}stroke(l){l=typeof l<"u"?l:!0;let s=this.ctx,t=this.current.strokeColor;s.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof t=="object"&&(t==null?void 0:t.getPattern)?(s.save(),s.strokeStyle=t.getPattern(s,this,s.mozCurrentTransformInverse,K.PathType.STROKE),this.rescaleAndStroke(!1),s.restore()):this.rescaleAndStroke(!0)),l&&this.consumePath(this.current.getClippedPathBoundingBox()),s.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(l){l=typeof l<"u"?l:!0;let s=this.ctx,t=this.current.fillColor,n=this.current.patternFill,i=!1;n&&(s.save(),s.fillStyle=t.getPattern(s,this,s.mozCurrentTransformInverse,K.PathType.FILL),i=!0);let d=this.current.getClippedPathBoundingBox();this.contentVisible&&d!==null&&(this.pendingEOFill?(s.fill("evenodd"),this.pendingEOFill=!1):s.fill()),i&&s.restore(),l&&this.consumePath(d)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=et}eoClip(){this.pendingClip=lt}beginText(){this.current.textMatrix=c.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){let l=this.pendingTextPaths,s=this.ctx;if(l===void 0){s.beginPath();return}s.save(),s.beginPath();for(let t=0;t<l.length;t++){let n=l[t];s.setTransform.apply(s,n.transform),s.translate(n.x,n.y),n.addToPath(s,n.fontSize)}s.restore(),s.clip(),s.beginPath(),delete this.pendingTextPaths}setCharSpacing(l){this.current.charSpacing=l}setWordSpacing(l){this.current.wordSpacing=l}setHScale(l){this.current.textHScale=l/100}setLeading(l){this.current.leading=-l}setFont(l,s){let t=this.commonObjs.get(l),n=this.current;if(!t)throw new Error(`Can't find font for ${l}`);if(n.fontMatrix=t.fontMatrix||c.FONT_IDENTITY_MATRIX,(n.fontMatrix[0]===0||n.fontMatrix[3]===0)&&(0,c.warn)("Invalid font matrix for font "+l),s<0?(s=-s,n.fontDirection=-1):n.fontDirection=1,this.current.font=t,this.current.fontSize=s,t.isType3Font)return;let i=t.loadedName||"sans-serif",d="normal";t.black?d="900":t.bold&&(d="bold");let h=t.italic?"italic":"normal",f=`"${i}", ${t.fallbackName}`,E=s;s<F?E=F:s>m&&(E=m),this.current.fontSizeScale=s/E,this.ctx.font=`${h} ${d} ${E}px ${f}`}setTextRenderingMode(l){this.current.textRenderingMode=l}setTextRise(l){this.current.textRise=l}moveText(l,s){this.current.x=this.current.lineX+=l,this.current.y=this.current.lineY+=s}setLeadingMoveText(l,s){this.setLeading(-s),this.moveText(l,s)}setTextMatrix(l,s,t,n,i,d){this.current.textMatrix=[l,s,t,n,i,d],this.current.textMatrixScale=Math.hypot(l,s),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(l,s,t,n){let i=this.ctx,d=this.current,h=d.font,f=d.textRenderingMode,E=d.fontSize/d.fontSizeScale,D=f&c.TextRenderingMode.FILL_STROKE_MASK,M=!!(f&c.TextRenderingMode.ADD_TO_PATH_FLAG),L=d.patternFill&&!h.missingFile,j;(h.disableFontFace||M||L)&&(j=h.getPathGenerator(this.commonObjs,l)),h.disableFontFace||L?(i.save(),i.translate(s,t),i.beginPath(),j(i,E),n&&i.setTransform.apply(i,n),(D===c.TextRenderingMode.FILL||D===c.TextRenderingMode.FILL_STROKE)&&i.fill(),(D===c.TextRenderingMode.STROKE||D===c.TextRenderingMode.FILL_STROKE)&&i.stroke(),i.restore()):((D===c.TextRenderingMode.FILL||D===c.TextRenderingMode.FILL_STROKE)&&i.fillText(l,s,t),(D===c.TextRenderingMode.STROKE||D===c.TextRenderingMode.FILL_STROKE)&&i.strokeText(l,s,t)),M&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:i.mozCurrentTransform,x:s,y:t,fontSize:E,addToPath:j})}get isFontSubpixelAAEnabled(){let{context:l}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10,!1);l.scale(1.5,1),l.fillText("I",0,10);let s=l.getImageData(0,0,10,10).data,t=!1;for(let n=3;n<s.length;n+=4)if(s[n]>0&&s[n]<255){t=!0;break}return(0,c.shadow)(this,"isFontSubpixelAAEnabled",t)}showText(l){let s=this.current,t=s.font;if(t.isType3Font)return this.showType3Text(l);let n=s.fontSize;if(n===0)return;let i=this.ctx,d=s.fontSizeScale,h=s.charSpacing,f=s.wordSpacing,E=s.fontDirection,D=s.textHScale*E,M=l.length,L=t.vertical,j=L?1:-1,B=t.defaultVMetrics,Q=n*s.fontMatrix[0],nt=s.textRenderingMode===c.TextRenderingMode.FILL&&!t.disableFontFace&&!s.patternFill;i.save(),i.transform.apply(i,s.textMatrix),i.translate(s.x,s.y+s.textRise),E>0?i.scale(D,-1):i.scale(D,1);let rt;if(s.patternFill){i.save();let it=s.fillColor.getPattern(i,this,i.mozCurrentTransformInverse,K.PathType.FILL);rt=i.mozCurrentTransform,i.restore(),i.fillStyle=it}let ot=s.lineWidth,tt=s.textMatrixScale;if(tt===0||ot===0){let it=s.textRenderingMode&c.TextRenderingMode.FILL_STROKE_MASK;(it===c.TextRenderingMode.STROKE||it===c.TextRenderingMode.FILL_STROKE)&&(ot=this.getSinglePixelWidth())}else ot/=tt;d!==1&&(i.scale(d,d),ot/=d),i.lineWidth=ot;let ht=0,ct;for(ct=0;ct<M;++ct){let it=l[ct];if(typeof it=="number"){ht+=j*it*n/1e3;continue}let bt=!1,_t=(it.isSpace?f:0)+h,ft=it.fontChar,mt=it.accent,St,Tt,yt=it.width;if(L){let V=it.vmetric||B,O=-(it.vmetric?V[1]:yt*.5)*Q,N=V[2]*Q;yt=V?-V[0]:yt,St=O/d,Tt=(ht+N)/d}else St=ht/d,Tt=0;if(t.remeasure&&yt>0){let V=i.measureText(ft).width*1e3/n*d;if(yt<V&&this.isFontSubpixelAAEnabled){let O=yt/V;bt=!0,i.save(),i.scale(O,1),St/=O}else yt!==V&&(St+=(yt-V)/2e3*n/d)}if(this.contentVisible&&(it.isInFont||t.missingFile)){if(nt&&!mt)i.fillText(ft,St,Tt);else if(this.paintChar(ft,St,Tt,rt),mt){let V=St+n*mt.offset.x/d,O=Tt-n*mt.offset.y/d;this.paintChar(mt.fontChar,V,O,rt)}}let Et;L?Et=yt*Q-_t*E:Et=yt*Q+_t*E,ht+=Et,bt&&i.restore()}L?s.y-=ht:s.x+=ht*D,i.restore(),this.compose()}showType3Text(l){let s=this.ctx,t=this.current,n=t.font,i=t.fontSize,d=t.fontDirection,h=n.vertical?1:-1,f=t.charSpacing,E=t.wordSpacing,D=t.textHScale*d,M=t.fontMatrix||c.FONT_IDENTITY_MATRIX,L=l.length,j=t.textRenderingMode===c.TextRenderingMode.INVISIBLE,B,Q,nt,rt;if(!(j||i===0)){for(this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,s.save(),s.transform.apply(s,t.textMatrix),s.translate(t.x,t.y),s.scale(D,d),B=0;B<L;++B){if(Q=l[B],typeof Q=="number"){rt=h*Q*i/1e3,this.ctx.translate(rt,0),t.x+=rt*D;continue}let ot=(Q.isSpace?E:0)+f,tt=n.charProcOperatorList[Q.operatorListId];if(!tt){(0,c.warn)(`Type3 character "${Q.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=Q,this.save(),s.scale(i,i),s.transform.apply(s,M),this.executeOperatorList(tt),this.restore()),nt=c.Util.applyTransform([Q.width,0],M)[0]*i+ot,s.translate(nt,0),t.x+=nt*D}s.restore(),this.processingType3=null}}setCharWidth(l,s){}setCharWidthAndBounds(l,s,t,n,i,d){this.ctx.rect(t,n,i-t,d-n),this.ctx.clip(),this.endPath()}getColorN_Pattern(l){let s;if(l[0]==="TilingPattern"){let t=l[1],n=this.baseTransform||this.ctx.mozCurrentTransform.slice(),i={createCanvasGraphics:d=>new st(d,this.commonObjs,this.objs,this.canvasFactory)};s=new K.TilingPattern(l,t,this.ctx,i,n)}else s=this._getPattern(l[1],l[2]);return s}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(l,s,t){var i;let n=((i=this.selectColor)==null?void 0:i.call(this,l,s,t))||c.Util.makeHexColor(l,s,t);this.ctx.strokeStyle=n,this.current.strokeColor=n}setFillRGBColor(l,s,t){var i;let n=((i=this.selectColor)==null?void 0:i.call(this,l,s,t))||c.Util.makeHexColor(l,s,t);this.ctx.fillStyle=n,this.current.fillColor=n,this.current.patternFill=!1}_getPattern(l,s=null){let t;return this.cachedPatterns.has(l)?t=this.cachedPatterns.get(l):(t=(0,K.getShadingPattern)(this.objs.get(l)),this.cachedPatterns.set(l,t)),s&&(t.matrix=s),t}shadingFill(l){if(!this.contentVisible)return;let s=this.ctx;this.save();let t=this._getPattern(l);s.fillStyle=t.getPattern(s,this,s.mozCurrentTransformInverse,K.PathType.SHADING);let n=s.mozCurrentTransformInverse;if(n){let i=s.canvas,d=i.width,h=i.height,f=c.Util.applyTransform([0,0],n),E=c.Util.applyTransform([0,h],n),D=c.Util.applyTransform([d,0],n),M=c.Util.applyTransform([d,h],n),L=Math.min(f[0],E[0],D[0],M[0]),j=Math.min(f[1],E[1],D[1],M[1]),B=Math.max(f[0],E[0],D[0],M[0]),Q=Math.max(f[1],E[1],D[1],M[1]);this.ctx.fillRect(L,j,B-L,Q-j)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,c.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,c.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(l,s){if(!!this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(l)&&l.length===6&&this.transform.apply(this,l),this.baseTransform=this.ctx.mozCurrentTransform,s)){let t=s[2]-s[0],n=s[3]-s[1];this.ctx.rect(s[0],s[1],t,n),this.current.updateRectMinMax(this.ctx.mozCurrentTransform,s),this.clip(),this.endPath()}}paintFormXObjectEnd(){!this.contentVisible||(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(l){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);let s=this.ctx;l.isolated||(0,c.info)("TODO: Support non-isolated groups."),l.knockout&&(0,c.warn)("Knockout groups not supported.");let t=s.mozCurrentTransform;if(l.matrix&&s.transform.apply(s,l.matrix),!l.bbox)throw new Error("Bounding box is required.");let n=c.Util.getAxialAlignedBoundingBox(l.bbox,s.mozCurrentTransform),i=[0,0,s.canvas.width,s.canvas.height];n=c.Util.intersect(n,i)||[0,0,0,0];let d=Math.floor(n[0]),h=Math.floor(n[1]),f=Math.max(Math.ceil(n[2])-d,1),E=Math.max(Math.ceil(n[3])-h,1),D=1,M=1;f>x&&(D=f/x,f=x),E>x&&(M=E/x,E=x),this.current.startNewPathAndClipBox([0,0,f,E]);let L="groupAt"+this.groupLevel;l.smask&&(L+="_smask_"+this.smaskCounter++%2);let j=this.cachedCanvases.getCanvas(L,f,E,!0),B=j.context;B.scale(1/D,1/M),B.translate(-d,-h),B.transform.apply(B,t),l.smask?this.smaskStack.push({canvas:j.canvas,context:B,offsetX:d,offsetY:h,scaleX:D,scaleY:M,subtype:l.smask.subtype,backdrop:l.smask.backdrop,transferMap:l.smask.transferMap||null,startTransformInverse:null}):(s.setTransform(1,0,0,1,0,0),s.translate(d,h),s.scale(D,M),s.save()),C(s,B),this.ctx=B,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(s),this.groupLevel++}endGroup(l){if(!this.contentVisible)return;this.groupLevel--;let s=this.ctx,t=this.groupStack.pop();if(this.ctx=t,this.ctx.imageSmoothingEnabled=!1,l.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();let n=this.ctx.mozCurrentTransform;this.restore(),this.ctx.save(),this.ctx.setTransform.apply(this.ctx,n);let i=c.Util.getAxialAlignedBoundingBox([0,0,s.canvas.width,s.canvas.height],n);this.ctx.drawImage(s.canvas,0,0),this.ctx.restore(),this.compose(i)}}beginAnnotations(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)}endAnnotations(){this.restore()}beginAnnotation(l,s,t,n,i){if(this.save(),Array.isArray(s)&&s.length===4){let d=s[2]-s[0],h=s[3]-s[1];if(i&&this.annotationCanvasMap){t=t.slice(),t[4]-=s[0],t[5]-=s[1],s=s.slice(),s[0]=s[1]=0,s[2]=d,s[3]=h;let[f,E]=c.Util.singularValueDecompose2dScale(this.ctx.mozCurrentTransform),{viewportScale:D}=this,M=Math.ceil(d*this.outputScaleX*D),L=Math.ceil(h*this.outputScaleY*D);this.annotationCanvas=this.canvasFactory.create(M,L);let{canvas:j,context:B}=this.annotationCanvas,Q=`var(--zoom-factor) * ${U.PixelsPerInch.PDF_TO_CSS_UNITS}`;j.style.width=`calc(${d}px * ${Q})`,j.style.height=`calc(${h}px * ${Q})`,this.annotationCanvasMap.set(l,j),this.annotationCanvas.savedCtx=this.ctx,this.ctx=B,this.ctx.setTransform(f,0,0,-E,0,h*E),b(this.ctx),P(this.ctx,this.foregroundColor)}else P(this.ctx,this.foregroundColor),this.ctx.rect(s[0],s[1],d,h),this.ctx.clip(),this.endPath()}this.current=new a(this.ctx.canvas.width,this.ctx.canvas.height),this.transform.apply(this,t),this.transform.apply(this,n)}endAnnotation(){this.annotationCanvas&&(this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas),this.restore()}paintImageMaskXObject(l){if(!this.contentVisible)return;let s=l.count;l=this.getObject(l.data,l),l.count=s;let t=this.ctx,n=this.processingType3;if(n&&(n.compiled===void 0&&(n.compiled=e(l)),n.compiled)){n.compiled(t);return}let i=this._createMaskCanvas(l),d=i.canvas;t.save(),t.setTransform(1,0,0,1,0,0),t.drawImage(d,i.offsetX,i.offsetY),t.restore(),this.compose()}paintImageMaskXObjectRepeat(l,s,t=0,n=0,i,d){if(!this.contentVisible)return;l=this.getObject(l.data,l);let h=this.ctx;h.save();let f=h.mozCurrentTransform;h.transform(s,t,n,i,0,0);let E=this._createMaskCanvas(l);h.setTransform(1,0,0,1,0,0);for(let D=0,M=d.length;D<M;D+=2){let L=c.Util.transform(f,[s,t,n,i,d[D],d[D+1]]),[j,B]=c.Util.applyTransform([0,0],L);h.drawImage(E.canvas,j,B)}h.restore(),this.compose()}paintImageMaskXObjectGroup(l){if(!this.contentVisible)return;let s=this.ctx,t=this.current.fillColor,n=this.current.patternFill;for(let i=0,d=l.length;i<d;i++){let h=l[i],f=h.width,E=h.height,D=this.cachedCanvases.getCanvas("maskCanvas",f,E,!1),M=D.context;M.save(),T(M,h),M.globalCompositeOperation="source-in",M.fillStyle=n?t.getPattern(M,this,s.mozCurrentTransformInverse,K.PathType.FILL):t,M.fillRect(0,0,f,E),M.restore(),s.save(),s.transform.apply(s,h.transform),s.scale(1,-1),S(s,D.canvas,0,0,f,E,0,-1,1,1),s.restore()}this.compose()}paintImageXObject(l){if(!this.contentVisible)return;let s=this.getObject(l);if(!s){(0,c.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(s)}paintImageXObjectRepeat(l,s,t,n){if(!this.contentVisible)return;let i=this.getObject(l);if(!i){(0,c.warn)("Dependent image isn't ready yet");return}let d=i.width,h=i.height,f=[];for(let E=0,D=n.length;E<D;E+=2)f.push({transform:[s,0,0,t,n[E],n[E+1]],x:0,y:0,w:d,h});this.paintInlineImageXObjectGroup(i,f)}paintInlineImageXObject(l){if(!this.contentVisible)return;let s=l.width,t=l.height,n=this.ctx;this.save(),n.scale(1/s,-1/t);let i;if(typeof HTMLElement=="function"&&l instanceof HTMLElement||!l.data)i=l;else{let E=this.cachedCanvases.getCanvas("inlineImage",s,t,!1),D=E.context;_(D,l,this.current.transferMaps),i=E.canvas}let d=this._scaleImage(i,n.mozCurrentTransformInverse);n.imageSmoothingEnabled=J(n.mozCurrentTransform,l.interpolate);let[h,f]=S(n,d.img,0,0,d.paintWidth,d.paintHeight,0,-t,s,t);if(this.imageLayer){let E=this.getCanvasPosition(0,-t);this.imageLayer.appendImage({imgData:l,left:E[0],top:E[1],width:h,height:f})}this.compose(),this.restore()}paintInlineImageXObjectGroup(l,s){if(!this.contentVisible)return;let t=this.ctx,n=l.width,i=l.height,d=this.cachedCanvases.getCanvas("inlineImage",n,i,!1),h=d.context;_(h,l,this.current.transferMaps);for(let f=0,E=s.length;f<E;f++){let D=s[f];if(t.save(),t.transform.apply(t,D.transform),t.scale(1,-1),S(t,d.canvas,D.x,D.y,D.w,D.h,0,-1,1,1),this.imageLayer){let M=this.getCanvasPosition(D.x,D.y);this.imageLayer.appendImage({imgData:l,left:M[0],top:M[1],width:n,height:i})}t.restore()}this.compose()}paintSolidColorImageMask(){!this.contentVisible||(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(l){}markPointProps(l,s){}beginMarkedContent(l){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(l,s){l==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(s)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(l){let s=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(l);let t=this.ctx;this.pendingClip&&(s||(this.pendingClip===lt?t.clip("evenodd"):t.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),t.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){let l=this.ctx.mozCurrentTransform;if(l[1]===0&&l[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(l[0]),Math.abs(l[3]));else{let s=Math.abs(l[0]*l[3]-l[2]*l[1]),t=Math.hypot(l[0],l[2]),n=Math.hypot(l[1],l[3]);this._cachedGetSinglePixelWidth=Math.max(t,n)/s}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(!this._cachedScaleForStroking){let{lineWidth:l}=this.current,s=this.ctx.mozCurrentTransform,t,n;if(s[1]===0&&s[2]===0){let i=Math.abs(s[0]),d=Math.abs(s[3]);if(l===0)t=1/i,n=1/d;else{let h=i*l,f=d*l;t=h<1?1/h:1,n=f<1?1/f:1}}else{let i=Math.abs(s[0]*s[3]-s[2]*s[1]),d=Math.hypot(s[0],s[1]),h=Math.hypot(s[2],s[3]);if(l===0)t=h/i,n=d/i;else{let f=l*i;t=h>f?h/f:1,n=d>f?d/f:1}}this._cachedScaleForStroking=[t,n]}return this._cachedScaleForStroking}rescaleAndStroke(l){let{ctx:s}=this,{lineWidth:t}=this.current,[n,i]=this.getScaleForStroking();if(s.lineWidth=t||1,n===1&&i===1){s.stroke();return}let d,h,f;l&&(d=s.mozCurrentTransform.slice(),h=s.getLineDash().slice(),f=s.lineDashOffset),s.scale(n,i);let E=Math.max(n,i);s.setLineDash(s.getLineDash().map(D=>D/E)),s.lineDashOffset/=E,s.stroke(),l&&(s.setTransform(...d),s.setLineDash(h),s.lineDashOffset=f)}getCanvasPosition(l,s){let t=this.ctx.mozCurrentTransform;return[t[0]*l+t[2]*s+t[4],t[1]*l+t[3]*s+t[5]]}isContentVisible(){for(let l=this.markedContentStack.length-1;l>=0;l--)if(!this.markedContentStack[l].visible)return!1;return!0}}p.CanvasGraphics=st;for(let v in c.OPS)st.prototype[v]!==void 0&&(st.prototype[c.OPS[v]]=st.prototype[v])},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.TilingPattern=p.PathType=void 0,p.getShadingPattern=A;var c=H(1),K=H(3);let q={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};p.PathType=q;function G(r,g){if(!g||K.isNodeJS)return;let b=g[2]-g[0],y=g[3]-g[1],S=new Path2D;S.rect(g[0],g[1],b,y),r.clip(S)}class U{constructor(){this.constructor===U&&(0,c.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,c.unreachable)("Abstract method `getPattern` called.")}}class F extends U{constructor(g){super(),this._type=g[1],this._bbox=g[2],this._colorStops=g[3],this._p0=g[4],this._p1=g[5],this._r0=g[6],this._r1=g[7],this.matrix=null}_createGradient(g){let b;this._type==="axial"?b=g.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(b=g.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(let y of this._colorStops)b.addColorStop(y[0],y[1]);return b}getPattern(g,b,y,S){let e;if(S===q.STROKE||S===q.FILL){let a=b.current.getClippedPathBoundingBox(S,g.mozCurrentTransform)||[0,0,0,0],_=Math.ceil(a[2]-a[0])||1,T=Math.ceil(a[3]-a[1])||1,C=b.cachedCanvases.getCanvas("pattern",_,T,!0),P=C.context;P.clearRect(0,0,P.canvas.width,P.canvas.height),P.beginPath(),P.rect(0,0,P.canvas.width,P.canvas.height),P.translate(-a[0],-a[1]),y=c.Util.transform(y,[1,0,0,1,a[0],a[1]]),P.transform.apply(P,b.baseTransform),this.matrix&&P.transform.apply(P,this.matrix),G(P,this._bbox),P.fillStyle=this._createGradient(P),P.fill(),e=g.createPattern(C.canvas,"no-repeat");let w=new DOMMatrix(y);try{e.setTransform(w)}catch(I){(0,c.warn)(`RadialAxialShadingPattern.getPattern: "${I==null?void 0:I.message}".`)}}else G(g,this._bbox),e=this._createGradient(g);return e}}function m(r,g,b,y,S,e,a,_){let T=g.coords,C=g.colors,P=r.data,w=r.width*4,I;T[b+1]>T[y+1]&&(I=b,b=y,y=I,I=e,e=a,a=I),T[y+1]>T[S+1]&&(I=y,y=S,S=I,I=a,a=_,_=I),T[b+1]>T[y+1]&&(I=b,b=y,y=I,I=e,e=a,a=I);let X=(T[b]+g.offsetX)*g.scaleX,W=(T[b+1]+g.offsetY)*g.scaleY,z=(T[y]+g.offsetX)*g.scaleX,J=(T[y+1]+g.offsetY)*g.scaleY,Z=(T[S]+g.offsetX)*g.scaleX,Y=(T[S+1]+g.offsetY)*g.scaleY;if(W>=Y)return;let et=C[e],lt=C[e+1],st=C[e+2],v=C[a],l=C[a+1],s=C[a+2],t=C[_],n=C[_+1],i=C[_+2],d=Math.round(W),h=Math.round(Y),f,E,D,M,L,j,B,Q;for(let nt=d;nt<=h;nt++){if(nt<J){let ct;nt<W?ct=0:ct=(W-nt)/(W-J),f=X-(X-z)*ct,E=et-(et-v)*ct,D=lt-(lt-l)*ct,M=st-(st-s)*ct}else{let ct;nt>Y?ct=1:J===Y?ct=0:ct=(J-nt)/(J-Y),f=z-(z-Z)*ct,E=v-(v-t)*ct,D=l-(l-n)*ct,M=s-(s-i)*ct}let rt;nt<W?rt=0:nt>Y?rt=1:rt=(W-nt)/(W-Y),L=X-(X-Z)*rt,j=et-(et-t)*rt,B=lt-(lt-n)*rt,Q=st-(st-i)*rt;let ot=Math.round(Math.min(f,L)),tt=Math.round(Math.max(f,L)),ht=w*nt+ot*4;for(let ct=ot;ct<=tt;ct++)rt=(f-ct)/(f-L),rt<0?rt=0:rt>1&&(rt=1),P[ht++]=E-(E-j)*rt|0,P[ht++]=D-(D-B)*rt|0,P[ht++]=M-(M-Q)*rt|0,P[ht++]=255}}function x(r,g,b){let y=g.coords,S=g.colors,e,a;switch(g.type){case"lattice":let _=g.verticesPerRow,T=Math.floor(y.length/_)-1,C=_-1;for(e=0;e<T;e++){let P=e*_;for(let w=0;w<C;w++,P++)m(r,b,y[P],y[P+1],y[P+_],S[P],S[P+1],S[P+_]),m(r,b,y[P+_+1],y[P+1],y[P+_],S[P+_+1],S[P+1],S[P+_])}break;case"triangles":for(e=0,a=y.length;e<a;e+=3)m(r,b,y[e],y[e+1],y[e+2],S[e],S[e+1],S[e+2]);break;default:throw new Error("illegal figure")}}class k extends U{constructor(g){super(),this._coords=g[2],this._colors=g[3],this._figures=g[4],this._bounds=g[5],this._bbox=g[7],this._background=g[8],this.matrix=null}_createMeshCanvas(g,b,y){let _=Math.floor(this._bounds[0]),T=Math.floor(this._bounds[1]),C=Math.ceil(this._bounds[2])-_,P=Math.ceil(this._bounds[3])-T,w=Math.min(Math.ceil(Math.abs(C*g[0]*1.1)),3e3),I=Math.min(Math.ceil(Math.abs(P*g[1]*1.1)),3e3),X=C/w,W=P/I,z={coords:this._coords,colors:this._colors,offsetX:-_,offsetY:-T,scaleX:1/X,scaleY:1/W},J=w+2*2,Z=I+2*2,Y=y.getCanvas("mesh",J,Z,!1),et=Y.context,lt=et.createImageData(w,I);if(b){let v=lt.data;for(let l=0,s=v.length;l<s;l+=4)v[l]=b[0],v[l+1]=b[1],v[l+2]=b[2],v[l+3]=255}for(let v of this._figures)x(lt,v,z);return et.putImageData(lt,2,2),{canvas:Y.canvas,offsetX:_-2*X,offsetY:T-2*W,scaleX:X,scaleY:W}}getPattern(g,b,y,S){G(g,this._bbox);let e;if(S===q.SHADING)e=c.Util.singularValueDecompose2dScale(g.mozCurrentTransform);else if(e=c.Util.singularValueDecompose2dScale(b.baseTransform),this.matrix){let _=c.Util.singularValueDecompose2dScale(this.matrix);e=[e[0]*_[0],e[1]*_[1]]}let a=this._createMeshCanvas(e,S===q.SHADING?null:this._background,b.cachedCanvases);return S!==q.SHADING&&(g.setTransform.apply(g,b.baseTransform),this.matrix&&g.transform.apply(g,this.matrix)),g.translate(a.offsetX,a.offsetY),g.scale(a.scaleX,a.scaleY),g.createPattern(a.canvas,"no-repeat")}}class R extends U{getPattern(){return"hotpink"}}function A(r){switch(r[0]){case"RadialAxial":return new F(r);case"Mesh":return new k(r);case"Dummy":return new R}throw new Error(`Unknown IR type: ${r[0]}`)}let o={COLORED:1,UNCOLORED:2};class u{static get MAX_PATTERN_SIZE(){return(0,c.shadow)(this,"MAX_PATTERN_SIZE",3e3)}constructor(g,b,y,S,e){this.operatorList=g[2],this.matrix=g[3]||[1,0,0,1,0,0],this.bbox=g[4],this.xstep=g[5],this.ystep=g[6],this.paintType=g[7],this.tilingType=g[8],this.color=b,this.ctx=y,this.canvasGraphicsFactory=S,this.baseTransform=e}createPatternCanvas(g){let b=this.operatorList,y=this.bbox,S=this.xstep,e=this.ystep,a=this.paintType,_=this.tilingType,T=this.color,C=this.canvasGraphicsFactory;(0,c.info)("TilingType: "+_);let P=y[0],w=y[1],I=y[2],X=y[3],W=c.Util.singularValueDecompose2dScale(this.matrix),z=c.Util.singularValueDecompose2dScale(this.baseTransform),J=[W[0]*z[0],W[1]*z[1]],Z=this.getSizeAndScale(S,this.ctx.canvas.width,J[0]),Y=this.getSizeAndScale(e,this.ctx.canvas.height,J[1]),et=g.cachedCanvases.getCanvas("pattern",Z.size,Y.size,!0),lt=et.context,st=C.createCanvasGraphics(lt);st.groupLevel=g.groupLevel,this.setFillAndStrokeStyleToContext(st,a,T);let v=P,l=w,s=I,t=X;return P<0&&(v=0,s+=Math.abs(P)),w<0&&(l=0,t+=Math.abs(w)),lt.translate(-(Z.scale*v),-(Y.scale*l)),st.transform(Z.scale,0,0,Y.scale,0,0),lt.save(),this.clipBbox(st,v,l,s,t),st.baseTransform=st.ctx.mozCurrentTransform.slice(),st.executeOperatorList(b),st.endDrawing(),{canvas:et.canvas,scaleX:Z.scale,scaleY:Y.scale,offsetX:v,offsetY:l}}getSizeAndScale(g,b,y){g=Math.abs(g);let S=Math.max(u.MAX_PATTERN_SIZE,b),e=Math.ceil(g*y);return e>=S?e=S:y=e/g,{scale:y,size:e}}clipBbox(g,b,y,S,e){let a=S-b,_=e-y;g.ctx.rect(b,y,a,_),g.current.updateRectMinMax(g.ctx.mozCurrentTransform,[b,y,S,e]),g.clip(),g.endPath()}setFillAndStrokeStyleToContext(g,b,y){let S=g.ctx,e=g.current;switch(b){case o.COLORED:let a=this.ctx;S.fillStyle=a.fillStyle,S.strokeStyle=a.strokeStyle,e.fillColor=a.fillStyle,e.strokeColor=a.strokeStyle;break;case o.UNCOLORED:let _=c.Util.makeHexColor(y[0],y[1],y[2]);S.fillStyle=_,S.strokeStyle=_,e.fillColor=_,e.strokeColor=_;break;default:throw new c.FormatError(`Unsupported paint type: ${b}`)}}getPattern(g,b,y,S){let e=y;S!==q.SHADING&&(e=c.Util.transform(e,b.baseTransform),this.matrix&&(e=c.Util.transform(e,this.matrix)));let a=this.createPatternCanvas(b),_=new DOMMatrix(e);_=_.translate(a.offsetX,a.offsetY),_=_.scale(1/a.scaleX,1/a.scaleY);let T=g.createPattern(a.canvas,"repeat");try{T.setTransform(_)}catch(C){(0,c.warn)(`TilingPattern.getPattern: "${C==null?void 0:C.message}".`)}return T}}p.TilingPattern=u},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.applyMaskImageData=K;var c=H(1);function K({src:q,srcPos:G=0,dest:U,destPos:F=0,width:m,height:x,inverseDecode:k=!1}){let R=c.FeatureTest.isLittleEndian?4278190080:255,[A,o]=k?[0,R]:[R,0],u=m>>3,r=m&7,g=q.length;U=new Uint32Array(U.buffer);for(let b=0;b<x;b++){for(let S=G+u;G<S;G++){let e=G<g?q[G]:255;U[F++]=e&128?o:A,U[F++]=e&64?o:A,U[F++]=e&32?o:A,U[F++]=e&16?o:A,U[F++]=e&8?o:A,U[F++]=e&4?o:A,U[F++]=e&2?o:A,U[F++]=e&1?o:A}if(r===0)continue;let y=G<g?q[G++]:255;for(let S=0;S<r;S++)U[F++]=y&1<<7-S?o:A}return{srcPos:G,destPos:F}}},($,p)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.GlobalWorkerOptions=void 0;let H=Object.create(null);p.GlobalWorkerOptions=H,H.workerPort=H.workerPort===void 0?null:H.workerPort,H.workerSrc=H.workerSrc===void 0?"":H.workerSrc},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.MessageHandler=void 0;var c=H(1);let K={UNKNOWN:0,DATA:1,ERROR:2},q={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function G(F){switch(F instanceof Error||typeof F=="object"&&F!==null||(0,c.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),F.name){case"AbortException":return new c.AbortException(F.message);case"MissingPDFException":return new c.MissingPDFException(F.message);case"PasswordException":return new c.PasswordException(F.message,F.code);case"UnexpectedResponseException":return new c.UnexpectedResponseException(F.message,F.status);case"UnknownErrorException":return new c.UnknownErrorException(F.message,F.details);default:return new c.UnknownErrorException(F.message,F.toString())}}class U{constructor(m,x,k){this.sourceName=m,this.targetName=x,this.comObj=k,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=R=>{let A=R.data;if(A.targetName!==this.sourceName)return;if(A.stream){this._processStreamMessage(A);return}if(A.callback){let u=A.callbackId,r=this.callbackCapabilities[u];if(!r)throw new Error(`Cannot resolve callback ${u}`);if(delete this.callbackCapabilities[u],A.callback===K.DATA)r.resolve(A.data);else if(A.callback===K.ERROR)r.reject(G(A.reason));else throw new Error("Unexpected callback case");return}let o=this.actionHandler[A.action];if(!o)throw new Error(`Unknown action from worker: ${A.action}`);if(A.callbackId){let u=this.sourceName,r=A.sourceName;new Promise(function(g){g(o(A.data))}).then(function(g){k.postMessage({sourceName:u,targetName:r,callback:K.DATA,callbackId:A.callbackId,data:g})},function(g){k.postMessage({sourceName:u,targetName:r,callback:K.ERROR,callbackId:A.callbackId,reason:G(g)})});return}if(A.streamId){this._createStreamSink(A);return}o(A.data)},k.addEventListener("message",this._onComObjOnMessage)}on(m,x){let k=this.actionHandler;if(k[m])throw new Error(`There is already an actionName called "${m}"`);k[m]=x}send(m,x,k){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:m,data:x},k)}sendWithPromise(m,x,k){let R=this.callbackId++,A=(0,c.createPromiseCapability)();this.callbackCapabilities[R]=A;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:m,callbackId:R,data:x},k)}catch(o){A.reject(o)}return A.promise}sendWithStream(m,x,k,R){let A=this.streamId++,o=this.sourceName,u=this.targetName,r=this.comObj;return new ReadableStream({start:g=>{let b=(0,c.createPromiseCapability)();return this.streamControllers[A]={controller:g,startCall:b,pullCall:null,cancelCall:null,isClosed:!1},r.postMessage({sourceName:o,targetName:u,action:m,streamId:A,data:x,desiredSize:g.desiredSize},R),b.promise},pull:g=>{let b=(0,c.createPromiseCapability)();return this.streamControllers[A].pullCall=b,r.postMessage({sourceName:o,targetName:u,stream:q.PULL,streamId:A,desiredSize:g.desiredSize}),b.promise},cancel:g=>{(0,c.assert)(g instanceof Error,"cancel must have a valid reason");let b=(0,c.createPromiseCapability)();return this.streamControllers[A].cancelCall=b,this.streamControllers[A].isClosed=!0,r.postMessage({sourceName:o,targetName:u,stream:q.CANCEL,streamId:A,reason:G(g)}),b.promise}},k)}_createStreamSink(m){let x=m.streamId,k=this.sourceName,R=m.sourceName,A=this.comObj,o=this,u=this.actionHandler[m.action],r={enqueue(g,b=1,y){if(this.isCancelled)return;let S=this.desiredSize;this.desiredSize-=b,S>0&&this.desiredSize<=0&&(this.sinkCapability=(0,c.createPromiseCapability)(),this.ready=this.sinkCapability.promise),A.postMessage({sourceName:k,targetName:R,stream:q.ENQUEUE,streamId:x,chunk:g},y)},close(){this.isCancelled||(this.isCancelled=!0,A.postMessage({sourceName:k,targetName:R,stream:q.CLOSE,streamId:x}),delete o.streamSinks[x])},error(g){(0,c.assert)(g instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,A.postMessage({sourceName:k,targetName:R,stream:q.ERROR,streamId:x,reason:G(g)}))},sinkCapability:(0,c.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:m.desiredSize,ready:null};r.sinkCapability.resolve(),r.ready=r.sinkCapability.promise,this.streamSinks[x]=r,new Promise(function(g){g(u(m.data,r))}).then(function(){A.postMessage({sourceName:k,targetName:R,stream:q.START_COMPLETE,streamId:x,success:!0})},function(g){A.postMessage({sourceName:k,targetName:R,stream:q.START_COMPLETE,streamId:x,reason:G(g)})})}_processStreamMessage(m){let x=m.streamId,k=this.sourceName,R=m.sourceName,A=this.comObj,o=this.streamControllers[x],u=this.streamSinks[x];switch(m.stream){case q.START_COMPLETE:m.success?o.startCall.resolve():o.startCall.reject(G(m.reason));break;case q.PULL_COMPLETE:m.success?o.pullCall.resolve():o.pullCall.reject(G(m.reason));break;case q.PULL:if(!u){A.postMessage({sourceName:k,targetName:R,stream:q.PULL_COMPLETE,streamId:x,success:!0});break}u.desiredSize<=0&&m.desiredSize>0&&u.sinkCapability.resolve(),u.desiredSize=m.desiredSize,new Promise(function(r){r(u.onPull&&u.onPull())}).then(function(){A.postMessage({sourceName:k,targetName:R,stream:q.PULL_COMPLETE,streamId:x,success:!0})},function(r){A.postMessage({sourceName:k,targetName:R,stream:q.PULL_COMPLETE,streamId:x,reason:G(r)})});break;case q.ENQUEUE:if((0,c.assert)(o,"enqueue should have stream controller"),o.isClosed)break;o.controller.enqueue(m.chunk);break;case q.CLOSE:if((0,c.assert)(o,"close should have stream controller"),o.isClosed)break;o.isClosed=!0,o.controller.close(),this._deleteStreamController(o,x);break;case q.ERROR:(0,c.assert)(o,"error should have stream controller"),o.controller.error(G(m.reason)),this._deleteStreamController(o,x);break;case q.CANCEL_COMPLETE:m.success?o.cancelCall.resolve():o.cancelCall.reject(G(m.reason)),this._deleteStreamController(o,x);break;case q.CANCEL:if(!u)break;new Promise(function(r){r(u.onCancel&&u.onCancel(G(m.reason)))}).then(function(){A.postMessage({sourceName:k,targetName:R,stream:q.CANCEL_COMPLETE,streamId:x,success:!0})},function(r){A.postMessage({sourceName:k,targetName:R,stream:q.CANCEL_COMPLETE,streamId:x,reason:G(r)})}),u.sinkCapability.reject(G(m.reason)),u.isCancelled=!0,delete this.streamSinks[x];break;default:throw new Error("Unexpected stream case")}}async _deleteStreamController(m,x){await Promise.allSettled([m.startCall&&m.startCall.promise,m.pullCall&&m.pullCall.promise,m.cancelCall&&m.cancelCall.promise]),delete this.streamControllers[x]}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}p.MessageHandler=U},($,p,H)=>{var q,G;Object.defineProperty(p,"__esModule",{value:!0}),p.Metadata=void 0;var c=H(1);class K{constructor({parsedData:F,rawData:m}){xt(this,q,void 0);xt(this,G,void 0);Pt(this,q,F),Pt(this,G,m)}getRaw(){return ut(this,G)}get(F){var m;return(m=ut(this,q).get(F))!=null?m:null}getAll(){return(0,c.objectFromMap)(ut(this,q))}has(F){return ut(this,q).has(F)}}q=new WeakMap,G=new WeakMap,p.Metadata=K},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.OptionalContentConfig=void 0;var c=H(1);class K{constructor(U,F){this.visible=!0,this.name=U,this.intent=F}}class q{constructor(U){if(this.name=null,this.creator=null,this._order=null,this._groups=new Map,U!==null){this.name=U.name,this.creator=U.creator,this._order=U.order;for(let F of U.groups)this._groups.set(F.id,new K(F.name,F.intent));if(U.baseState==="OFF")for(let F of this._groups)F.visible=!1;for(let F of U.on)this._groups.get(F).visible=!0;for(let F of U.off)this._groups.get(F).visible=!1}}_evaluateVisibilityExpression(U){let F=U.length;if(F<2)return!0;let m=U[0];for(let x=1;x<F;x++){let k=U[x],R;if(Array.isArray(k))R=this._evaluateVisibilityExpression(k);else if(this._groups.has(k))R=this._groups.get(k).visible;else return(0,c.warn)(`Optional content group not found: ${k}`),!0;switch(m){case"And":if(!R)return!1;break;case"Or":if(R)return!0;break;case"Not":return!R;default:return!0}}return m==="And"}isVisible(U){if(this._groups.size===0)return!0;if(!U)return(0,c.warn)("Optional content group not defined."),!0;if(U.type==="OCG")return this._groups.has(U.id)?this._groups.get(U.id).visible:((0,c.warn)(`Optional content group not found: ${U.id}`),!0);if(U.type==="OCMD"){if(U.expression)return this._evaluateVisibilityExpression(U.expression);if(!U.policy||U.policy==="AnyOn"){for(let F of U.ids){if(!this._groups.has(F))return(0,c.warn)(`Optional content group not found: ${F}`),!0;if(this._groups.get(F).visible)return!0}return!1}else if(U.policy==="AllOn"){for(let F of U.ids){if(!this._groups.has(F))return(0,c.warn)(`Optional content group not found: ${F}`),!0;if(!this._groups.get(F).visible)return!1}return!0}else if(U.policy==="AnyOff"){for(let F of U.ids){if(!this._groups.has(F))return(0,c.warn)(`Optional content group not found: ${F}`),!0;if(!this._groups.get(F).visible)return!0}return!1}else if(U.policy==="AllOff"){for(let F of U.ids){if(!this._groups.has(F))return(0,c.warn)(`Optional content group not found: ${F}`),!0;if(this._groups.get(F).visible)return!1}return!0}return(0,c.warn)(`Unknown optional content policy ${U.policy}.`),!0}return(0,c.warn)(`Unknown group type ${U.type}.`),!0}setVisibility(U,F=!0){if(!this._groups.has(U)){(0,c.warn)(`Optional content group not found: ${U}`);return}this._groups.get(U).visible=!!F}getOrder(){return this._groups.size?this._order?this._order.slice():Array.from(this._groups.keys()):null}getGroups(){return this._groups.size>0?(0,c.objectFromMap)(this._groups):null}getGroup(U){return this._groups.get(U)||null}}p.OptionalContentConfig=q},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.PDFDataTransportStream=void 0;var c=H(1),K=H(5);class q{constructor(m,x){(0,c.assert)(x,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=m.progressiveDone||!1,this._contentDispositionFilename=m.contentDispositionFilename||null;let k=m.initialData;if((k==null?void 0:k.length)>0){let R=new Uint8Array(k).buffer;this._queuedChunks.push(R)}this._pdfDataRangeTransport=x,this._isStreamingSupported=!m.disableStream,this._isRangeSupported=!m.disableRange,this._contentLength=m.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((R,A)=>{this._onReceiveData({begin:R,chunk:A})}),this._pdfDataRangeTransport.addProgressListener((R,A)=>{this._onProgress({loaded:R,total:A})}),this._pdfDataRangeTransport.addProgressiveReadListener(R=>{this._onReceiveData({chunk:R})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData(m){let x=new Uint8Array(m.chunk).buffer;if(m.begin===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(x):this._queuedChunks.push(x);else{let k=this._rangeReaders.some(function(R){return R._begin!==m.begin?!1:(R._enqueue(x),!0)});(0,c.assert)(k,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var m,x;return(x=(m=this._fullRequestReader)==null?void 0:m._loaded)!=null?x:0}_onProgress(m){if(m.total===void 0){let x=this._rangeReaders[0];x!=null&&x.onProgress&&x.onProgress({loaded:m.loaded})}else{let x=this._fullRequestReader;x!=null&&x.onProgress&&x.onProgress({loaded:m.loaded,total:m.total})}}_onProgressiveDone(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(m){let x=this._rangeReaders.indexOf(m);x>=0&&this._rangeReaders.splice(x,1)}getFullReader(){(0,c.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");let m=this._queuedChunks;return this._queuedChunks=null,new G(this,m,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(m,x){if(x<=this._progressiveDataLength)return null;let k=new U(this,m,x);return this._pdfDataRangeTransport.requestDataRange(m,x),this._rangeReaders.push(k),k}cancelAllRequests(m){this._fullRequestReader&&this._fullRequestReader.cancel(m);for(let x of this._rangeReaders.slice(0))x.cancel(m);this._pdfDataRangeTransport.abort()}}p.PDFDataTransportStream=q;class G{constructor(m,x,k=!1,R=null){this._stream=m,this._done=k||!1,this._filename=(0,K.isPdfFile)(R)?R:null,this._queuedChunks=x||[],this._loaded=0;for(let A of this._queuedChunks)this._loaded+=A.byteLength;this._requests=[],this._headersReady=Promise.resolve(),m._fullRequestReader=this,this.onProgress=null}_enqueue(m){this._done||(this._requests.length>0?this._requests.shift().resolve({value:m,done:!1}):this._queuedChunks.push(m),this._loaded+=m.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};let m=(0,c.createPromiseCapability)();return this._requests.push(m),m.promise}cancel(m){this._done=!0;for(let x of this._requests)x.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class U{constructor(m,x,k){this._stream=m,this._begin=x,this._end=k,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(m){if(!this._done){if(this._requests.length===0)this._queuedChunk=m;else{this._requests.shift().resolve({value:m,done:!1});for(let k of this._requests)k.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){let x=this._queuedChunk;return this._queuedChunk=null,{value:x,done:!1}}if(this._done)return{value:void 0,done:!0};let m=(0,c.createPromiseCapability)();return this._requests.push(m),m.promise}cancel(m){this._done=!0;for(let x of this._requests)x.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},($,p)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.XfaText=void 0;class H{static textContent(K){let q=[],G={items:q,styles:Object.create(null)};function U(F){var k;if(!F)return;let m=null,x=F.name;if(x==="#text")m=F.value;else if(H.shouldBuildText(x))(k=F==null?void 0:F.attributes)!=null&&k.textContent?m=F.attributes.textContent:F.value&&(m=F.value);else return;if(m!==null&&q.push({str:m}),!!F.children)for(let R of F.children)U(R)}return U(K),G}static shouldBuildText(K){return!(K==="textarea"||K==="input"||K==="option"||K==="select")}}p.XfaText=H},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.NodeStandardFontDataFactory=p.NodeCanvasFactory=p.NodeCMapReaderFactory=void 0;var c=H(6);let K=function(F){return new Promise((m,x)=>{$t().readFile(F,(R,A)=>{if(R||!A){x(new Error(R));return}m(new Uint8Array(A))})})};class q extends c.BaseCanvasFactory{_createCanvas(m,x){return te().createCanvas(m,x)}}p.NodeCanvasFactory=q;class G extends c.BaseCMapReaderFactory{_fetchData(m,x){return K(m).then(k=>({cMapData:k,compressionType:x}))}}p.NodeCMapReaderFactory=G;class U extends c.BaseStandardFontDataFactory{_fetchData(m){return K(m)}}p.NodeStandardFontDataFactory=U},($,p,H)=>{var v,Kt;Object.defineProperty(p,"__esModule",{value:!0}),p.AnnotationLayer=void 0;var c=H(1),K=H(5),q=H(8),G=H(21),U=H(22);let F=1e3,m=new WeakSet;function x(s){return{width:s[2]-s[0],height:s[3]-s[1]}}class k{static create(t){switch(t.data.annotationType){case c.AnnotationType.LINK:return new A(t);case c.AnnotationType.TEXT:return new o(t);case c.AnnotationType.WIDGET:switch(t.data.fieldType){case"Tx":return new r(t);case"Btn":return t.data.radioButton?new b(t):t.data.checkBox?new g(t):new y(t);case"Ch":return new S(t)}return new u(t);case c.AnnotationType.POPUP:return new e(t);case c.AnnotationType.FREETEXT:return new _(t);case c.AnnotationType.LINE:return new T(t);case c.AnnotationType.SQUARE:return new C(t);case c.AnnotationType.CIRCLE:return new P(t);case c.AnnotationType.POLYLINE:return new w(t);case c.AnnotationType.CARET:return new X(t);case c.AnnotationType.INK:return new W(t);case c.AnnotationType.POLYGON:return new I(t);case c.AnnotationType.HIGHLIGHT:return new z(t);case c.AnnotationType.UNDERLINE:return new J(t);case c.AnnotationType.SQUIGGLY:return new Z(t);case c.AnnotationType.STRIKEOUT:return new Y(t);case c.AnnotationType.STAMP:return new et(t);case c.AnnotationType.FILEATTACHMENT:return new lt(t);default:return new R(t)}}}class R{constructor(t,{isRenderable:n=!1,ignoreBorder:i=!1,createQuadrilaterals:d=!1}={}){this.isRenderable=n,this.data=t.data,this.layer=t.layer,this.page=t.page,this.viewport=t.viewport,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderForms=t.renderForms,this.svgFactory=t.svgFactory,this.annotationStorage=t.annotationStorage,this.enableScripting=t.enableScripting,this.hasJSActions=t.hasJSActions,this._fieldObjects=t.fieldObjects,this._mouseState=t.mouseState,n&&(this.container=this._createContainer(i)),d&&(this.quadrilaterals=this._createQuadrilaterals(i))}_createContainer(t=!1){let n=this.data,i=this.page,d=this.viewport,h=document.createElement("section"),{width:f,height:E}=x(n.rect);h.setAttribute("data-annotation-id",n.id);let D=c.Util.normalizeRect([n.rect[0],i.view[3]-n.rect[1]+i.view[1],n.rect[2],i.view[3]-n.rect[3]+i.view[1]]);if(n.hasOwnCanvas){let M=d.transform.slice(),[L,j]=c.Util.singularValueDecompose2dScale(M);f=Math.ceil(f*L),E=Math.ceil(E*j),D[0]*=L,D[1]*=j;for(let B=0;B<4;B++)M[B]=Math.sign(M[B]);h.style.transform=`matrix(${M.join(",")})`}else h.style.transform=`matrix(${d.transform.join(",")})`;if(h.style.transformOrigin=`${-D[0]}px ${-D[1]}px`,!t&&n.borderStyle.width>0){h.style.borderWidth=`${n.borderStyle.width}px`,n.borderStyle.style!==c.AnnotationBorderStyleType.UNDERLINE&&(f-=2*n.borderStyle.width,E-=2*n.borderStyle.width);let M=n.borderStyle.horizontalCornerRadius,L=n.borderStyle.verticalCornerRadius;if(M>0||L>0){let B=`${M}px / ${L}px`;h.style.borderRadius=B}switch(n.borderStyle.style){case c.AnnotationBorderStyleType.SOLID:h.style.borderStyle="solid";break;case c.AnnotationBorderStyleType.DASHED:h.style.borderStyle="dashed";break;case c.AnnotationBorderStyleType.BEVELED:(0,c.warn)("Unimplemented border style: beveled");break;case c.AnnotationBorderStyleType.INSET:(0,c.warn)("Unimplemented border style: inset");break;case c.AnnotationBorderStyleType.UNDERLINE:h.style.borderBottomStyle="solid";break;default:break}n.borderColor||n.color||null?h.style.borderColor=c.Util.makeHexColor(n.color[0]|0,n.color[1]|0,n.color[2]|0):h.style.borderWidth=0}return h.style.left=`${D[0]}px`,h.style.top=`${D[1]}px`,n.hasOwnCanvas?h.style.width=h.style.height="auto":(h.style.width=`${f}px`,h.style.height=`${E}px`),h}get _commonActions(){let t=(n,i,d)=>{let h=d.detail[n];d.target.style[i]=G.ColorConverters[`${h[0]}_HTML`](h.slice(1))};return(0,c.shadow)(this,"_commonActions",{display:n=>{let i=n.detail.display%2===1;n.target.style.visibility=i?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:i,print:n.detail.display===0||n.detail.display===3})},print:n=>{this.annotationStorage.setValue(this.data.id,{print:n.detail.print})},hidden:n=>{n.target.style.visibility=n.detail.hidden?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:n.detail.hidden})},focus:n=>{setTimeout(()=>n.target.focus({preventScroll:!1}),0)},userName:n=>{n.target.title=n.detail.userName},readonly:n=>{n.detail.readonly?n.target.setAttribute("readonly",""):n.target.removeAttribute("readonly")},required:n=>{n.detail.required?n.target.setAttribute("required",""):n.target.removeAttribute("required")},bgColor:n=>{t("bgColor","backgroundColor",n)},fillColor:n=>{t("fillColor","backgroundColor",n)},fgColor:n=>{t("fgColor","color",n)},textColor:n=>{t("textColor","color",n)},borderColor:n=>{t("borderColor","borderColor",n)},strokeColor:n=>{t("strokeColor","borderColor",n)}})}_dispatchEventFromSandbox(t,n){let i=this._commonActions;for(let d of Object.keys(n.detail)){let h=t[d]||i[d];h&&h(n)}}_setDefaultPropertiesFromJS(t){if(!this.enableScripting)return;let n=this.annotationStorage.getRawValue(this.data.id);if(!n)return;let i=this._commonActions;for(let[d,h]of Object.entries(n)){let f=i[d];f&&(f({detail:h,target:t}),delete n[d])}}_createQuadrilaterals(t=!1){if(!this.data.quadPoints)return null;let n=[],i=this.data.rect;for(let d of this.data.quadPoints)this.data.rect=[d[2].x,d[2].y,d[1].x,d[1].y],n.push(this._createContainer(t));return this.data.rect=i,n}_createPopup(t,n){let i=this.container;this.quadrilaterals&&(t=t||this.quadrilaterals,i=this.quadrilaterals[0]),t||(t=document.createElement("div"),t.style.height=i.style.height,t.style.width=i.style.width,i.appendChild(t));let h=new a({container:i,trigger:t,color:n.color,titleObj:n.titleObj,modificationDate:n.modificationDate,contentsObj:n.contentsObj,richText:n.richText,hideWrapper:!0}).render();h.style.left=i.style.width,i.appendChild(h)}_renderQuadrilaterals(t){for(let n of this.quadrilaterals)n.className=t;return this.quadrilaterals}render(){(0,c.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(t,n=null){let i=[];if(this._fieldObjects){let d=this._fieldObjects[t];if(d)for(let{page:h,id:f,exportValues:E}of d){if(h===-1||f===n)continue;let D=typeof E=="string"?E:null,M=document.getElementById(f);if(M&&!m.has(M)){(0,c.warn)(`_getElementsByName - element not allowed: ${f}`);continue}i.push({id:f,exportValue:D,domElement:M})}return i}for(let d of document.getElementsByName(t)){let{id:h,exportValue:f}=d;h!==n&&(!m.has(d)||i.push({id:h,exportValue:f,domElement:d}))}return i}static get platform(){let t=typeof navigator<"u"?navigator.platform:"";return(0,c.shadow)(this,"platform",{isWin:t.includes("Win"),isMac:t.includes("Mac")})}}class A extends R{constructor(t,n=null){let i=!!(t.data.url||t.data.dest||t.data.action||t.data.isTooltipOnly||t.data.resetForm||t.data.actions&&(t.data.actions.Action||t.data.actions["Mouse Up"]||t.data.actions["Mouse Down"]));super(t,{isRenderable:i,ignoreBorder:!!(n!=null&&n.ignoreBorder),createQuadrilaterals:!0})}render(){let{data:t,linkService:n}=this,i=document.createElement("a");if(t.url)n.addLinkAttributes(i,t.url,t.newWindow);else if(t.action)this._bindNamedAction(i,t.action);else if(t.dest)this._bindLink(i,t.dest);else{let d=!1;t.actions&&(t.actions.Action||t.actions["Mouse Up"]||t.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(d=!0,this._bindJSAction(i,t)),t.resetForm?this._bindResetFormAction(i,t.resetForm):d||this._bindLink(i,"")}return this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map((d,h)=>{let f=h===0?i:i.cloneNode();return d.appendChild(f),d}):(this.container.className="linkAnnotation",this.container.appendChild(i),this.container)}_bindLink(t,n){t.href=this.linkService.getDestinationHash(n),t.onclick=()=>(n&&this.linkService.goToDestination(n),!1),(n||n==="")&&(t.className="internalLink")}_bindNamedAction(t,n){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeNamedAction(n),!1),t.className="internalLink"}_bindJSAction(t,n){t.href=this.linkService.getAnchorUrl("");let i=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(let d of Object.keys(n.actions)){let h=i.get(d);!h||(t[h]=()=>{var f;return(f=this.linkService.eventBus)==null||f.dispatch("dispatcheventinsandbox",{source:this,detail:{id:n.id,name:d}}),!1})}t.onclick||(t.onclick=()=>!1),t.className="internalLink"}_bindResetFormAction(t,n){let i=t.onclick;if(i||(t.href=this.linkService.getAnchorUrl("")),t.className="internalLink",!this._fieldObjects){(0,c.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),i||(t.onclick=()=>!1);return}t.onclick=()=>{var L;i&&i();let{fields:d,refs:h,include:f}=n,E=[];if(d.length!==0||h.length!==0){let j=new Set(h);for(let B of d){let Q=this._fieldObjects[B]||[];for(let{id:nt}of Q)j.add(nt)}for(let B of Object.values(this._fieldObjects))for(let Q of B)j.has(Q.id)===f&&E.push(Q)}else for(let j of Object.values(this._fieldObjects))E.push(...j);let D=this.annotationStorage,M=[];for(let j of E){let{id:B}=j;switch(M.push(B),j.type){case"text":{let nt=j.defaultValue||"";D.setValue(B,{value:nt});break}case"checkbox":case"radiobutton":{let nt=j.defaultValue===j.exportValues;D.setValue(B,{value:nt});break}case"combobox":case"listbox":{let nt=j.defaultValue||"";D.setValue(B,{value:nt});break}default:continue}let Q=document.getElementById(B);!Q||!m.has(Q)||Q.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((L=this.linkService.eventBus)==null||L.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:M,name:"ResetForm"}})),!1}}}class o extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n})}render(){this.container.className="textAnnotation";let t=document.createElement("img");return t.style.height=this.container.style.height,t.style.width=this.container.style.width,t.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",t.alt="[{{type}} Annotation]",t.dataset.l10nId="text_annotation_type",t.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(t,this.data),this.container.appendChild(t),this.container}}class u extends R{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}_getKeyModifier(t){let{isWin:n,isMac:i}=R.platform;return n&&t.ctrlKey||i&&t.metaKey}_setEventListener(t,n,i,d){n.includes("mouse")?t.addEventListener(n,h=>{var f;(f=this.linkService.eventBus)==null||f.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:i,value:d(h),shift:h.shiftKey,modifier:this._getKeyModifier(h)}})}):t.addEventListener(n,h=>{var f;(f=this.linkService.eventBus)==null||f.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:i,value:d(h)}})})}_setEventListeners(t,n,i){var d;for(let[h,f]of n)(f==="Action"||((d=this.data.actions)==null?void 0:d[f]))&&this._setEventListener(t,h,f,i)}_setBackgroundColor(t){let n=this.data.backgroundColor||null;t.style.backgroundColor=n===null?"transparent":c.Util.makeHexColor(n[0],n[1],n[2])}}class r extends u{constructor(t){let n=t.renderForms||!t.data.hasAppearance&&!!t.data.fieldValue;super(t,{isRenderable:n})}setPropertyOnSiblings(t,n,i,d){let h=this.annotationStorage;for(let f of this._getElementsByName(t.name,t.id))f.domElement&&(f.domElement[n]=i),h.setValue(f.id,{[d]:i})}render(){var d;let t=this.annotationStorage,n=this.data.id;this.container.className="textWidgetAnnotation";let i=null;if(this.renderForms){let h=t.getValue(n,{value:this.data.fieldValue}),f=h.formattedValue||h.value||"",E={userValue:null,formattedValue:null,valueOnFocus:""};this.data.multiLine?(i=document.createElement("textarea"),i.textContent=f):(i=document.createElement("input"),i.type="text",i.setAttribute("value",f)),m.add(i),i.disabled=this.data.readOnly,i.name=this.data.fieldName,i.tabIndex=F,E.userValue=f,i.setAttribute("id",n),i.addEventListener("input",M=>{t.setValue(n,{value:M.target.value}),this.setPropertyOnSiblings(i,"value",M.target.value,"value")}),i.addEventListener("resetform",M=>{var j;let L=(j=this.data.defaultFieldValue)!=null?j:"";i.value=E.userValue=L,E.formattedValue=null});let D=M=>{let{formattedValue:L}=E;L!=null&&(M.target.value=L),M.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){i.addEventListener("focus",L=>{E.userValue&&(L.target.value=E.userValue),E.valueOnFocus=L.target.value}),i.addEventListener("updatefromsandbox",L=>{let j={value(B){var Q;E.userValue=(Q=B.detail.value)!=null?Q:"",t.setValue(n,{value:E.userValue.toString()}),B.target.value=E.userValue},formattedValue(B){let{formattedValue:Q}=B.detail;E.formattedValue=Q,Q!=null&&B.target!==document.activeElement&&(B.target.value=Q),t.setValue(n,{formattedValue:Q})},selRange(B){B.target.setSelectionRange(...B.detail.selRange)}};this._dispatchEventFromSandbox(j,L)}),i.addEventListener("keydown",L=>{var Q;let j=-1;if(L.key==="Escape"?j=0:L.key==="Enter"?j=2:L.key==="Tab"&&(j=3),j===-1)return;let{value:B}=L.target;E.valueOnFocus!==B&&(E.userValue=B,(Q=this.linkService.eventBus)==null||Q.dispatch("dispatcheventinsandbox",{source:this,detail:{id:n,name:"Keystroke",value:B,willCommit:!0,commitKey:j,selStart:L.target.selectionStart,selEnd:L.target.selectionEnd}}))});let M=D;D=null,i.addEventListener("blur",L=>{var B;let{value:j}=L.target;E.userValue=j,this._mouseState.isDown&&E.valueOnFocus!==j&&((B=this.linkService.eventBus)==null||B.dispatch("dispatcheventinsandbox",{source:this,detail:{id:n,name:"Keystroke",value:j,willCommit:!0,commitKey:1,selStart:L.target.selectionStart,selEnd:L.target.selectionEnd}})),M(L)}),(d=this.data.actions)!=null&&d.Keystroke&&i.addEventListener("beforeinput",L=>{var ht;let{data:j,target:B}=L,{value:Q,selectionStart:nt,selectionEnd:rt}=B,ot=nt,tt=rt;switch(L.inputType){case"deleteWordBackward":{let ct=Q.substring(0,nt).match(/\w*[^\w]*$/);ct&&(ot-=ct[0].length);break}case"deleteWordForward":{let ct=Q.substring(nt).match(/^[^\w]*\w*/);ct&&(tt+=ct[0].length);break}case"deleteContentBackward":nt===rt&&(ot-=1);break;case"deleteContentForward":nt===rt&&(tt+=1);break}L.preventDefault(),(ht=this.linkService.eventBus)==null||ht.dispatch("dispatcheventinsandbox",{source:this,detail:{id:n,name:"Keystroke",value:Q,change:j||"",willCommit:!1,selStart:ot,selEnd:tt}})}),this._setEventListeners(i,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],L=>L.target.value)}if(D&&i.addEventListener("blur",D),this.data.maxLen!==null&&(i.maxLength=this.data.maxLen),this.data.comb){let L=(this.data.rect[2]-this.data.rect[0])/this.data.maxLen;i.classList.add("comb"),i.style.letterSpacing=`calc(${L}px - 1ch)`}}else i=document.createElement("div"),i.textContent=this.data.fieldValue,i.style.verticalAlign="middle",i.style.display="table-cell";return this._setTextStyle(i),this._setBackgroundColor(i),this._setDefaultPropertiesFromJS(i),this.container.appendChild(i),this.container}_setTextStyle(t){let n=["left","center","right"],{fontSize:i,fontColor:d}=this.data.defaultAppearanceData,h=t.style;i&&(h.fontSize=`${i}px`),h.color=c.Util.makeHexColor(d[0],d[1],d[2]),this.data.textAlignment!==null&&(h.textAlign=n[this.data.textAlignment])}}class g extends u{constructor(t){super(t,{isRenderable:t.renderForms})}render(){let t=this.annotationStorage,n=this.data,i=n.id,d=t.getValue(i,{value:n.exportValue===n.fieldValue}).value;typeof d=="string"&&(d=d!=="Off",t.setValue(i,{value:d})),this.container.className="buttonWidgetAnnotation checkBox";let h=document.createElement("input");return m.add(h),h.disabled=n.readOnly,h.type="checkbox",h.name=n.fieldName,d&&h.setAttribute("checked",!0),h.setAttribute("id",i),h.setAttribute("exportValue",n.exportValue),h.tabIndex=F,h.addEventListener("change",f=>{let{name:E,checked:D}=f.target;for(let M of this._getElementsByName(E,i)){let L=D&&M.exportValue===n.exportValue;M.domElement&&(M.domElement.checked=L),t.setValue(M.id,{value:L})}t.setValue(i,{value:D})}),h.addEventListener("resetform",f=>{let E=n.defaultFieldValue||"Off";f.target.checked=E===n.exportValue}),this.enableScripting&&this.hasJSActions&&(h.addEventListener("updatefromsandbox",f=>{let E={value(D){D.target.checked=D.detail.value!=="Off",t.setValue(i,{value:D.target.checked})}};this._dispatchEventFromSandbox(E,f)}),this._setEventListeners(h,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],f=>f.target.checked)),this._setBackgroundColor(h),this._setDefaultPropertiesFromJS(h),this.container.appendChild(h),this.container}}class b extends u{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.className="buttonWidgetAnnotation radioButton";let t=this.annotationStorage,n=this.data,i=n.id,d=t.getValue(i,{value:n.fieldValue===n.buttonValue}).value;typeof d=="string"&&(d=d!==n.buttonValue,t.setValue(i,{value:d}));let h=document.createElement("input");if(m.add(h),h.disabled=n.readOnly,h.type="radio",h.name=n.fieldName,d&&h.setAttribute("checked",!0),h.setAttribute("id",i),h.tabIndex=F,h.addEventListener("change",f=>{let{name:E,checked:D}=f.target;for(let M of this._getElementsByName(E,i))t.setValue(M.id,{value:!1});t.setValue(i,{value:D})}),h.addEventListener("resetform",f=>{let E=n.defaultFieldValue;f.target.checked=E!=null&&E===n.buttonValue}),this.enableScripting&&this.hasJSActions){let f=n.buttonValue;h.addEventListener("updatefromsandbox",E=>{let D={value:M=>{let L=f===M.detail.value;for(let j of this._getElementsByName(M.target.name)){let B=L&&j.id===i;j.domElement&&(j.domElement.checked=B),t.setValue(j.id,{value:B})}}};this._dispatchEventFromSandbox(D,E)}),this._setEventListeners(h,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],E=>E.target.checked)}return this._setBackgroundColor(h),this._setDefaultPropertiesFromJS(h),this.container.appendChild(h),this.container}}class y extends A{constructor(t){super(t,{ignoreBorder:t.data.hasAppearance})}render(){let t=super.render();return t.className="buttonWidgetAnnotation pushButton",this.data.alternativeText&&(t.title=this.data.alternativeText),this._setDefaultPropertiesFromJS(t),t}}class S extends u{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.className="choiceWidgetAnnotation";let t=this.annotationStorage,n=this.data.id,i=t.getValue(n,{value:this.data.fieldValue}),{fontSize:d}=this.data.defaultAppearanceData;d||(d=9);let h=`calc(${d}px * var(--zoom-factor))`,f=document.createElement("select");m.add(f),f.disabled=this.data.readOnly,f.name=this.data.fieldName,f.setAttribute("id",n),f.tabIndex=F,f.style.fontSize=`${d}px`,this.data.combo||(f.size=this.data.options.length,this.data.multiSelect&&(f.multiple=!0)),f.addEventListener("resetform",M=>{let L=this.data.defaultFieldValue;for(let j of f.options)j.selected=j.value===L});for(let M of this.data.options){let L=document.createElement("option");L.textContent=M.displayValue,L.value=M.exportValue,this.data.combo&&(L.style.fontSize=h),i.value.includes(M.exportValue)&&L.setAttribute("selected",!0),f.appendChild(L)}let E=(M,L)=>{let j=L?"value":"textContent",B=M.target.options;return M.target.multiple?Array.prototype.filter.call(B,Q=>Q.selected).map(Q=>Q[j]):B.selectedIndex===-1?null:B[B.selectedIndex][j]},D=M=>{let L=M.target.options;return Array.prototype.map.call(L,j=>({displayValue:j.textContent,exportValue:j.value}))};return this.enableScripting&&this.hasJSActions?(f.addEventListener("updatefromsandbox",M=>{let L={value(j){let B=j.detail.value,Q=new Set(Array.isArray(B)?B:[B]);for(let nt of f.options)nt.selected=Q.has(nt.value);t.setValue(n,{value:E(j,!0)})},multipleSelection(j){f.multiple=!0},remove(j){let B=f.options,Q=j.detail.remove;B[Q].selected=!1,f.remove(Q),B.length>0&&Array.prototype.findIndex.call(B,rt=>rt.selected)===-1&&(B[0].selected=!0),t.setValue(n,{value:E(j,!0),items:D(j)})},clear(j){for(;f.length!==0;)f.remove(0);t.setValue(n,{value:null,items:[]})},insert(j){let{index:B,displayValue:Q,exportValue:nt}=j.detail.insert,rt=document.createElement("option");rt.textContent=Q,rt.value=nt,f.insertBefore(rt,f.children[B]),t.setValue(n,{value:E(j,!0),items:D(j)})},items(j){let{items:B}=j.detail;for(;f.length!==0;)f.remove(0);for(let Q of B){let{displayValue:nt,exportValue:rt}=Q,ot=document.createElement("option");ot.textContent=nt,ot.value=rt,f.appendChild(ot)}f.options.length>0&&(f.options[0].selected=!0),t.setValue(n,{value:E(j,!0),items:D(j)})},indices(j){let B=new Set(j.detail.indices);for(let Q of j.target.options)Q.selected=B.has(Q.index);t.setValue(n,{value:E(j,!0)})},editable(j){j.target.disabled=!j.detail.editable}};this._dispatchEventFromSandbox(L,M)}),f.addEventListener("input",M=>{var B;let L=E(M,!0),j=E(M,!1);t.setValue(n,{value:L}),(B=this.linkService.eventBus)==null||B.dispatch("dispatcheventinsandbox",{source:this,detail:{id:n,name:"Keystroke",value:j,changeEx:L,willCommit:!0,commitKey:1,keyDown:!1}})}),this._setEventListeners(f,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"]],M=>M.target.checked)):f.addEventListener("input",function(M){t.setValue(n,{value:E(M,!0)})}),this._setBackgroundColor(f),this._setDefaultPropertiesFromJS(f),this.container.appendChild(f),this.container}}class e extends R{constructor(t){var i,d,h;let n=!!(((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n})}render(){let t=["Line","Square","Circle","PolyLine","Polygon","Ink"];if(this.container.className="popupAnnotation",t.includes(this.data.parentType))return this.container;let n=`[data-annotation-id="${this.data.parentId}"]`,i=this.layer.querySelectorAll(n);if(i.length===0)return this.container;let d=new a({container:this.container,trigger:Array.from(i),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText}),h=this.page,f=c.Util.normalizeRect([this.data.parentRect[0],h.view[3]-this.data.parentRect[1]+h.view[1],this.data.parentRect[2],h.view[3]-this.data.parentRect[3]+h.view[1]]),E=f[0]+this.data.parentRect[2]-this.data.parentRect[0],D=f[1];return this.container.style.transformOrigin=`${-E}px ${-D}px`,this.container.style.left=`${E}px`,this.container.style.top=`${D}px`,this.container.appendChild(d.render()),this.container}}class a{constructor(t){this.container=t.container,this.trigger=t.trigger,this.color=t.color,this.titleObj=t.titleObj,this.modificationDate=t.modificationDate,this.contentsObj=t.contentsObj,this.richText=t.richText,this.hideWrapper=t.hideWrapper||!1,this.pinned=!1}render(){var E,D;let n=document.createElement("div");n.className="popupWrapper",this.hideElement=this.hideWrapper?n:this.container,this.hideElement.hidden=!0;let i=document.createElement("div");i.className="popup";let d=this.color;if(d){let M=.7*(255-d[0])+d[0],L=.7*(255-d[1])+d[1],j=.7*(255-d[2])+d[2];i.style.backgroundColor=c.Util.makeHexColor(M|0,L|0,j|0)}let h=document.createElement("h1");h.dir=this.titleObj.dir,h.textContent=this.titleObj.str,i.appendChild(h);let f=K.PDFDateString.toDateObject(this.modificationDate);if(f){let M=document.createElement("span");M.className="popupDate",M.textContent="{{date}}, {{time}}",M.dataset.l10nId="annotation_date_string",M.dataset.l10nArgs=JSON.stringify({date:f.toLocaleDateString(),time:f.toLocaleTimeString()}),i.appendChild(M)}if(((E=this.richText)==null?void 0:E.str)&&(!((D=this.contentsObj)!=null&&D.str)||this.contentsObj.str===this.richText.str))U.XfaLayer.render({xfaHtml:this.richText.html,intent:"richText",div:i}),i.lastChild.className="richText popupContent";else{let M=this._formatContents(this.contentsObj);i.appendChild(M)}Array.isArray(this.trigger)||(this.trigger=[this.trigger]);for(let M of this.trigger)M.addEventListener("click",this._toggle.bind(this)),M.addEventListener("mouseover",this._show.bind(this,!1)),M.addEventListener("mouseout",this._hide.bind(this,!1));return i.addEventListener("click",this._hide.bind(this,!0)),n.appendChild(i),n}_formatContents({str:t,dir:n}){let i=document.createElement("p");i.className="popupContent",i.dir=n;let d=t.split(/(?:\r\n?|\n)/);for(let h=0,f=d.length;h<f;++h){let E=d[h];i.appendChild(document.createTextNode(E)),h<f-1&&i.appendChild(document.createElement("br"))}return i}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(t=!1){t&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex+=1)}_hide(t=!0){t&&(this.pinned=!1),!this.hideElement.hidden&&!this.pinned&&(this.hideElement.hidden=!0,this.container.style.zIndex-=1)}}class _ extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0})}render(){return this.container.className="freeTextAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class T extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0})}render(){this.container.className="lineAnnotation";let t=this.data,{width:n,height:i}=x(t.rect),d=this.svgFactory.create(n,i),h=this.svgFactory.createElement("svg:line");return h.setAttribute("x1",t.rect[2]-t.lineCoordinates[0]),h.setAttribute("y1",t.rect[3]-t.lineCoordinates[1]),h.setAttribute("x2",t.rect[2]-t.lineCoordinates[2]),h.setAttribute("y2",t.rect[3]-t.lineCoordinates[3]),h.setAttribute("stroke-width",t.borderStyle.width||1),h.setAttribute("stroke","transparent"),h.setAttribute("fill","transparent"),d.appendChild(h),this.container.append(d),this._createPopup(h,t),this.container}}class C extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0})}render(){this.container.className="squareAnnotation";let t=this.data,{width:n,height:i}=x(t.rect),d=this.svgFactory.create(n,i),h=t.borderStyle.width,f=this.svgFactory.createElement("svg:rect");return f.setAttribute("x",h/2),f.setAttribute("y",h/2),f.setAttribute("width",n-h),f.setAttribute("height",i-h),f.setAttribute("stroke-width",h||1),f.setAttribute("stroke","transparent"),f.setAttribute("fill","transparent"),d.appendChild(f),this.container.append(d),this._createPopup(f,t),this.container}}class P extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0})}render(){this.container.className="circleAnnotation";let t=this.data,{width:n,height:i}=x(t.rect),d=this.svgFactory.create(n,i),h=t.borderStyle.width,f=this.svgFactory.createElement("svg:ellipse");return f.setAttribute("cx",n/2),f.setAttribute("cy",i/2),f.setAttribute("rx",n/2-h/2),f.setAttribute("ry",i/2-h/2),f.setAttribute("stroke-width",h||1),f.setAttribute("stroke","transparent"),f.setAttribute("fill","transparent"),d.appendChild(f),this.container.append(d),this._createPopup(f,t),this.container}}class w extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;let t=this.data,{width:n,height:i}=x(t.rect),d=this.svgFactory.create(n,i),h=[];for(let E of t.vertices){let D=E.x-t.rect[0],M=t.rect[3]-E.y;h.push(D+","+M)}h=h.join(" ");let f=this.svgFactory.createElement(this.svgElementName);return f.setAttribute("points",h),f.setAttribute("stroke-width",t.borderStyle.width||1),f.setAttribute("stroke","transparent"),f.setAttribute("fill","transparent"),d.appendChild(f),this.container.append(d),this._createPopup(f,t),this.container}}class I extends w{constructor(t){super(t),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class X extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0})}render(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class W extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;let t=this.data,{width:n,height:i}=x(t.rect),d=this.svgFactory.create(n,i);for(let h of t.inkLists){let f=[];for(let D of h){let M=D.x-t.rect[0],L=t.rect[3]-D.y;f.push(`${M},${L}`)}f=f.join(" ");let E=this.svgFactory.createElement(this.svgElementName);E.setAttribute("points",f),E.setAttribute("stroke-width",t.borderStyle.width||1),E.setAttribute("stroke","transparent"),E.setAttribute("fill","transparent"),this._createPopup(E,t),d.appendChild(E)}return this.container.append(d),this.container}}class z extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.className="highlightAnnotation",this.container)}}class J extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.className="underlineAnnotation",this.container)}}class Z extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.className="squigglyAnnotation",this.container)}}class Y extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.className="strikeoutAnnotation",this.container)}}class et extends R{constructor(t){var i,d,h;let n=!!(t.data.hasPopup||((i=t.data.titleObj)==null?void 0:i.str)||((d=t.data.contentsObj)==null?void 0:d.str)||((h=t.data.richText)==null?void 0:h.str));super(t,{isRenderable:n,ignoreBorder:!0})}render(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class lt extends R{constructor(t){var d;super(t,{isRenderable:!0});let{filename:n,content:i}=this.data.file;this.filename=(0,K.getFilenameFromUrl)(n),this.content=i,(d=this.linkService.eventBus)==null||d.dispatch("fileattachmentannotation",{source:this,filename:n,content:i})}render(){var n,i;this.container.className="fileAttachmentAnnotation";let t=document.createElement("div");return t.style.height=this.container.style.height,t.style.width=this.container.style.width,t.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&(((n=this.data.titleObj)==null?void 0:n.str)||((i=this.data.contentsObj)==null?void 0:i.str)||this.data.richText)&&this._createPopup(t,this.data),this.container.appendChild(t),this.container}_download(){var t;(t=this.downloadManager)==null||t.openOrDownloadData(this.container,this.content,this.filename)}}class st{static render(t){let n=[],i=[];for(let h of t.annotations){if(!h)continue;let{width:f,height:E}=x(h.rect);if(!(f<=0||E<=0)){if(h.annotationType===c.AnnotationType.POPUP){i.push(h);continue}n.push(h)}}i.length&&n.push(...i);let d=t.div;for(let h of n){let f=k.create({data:h,layer:d,page:t.page,viewport:t.viewport,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderForms:t.renderForms!==!1,svgFactory:new K.DOMSVGFactory,annotationStorage:t.annotationStorage||new q.AnnotationStorage,enableScripting:t.enableScripting,hasJSActions:t.hasJSActions,fieldObjects:t.fieldObjects,mouseState:t.mouseState||{isDown:!1}});if(f.isRenderable){let E=f.render();if(h.hidden&&(E.style.visibility="hidden"),Array.isArray(E))for(let D of E)d.appendChild(D);else f instanceof e?d.prepend(E):d.appendChild(E)}}It(this,v,Kt).call(this,d,t.annotationCanvasMap)}static update(t){let{page:n,viewport:i,annotations:d,annotationCanvasMap:h,div:f}=t,E=i.transform,D=`matrix(${E.join(",")})`,M,L;for(let j of d){let B=f.querySelectorAll(`[data-annotation-id="${j.id}"]`);if(B)for(let Q of B)if(j.hasOwnCanvas){let nt=c.Util.normalizeRect([j.rect[0],n.view[3]-j.rect[1]+n.view[1],j.rect[2],n.view[3]-j.rect[3]+n.view[1]]);if(!L){M=Math.abs(E[0]||E[1]);let tt=E.slice();for(let ht=0;ht<4;ht++)tt[ht]=Math.sign(tt[ht]);L=`matrix(${tt.join(",")})`}let rt=nt[0]*M,ot=nt[1]*M;Q.style.left=`${rt}px`,Q.style.top=`${ot}px`,Q.style.transformOrigin=`${-rt}px ${-ot}px`,Q.style.transform=L}else Q.style.transform=D}It(this,v,Kt).call(this,f,h),f.hidden=!1}}v=new WeakSet,Kt=function(t,n){if(!!n){for(let[i,d]of n){let h=t.querySelector(`[data-annotation-id="${i}"]`);if(!h)continue;let{firstChild:f}=h;f.nodeName==="CANVAS"?h.replaceChild(d,f):h.insertBefore(d,f)}n.clear()}},xt(st,v),p.AnnotationLayer=st},($,p)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.ColorConverters=void 0;function H(K){return Math.floor(Math.max(0,Math.min(1,K))*255).toString(16).padStart(2,"0")}class c{static CMYK_G([q,G,U,F]){return["G",1-Math.min(1,.3*q+.59*U+.11*G+F)]}static G_CMYK([q]){return["CMYK",0,0,0,1-q]}static G_RGB([q]){return["RGB",q,q,q]}static G_HTML([q]){let G=H(q);return`#${G}${G}${G}`}static RGB_G([q,G,U]){return["G",.3*q+.59*G+.11*U]}static RGB_HTML([q,G,U]){let F=H(q),m=H(G),x=H(U);return`#${F}${m}${x}`}static T_HTML(){return"#00000000"}static CMYK_RGB([q,G,U,F]){return["RGB",1-Math.min(1,q+F),1-Math.min(1,U+F),1-Math.min(1,G+F)]}static CMYK_HTML(q){return this.RGB_HTML(this.CMYK_RGB(q))}static RGB_CMYK([q,G,U]){let F=1-q,m=1-G,x=1-U,k=Math.min(F,m,x);return["CMYK",F,m,x,k]}}p.ColorConverters=c},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.XfaLayer=void 0;var c=H(18);class K{static setupStorage(G,U,F,m,x){let k=m.getValue(U,{value:null});switch(F.name){case"textarea":if(k.value!==null&&(G.textContent=k.value),x==="print")break;G.addEventListener("input",R=>{m.setValue(U,{value:R.target.value})});break;case"input":if(F.attributes.type==="radio"||F.attributes.type==="checkbox"){if(k.value===F.attributes.xfaOn?G.setAttribute("checked",!0):k.value===F.attributes.xfaOff&&G.removeAttribute("checked"),x==="print")break;G.addEventListener("change",R=>{m.setValue(U,{value:R.target.checked?R.target.getAttribute("xfaOn"):R.target.getAttribute("xfaOff")})})}else{if(k.value!==null&&G.setAttribute("value",k.value),x==="print")break;G.addEventListener("input",R=>{m.setValue(U,{value:R.target.value})})}break;case"select":if(k.value!==null)for(let R of F.children)R.attributes.value===k.value&&(R.attributes.selected=!0);G.addEventListener("input",R=>{let A=R.target.options,o=A.selectedIndex===-1?"":A[A.selectedIndex].value;m.setValue(U,{value:o})});break}}static setAttributes({html:G,element:U,storage:F=null,intent:m,linkService:x}){let{attributes:k}=U,R=G instanceof HTMLAnchorElement;k.type==="radio"&&(k.name=`${k.name}-${m}`);for(let[A,o]of Object.entries(k))if(!(o==null||A==="dataId"))if(A!=="style")if(A==="textContent")G.textContent=o;else if(A==="class")o.length&&G.setAttribute(A,o.join(" "));else{if(R&&(A==="href"||A==="newWindow"))continue;G.setAttribute(A,o)}else Object.assign(G.style,o);R&&x.addLinkAttributes(G,k.href,k.newWindow),F&&k.dataId&&this.setupStorage(G,k.dataId,U,F)}static render(G){var u;let U=G.annotationStorage,F=G.linkService,m=G.xfaHtml,x=G.intent||"display",k=document.createElement(m.name);m.attributes&&this.setAttributes({html:k,element:m,intent:x,linkService:F});let R=[[m,-1,k]],A=G.div;if(A.appendChild(k),G.viewport){let r=`matrix(${G.viewport.transform.join(",")})`;A.style.transform=r}x!=="richText"&&A.setAttribute("class","xfaLayer xfaFont");let o=[];for(;R.length>0;){let[r,g,b]=R[R.length-1];if(g+1===r.children.length){R.pop();continue}let y=r.children[++R[R.length-1][1]];if(y===null)continue;let{name:S}=y;if(S==="#text"){let a=document.createTextNode(y.value);o.push(a),b.appendChild(a);continue}let e;if((u=y==null?void 0:y.attributes)!=null&&u.xmlns?e=document.createElementNS(y.attributes.xmlns,S):e=document.createElement(S),b.appendChild(e),y.attributes&&this.setAttributes({html:e,element:y,storage:U,intent:x,linkService:F}),y.children&&y.children.length>0)R.push([y,-1,e]);else if(y.value){let a=document.createTextNode(y.value);c.XfaText.shouldBuildText(S)&&o.push(a),e.appendChild(a)}}for(let r of A.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))r.setAttribute("readOnly",!0);return{textDivs:o}}static update(G){let U=`matrix(${G.viewport.transform.join(",")})`;G.div.style.transform=U,G.div.hidden=!1}}p.XfaLayer=K},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.renderTextLayer=g;var c=H(1);let K=1e5,q=30,G=.8,U=new Map,F=/^\s+$/g;function m(b,y){let S=U.get(b);if(S)return S;y.save(),y.font=`${q}px ${b}`;let e=y.measureText(""),a=e.fontBoundingBoxAscent,_=Math.abs(e.fontBoundingBoxDescent);if(a){y.restore();let C=a/(a+_);return U.set(b,C),C}y.strokeStyle="red",y.clearRect(0,0,q,q),y.strokeText("g",0,0);let T=y.getImageData(0,0,q,q).data;_=0;for(let C=T.length-1-3;C>=0;C-=4)if(T[C]>0){_=Math.ceil(C/4/q);break}y.clearRect(0,0,q,q),y.strokeText("A",0,q),T=y.getImageData(0,0,q,q).data,a=0;for(let C=0,P=T.length;C<P;C+=4)if(T[C]>0){a=q-Math.floor(C/4/q);break}if(y.restore(),a){let C=a/(a+_);return U.set(b,C),C}return U.set(b,G),G}function x(b,y,S,e){let a=document.createElement("span"),_=b._enhanceTextSelection?{angle:0,canvasWidth:0,hasText:y.str!=="",hasEOL:y.hasEOL,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1}:{angle:0,canvasWidth:0,hasText:y.str!=="",hasEOL:y.hasEOL};b._textDivs.push(a);let T=c.Util.transform(b._viewport.transform,y.transform),C=Math.atan2(T[1],T[0]),P=S[y.fontName];P.vertical&&(C+=Math.PI/2);let w=Math.hypot(T[2],T[3]),I=w*m(P.fontFamily,e),X,W;C===0?(X=T[4],W=T[5]-I):(X=T[4]+I*Math.sin(C),W=T[5]-I*Math.cos(C)),a.style.left=`${X}px`,a.style.top=`${W}px`,a.style.fontSize=`${w}px`,a.style.fontFamily=P.fontFamily,a.setAttribute("role","presentation"),a.textContent=y.str,a.dir=y.dir,b._fontInspectorEnabled&&(a.dataset.fontName=y.fontName),C!==0&&(_.angle=C*(180/Math.PI));let z=!1;if(y.str.length>1||b._enhanceTextSelection&&F.test(y.str))z=!0;else if(y.str!==" "&&y.transform[0]!==y.transform[3]){let J=Math.abs(y.transform[0]),Z=Math.abs(y.transform[3]);J!==Z&&Math.max(J,Z)/Math.min(J,Z)>1.5&&(z=!0)}if(z&&(P.vertical?_.canvasWidth=y.height*b._viewport.scale:_.canvasWidth=y.width*b._viewport.scale),b._textDivProperties.set(a,_),b._textContentStream&&b._layoutText(a),b._enhanceTextSelection&&_.hasText){let J=1,Z=0;C!==0&&(J=Math.cos(C),Z=Math.sin(C));let Y=(P.vertical?y.height:y.width)*b._viewport.scale,et=w,lt,st;C!==0?(lt=[J,Z,-Z,J,X,W],st=c.Util.getAxialAlignedBoundingBox([0,0,Y,et],lt)):st=[X,W,X+Y,W+et],b._bounds.push({left:st[0],top:st[1],right:st[2],bottom:st[3],div:a,size:[Y,et],m:lt})}}function k(b){if(b._canceled)return;let y=b._textDivs,S=b._capability,e=y.length;if(e>K){b._renderingDone=!0,S.resolve();return}if(!b._textContentStream)for(let a=0;a<e;a++)b._layoutText(y[a]);b._renderingDone=!0,S.resolve()}function R(b,y,S){let e=0;for(let a=0;a<S;a++){let _=b[y++];_>0&&(e=e?Math.min(_,e):_)}return e}function A(b){let y=b._bounds,S=b._viewport,e=o(S.width,S.height,y);for(let a=0;a<e.length;a++){let _=y[a].div,T=b._textDivProperties.get(_);if(T.angle===0){T.paddingLeft=y[a].left-e[a].left,T.paddingTop=y[a].top-e[a].top,T.paddingRight=e[a].right-y[a].right,T.paddingBottom=e[a].bottom-y[a].bottom,b._textDivProperties.set(_,T);continue}let C=e[a],P=y[a],w=P.m,I=w[0],X=w[1],W=[[0,0],[0,P.size[1]],[P.size[0],0],P.size],z=new Float64Array(64);for(let Z=0,Y=W.length;Z<Y;Z++){let et=c.Util.applyTransform(W[Z],w);z[Z+0]=I&&(C.left-et[0])/I,z[Z+4]=X&&(C.top-et[1])/X,z[Z+8]=I&&(C.right-et[0])/I,z[Z+12]=X&&(C.bottom-et[1])/X,z[Z+16]=X&&(C.left-et[0])/-X,z[Z+20]=I&&(C.top-et[1])/I,z[Z+24]=X&&(C.right-et[0])/-X,z[Z+28]=I&&(C.bottom-et[1])/I,z[Z+32]=I&&(C.left-et[0])/-I,z[Z+36]=X&&(C.top-et[1])/-X,z[Z+40]=I&&(C.right-et[0])/-I,z[Z+44]=X&&(C.bottom-et[1])/-X,z[Z+48]=X&&(C.left-et[0])/X,z[Z+52]=I&&(C.top-et[1])/-I,z[Z+56]=X&&(C.right-et[0])/X,z[Z+60]=I&&(C.bottom-et[1])/-I}let J=1+Math.min(Math.abs(I),Math.abs(X));T.paddingLeft=R(z,32,16)/J,T.paddingTop=R(z,48,16)/J,T.paddingRight=R(z,0,16)/J,T.paddingBottom=R(z,16,16)/J,b._textDivProperties.set(_,T)}}function o(b,y,S){let e=S.map(function(_,T){return{x1:_.left,y1:_.top,x2:_.right,y2:_.bottom,index:T,x1New:void 0,x2New:void 0}});u(b,e);let a=new Array(S.length);for(let _ of e){let T=_.index;a[T]={left:_.x1New,top:0,right:_.x2New,bottom:0}}S.map(function(_,T){let C=a[T],P=e[T];P.x1=_.top,P.y1=b-C.right,P.x2=_.bottom,P.y2=b-C.left,P.index=T,P.x1New=void 0,P.x2New=void 0}),u(y,e);for(let _ of e){let T=_.index;a[T].top=_.x1New,a[T].bottom=_.x2New}return a}function u(b,y){y.sort(function(a,_){return a.x1-_.x1||a.index-_.index});let e=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];for(let a of y){let _=0;for(;_<e.length&&e[_].end<=a.y1;)_++;let T=e.length-1;for(;T>=0&&e[T].start>=a.y2;)T--;let C,P,w,I,X=-1/0;for(w=_;w<=T;w++){C=e[w],P=C.boundary;let J;P.x2>a.x1?J=P.index>a.index?P.x1New:a.x1:P.x2New===void 0?J=(P.x2+a.x1)/2:J=P.x2New,J>X&&(X=J)}for(a.x1New=X,w=_;w<=T;w++)C=e[w],P=C.boundary,P.x2New===void 0?P.x2>a.x1?P.index>a.index&&(P.x2New=P.x2):P.x2New=X:P.x2New>X&&(P.x2New=Math.max(X,P.x2));let W=[],z=null;for(w=_;w<=T;w++){C=e[w],P=C.boundary;let J=P.x2>a.x2?P:a;z===J?W[W.length-1].end=C.end:(W.push({start:C.start,end:C.end,boundary:J}),z=J)}for(e[_].start<a.y1&&(W[0].start=a.y1,W.unshift({start:e[_].start,end:a.y1,boundary:e[_].boundary})),a.y2<e[T].end&&(W[W.length-1].end=a.y2,W.push({start:a.y2,end:e[T].end,boundary:e[T].boundary})),w=_;w<=T;w++){if(C=e[w],P=C.boundary,P.x2New!==void 0)continue;let J=!1;for(I=_-1;!J&&I>=0&&e[I].start>=P.y1;I--)J=e[I].boundary===P;for(I=T+1;!J&&I<e.length&&e[I].end<=P.y2;I++)J=e[I].boundary===P;for(I=0;!J&&I<W.length;I++)J=W[I].boundary===P;J||(P.x2New=X)}Array.prototype.splice.apply(e,[_,T-_+1].concat(W))}for(let a of e){let _=a.boundary;_.x2New===void 0&&(_.x2New=Math.max(b,_.x2))}}class r{constructor({textContent:y,textContentStream:S,container:e,viewport:a,textDivs:_,textContentItemsStr:T,enhanceTextSelection:C}){var P;this._textContent=y,this._textContentStream=S,this._container=e,this._document=e.ownerDocument,this._viewport=a,this._textDivs=_||[],this._textContentItemsStr=T||[],this._enhanceTextSelection=!!C,this._fontInspectorEnabled=!!((P=globalThis.FontInspector)!=null&&P.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,c.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._capability.promise.finally(()=>{this._enhanceTextSelection||(this._textDivProperties=null),this._layoutTextCtx&&(this._layoutTextCtx.canvas.width=0,this._layoutTextCtx.canvas.height=0,this._layoutTextCtx=null)}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new c.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._renderTimer!==null&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))}_processItems(y,S){for(let e=0,a=y.length;e<a;e++){if(y[e].str===void 0){if(y[e].type==="beginMarkedContentProps"||y[e].type==="beginMarkedContent"){let _=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),y[e].id!==null&&this._container.setAttribute("id",`${y[e].id}`),_.appendChild(this._container)}else y[e].type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(y[e].str),x(this,y[e],S,this._layoutTextCtx)}}_layoutText(y){let S=this._textDivProperties.get(y),e="";if(S.canvasWidth!==0&&S.hasText){let{fontSize:a,fontFamily:_}=y.style;(a!==this._layoutTextLastFontSize||_!==this._layoutTextLastFontFamily)&&(this._layoutTextCtx.font=`${a} ${_}`,this._layoutTextLastFontSize=a,this._layoutTextLastFontFamily=_);let{width:T}=this._layoutTextCtx.measureText(y.textContent);if(T>0){let C=S.canvasWidth/T;this._enhanceTextSelection&&(S.scale=C),e=`scaleX(${C})`}}if(S.angle!==0&&(e=`rotate(${S.angle}deg) ${e}`),e.length>0&&(this._enhanceTextSelection&&(S.originalTransform=e),y.style.transform=e),S.hasText&&this._container.appendChild(y),S.hasEOL){let a=document.createElement("br");a.setAttribute("role","presentation"),this._container.appendChild(a)}}_render(y=0){let S=(0,c.createPromiseCapability)(),e=Object.create(null),a=this._document.createElement("canvas");if(a.height=a.width=q,this._layoutTextCtx=a.getContext("2d",{alpha:!1}),this._textContent){let _=this._textContent.items,T=this._textContent.styles;this._processItems(_,T),S.resolve()}else if(this._textContentStream){let _=()=>{this._reader.read().then(({value:T,done:C})=>{if(C){S.resolve();return}Object.assign(e,T.styles),this._processItems(T.items,e),_()},S.reject)};this._reader=this._textContentStream.getReader(),_()}else throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');S.promise.then(()=>{e=null,y?this._renderTimer=setTimeout(()=>{k(this),this._renderTimer=null},y):k(this)},this._capability.reject)}expandTextDivs(y=!1){if(!this._enhanceTextSelection||!this._renderingDone)return;this._bounds!==null&&(A(this),this._bounds=null);let S=[],e=[];for(let a=0,_=this._textDivs.length;a<_;a++){let T=this._textDivs[a],C=this._textDivProperties.get(T);!C.hasText||(y?(S.length=0,e.length=0,C.originalTransform&&S.push(C.originalTransform),C.paddingTop>0?(e.push(`${C.paddingTop}px`),S.push(`translateY(${-C.paddingTop}px)`)):e.push(0),C.paddingRight>0?e.push(`${C.paddingRight/C.scale}px`):e.push(0),C.paddingBottom>0?e.push(`${C.paddingBottom}px`):e.push(0),C.paddingLeft>0?(e.push(`${C.paddingLeft/C.scale}px`),S.push(`translateX(${-C.paddingLeft/C.scale}px)`)):e.push(0),T.style.padding=e.join(" "),S.length&&(T.style.transform=S.join(" "))):(T.style.padding=null,T.style.transform=C.originalTransform))}}}function g(b){let y=new r({textContent:b.textContent,textContentStream:b.textContentStream,container:b.container,viewport:b.viewport,textDivs:b.textDivs,textContentItemsStr:b.textContentItemsStr,enhanceTextSelection:b.enhanceTextSelection});return y._render(b.timeout),y}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.SVGGraphics=void 0;var c=H(1),K=H(5),q=H(3);let G=class{constructor(){(0,c.unreachable)("Not implemented: SVGGraphics")}};p.SVGGraphics=G;{let u=function(e){let a=[],_=[];for(let T of e){if(T.fn==="save"){a.push({fnId:92,fn:"group",items:[]}),_.push(a),a=a[a.length-1].items;continue}T.fn==="restore"?a=_.pop():a.push(T)}return a},r=function(e){if(Number.isInteger(e))return e.toString();let a=e.toFixed(10),_=a.length-1;if(a[_]!=="0")return a;do _--;while(a[_]==="0");return a.substring(0,a[_]==="."?_:_+1)},g=function(e){if(e[4]===0&&e[5]===0){if(e[1]===0&&e[2]===0)return e[0]===1&&e[3]===1?"":`scale(${r(e[0])} ${r(e[3])})`;if(e[0]===e[3]&&e[1]===-e[2]){let a=Math.acos(e[0])*180/Math.PI;return`rotate(${r(a)})`}}else if(e[0]===1&&e[1]===0&&e[2]===0&&e[3]===1)return`translate(${r(e[4])} ${r(e[5])})`;return`matrix(${r(e[0])} ${r(e[1])} ${r(e[2])} ${r(e[3])} ${r(e[4])} ${r(e[5])})`},U={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},F="http://www.w3.org/XML/1998/namespace",m="http://www.w3.org/1999/xlink",x=["butt","round","square"],k=["miter","round","bevel"],R=function(e,a="",_=!1){if(URL.createObjectURL&&typeof Blob<"u"&&!_)return URL.createObjectURL(new Blob([e],{type:a}));let T="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",C=`data:${a};base64,`;for(let P=0,w=e.length;P<w;P+=3){let I=e[P]&255,X=e[P+1]&255,W=e[P+2]&255,z=I>>2,J=(I&3)<<4|X>>4,Z=P+1<w?(X&15)<<2|W>>6:64,Y=P+2<w?W&63:64;C+=T[z]+T[J]+T[Z]+T[Y]}return C},A=function(){let e=new Uint8Array([137,80,78,71,13,10,26,10]),a=12,_=new Int32Array(256);for(let W=0;W<256;W++){let z=W;for(let J=0;J<8;J++)z&1?z=3988292384^z>>1&2147483647:z=z>>1&2147483647;_[W]=z}function T(W,z,J){let Z=-1;for(let Y=z;Y<J;Y++){let et=(Z^W[Y])&255,lt=_[et];Z=Z>>>8^lt}return Z^-1}function C(W,z,J,Z){let Y=Z,et=z.length;J[Y]=et>>24&255,J[Y+1]=et>>16&255,J[Y+2]=et>>8&255,J[Y+3]=et&255,Y+=4,J[Y]=W.charCodeAt(0)&255,J[Y+1]=W.charCodeAt(1)&255,J[Y+2]=W.charCodeAt(2)&255,J[Y+3]=W.charCodeAt(3)&255,Y+=4,J.set(z,Y),Y+=z.length;let lt=T(J,Z+4,Y);J[Y]=lt>>24&255,J[Y+1]=lt>>16&255,J[Y+2]=lt>>8&255,J[Y+3]=lt&255}function P(W,z,J){let Z=1,Y=0;for(let et=z;et<J;++et)Z=(Z+(W[et]&255))%65521,Y=(Y+Z)%65521;return Y<<16|Z}function w(W){if(!q.isNodeJS)return I(W);try{let z;parseInt(process.versions.node)>=8?z=W:z=Buffer.from(W);let J=ee().deflateSync(z,{level:9});return J instanceof Uint8Array?J:new Uint8Array(J)}catch(z){(0,c.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+z)}return I(W)}function I(W){let z=W.length,J=65535,Z=Math.ceil(z/J),Y=new Uint8Array(2+z+Z*5+4),et=0;Y[et++]=120,Y[et++]=156;let lt=0;for(;z>J;)Y[et++]=0,Y[et++]=255,Y[et++]=255,Y[et++]=0,Y[et++]=0,Y.set(W.subarray(lt,lt+J),et),et+=J,lt+=J,z-=J;Y[et++]=1,Y[et++]=z&255,Y[et++]=z>>8&255,Y[et++]=~z&65535&255,Y[et++]=(~z&65535)>>8&255,Y.set(W.subarray(lt),et),et+=W.length-lt;let st=P(W,0,W.length);return Y[et++]=st>>24&255,Y[et++]=st>>16&255,Y[et++]=st>>8&255,Y[et++]=st&255,Y}function X(W,z,J,Z){let Y=W.width,et=W.height,lt,st,v,l=W.data;switch(z){case c.ImageKind.GRAYSCALE_1BPP:st=0,lt=1,v=Y+7>>3;break;case c.ImageKind.RGB_24BPP:st=2,lt=8,v=Y*3;break;case c.ImageKind.RGBA_32BPP:st=6,lt=8,v=Y*4;break;default:throw new Error("invalid format")}let s=new Uint8Array((1+v)*et),t=0,n=0;for(let D=0;D<et;++D)s[t++]=0,s.set(l.subarray(n,n+v),t),n+=v,t+=v;if(z===c.ImageKind.GRAYSCALE_1BPP&&Z){t=0;for(let D=0;D<et;D++){t++;for(let M=0;M<v;M++)s[t++]^=255}}let i=new Uint8Array([Y>>24&255,Y>>16&255,Y>>8&255,Y&255,et>>24&255,et>>16&255,et>>8&255,et&255,lt,st,0,0,0]),d=w(s),h=e.length+a*3+i.length+d.length,f=new Uint8Array(h),E=0;return f.set(e,E),E+=e.length,C("IHDR",i,f,E),E+=a+i.length,C("IDATA",d,f,E),E+=a+d.length,C("IEND",new Uint8Array(0),f,E),R(f,"image/png",J)}return function(z,J,Z){let Y=z.kind===void 0?c.ImageKind.GRAYSCALE_1BPP:z.kind;return X(z,Y,J,Z)}}();class o{constructor(){this.fontSizeScale=1,this.fontWeight=U.fontWeight,this.fontSize=0,this.textMatrix=c.IDENTITY_MATRIX,this.fontMatrix=c.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=c.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=U.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(a,_){this.x=a,this.y=_}}let b=0,y=0,S=0;p.SVGGraphics=G=class{constructor(e,a,_=!1){this.svgFactory=new K.DOMSVGFactory,this.current=new o,this.transformMatrix=c.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=e,this.objs=a,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!_,this._operatorIdMapping=[];for(let T in c.OPS)this._operatorIdMapping[c.OPS[T]]=T}save(){this.transformStack.push(this.transformMatrix);let e=this.current;this.extraStack.push(e),this.current=e.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(e){this.save(),this.executeOpTree(e),this.restore()}loadDependencies(e){let a=e.fnArray,_=e.argsArray;for(let T=0,C=a.length;T<C;T++)if(a[T]===c.OPS.dependency)for(let P of _[T]){let w=P.startsWith("g_")?this.commonObjs:this.objs,I=new Promise(X=>{w.get(P,X)});this.current.dependencies.push(I)}return Promise.all(this.current.dependencies)}transform(e,a,_,T,C,P){let w=[e,a,_,T,C,P];this.transformMatrix=c.Util.transform(this.transformMatrix,w),this.tgrp=null}getSVG(e,a){this.viewport=a;let _=this._initialize(a);return this.loadDependencies(e).then(()=>(this.transformMatrix=c.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(e)),_))}convertOpList(e){let a=this._operatorIdMapping,_=e.argsArray,T=e.fnArray,C=[];for(let P=0,w=T.length;P<w;P++){let I=T[P];C.push({fnId:I,fn:a[I],args:_[P]})}return u(C)}executeOpTree(e){for(let a of e){let _=a.fn,T=a.fnId,C=a.args;switch(T|0){case c.OPS.beginText:this.beginText();break;case c.OPS.dependency:break;case c.OPS.setLeading:this.setLeading(C);break;case c.OPS.setLeadingMoveText:this.setLeadingMoveText(C[0],C[1]);break;case c.OPS.setFont:this.setFont(C);break;case c.OPS.showText:this.showText(C[0]);break;case c.OPS.showSpacedText:this.showText(C[0]);break;case c.OPS.endText:this.endText();break;case c.OPS.moveText:this.moveText(C[0],C[1]);break;case c.OPS.setCharSpacing:this.setCharSpacing(C[0]);break;case c.OPS.setWordSpacing:this.setWordSpacing(C[0]);break;case c.OPS.setHScale:this.setHScale(C[0]);break;case c.OPS.setTextMatrix:this.setTextMatrix(C[0],C[1],C[2],C[3],C[4],C[5]);break;case c.OPS.setTextRise:this.setTextRise(C[0]);break;case c.OPS.setTextRenderingMode:this.setTextRenderingMode(C[0]);break;case c.OPS.setLineWidth:this.setLineWidth(C[0]);break;case c.OPS.setLineJoin:this.setLineJoin(C[0]);break;case c.OPS.setLineCap:this.setLineCap(C[0]);break;case c.OPS.setMiterLimit:this.setMiterLimit(C[0]);break;case c.OPS.setFillRGBColor:this.setFillRGBColor(C[0],C[1],C[2]);break;case c.OPS.setStrokeRGBColor:this.setStrokeRGBColor(C[0],C[1],C[2]);break;case c.OPS.setStrokeColorN:this.setStrokeColorN(C);break;case c.OPS.setFillColorN:this.setFillColorN(C);break;case c.OPS.shadingFill:this.shadingFill(C[0]);break;case c.OPS.setDash:this.setDash(C[0],C[1]);break;case c.OPS.setRenderingIntent:this.setRenderingIntent(C[0]);break;case c.OPS.setFlatness:this.setFlatness(C[0]);break;case c.OPS.setGState:this.setGState(C[0]);break;case c.OPS.fill:this.fill();break;case c.OPS.eoFill:this.eoFill();break;case c.OPS.stroke:this.stroke();break;case c.OPS.fillStroke:this.fillStroke();break;case c.OPS.eoFillStroke:this.eoFillStroke();break;case c.OPS.clip:this.clip("nonzero");break;case c.OPS.eoClip:this.clip("evenodd");break;case c.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case c.OPS.paintImageXObject:this.paintImageXObject(C[0]);break;case c.OPS.paintInlineImageXObject:this.paintInlineImageXObject(C[0]);break;case c.OPS.paintImageMaskXObject:this.paintImageMaskXObject(C[0]);break;case c.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(C[0],C[1]);break;case c.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case c.OPS.closePath:this.closePath();break;case c.OPS.closeStroke:this.closeStroke();break;case c.OPS.closeFillStroke:this.closeFillStroke();break;case c.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case c.OPS.nextLine:this.nextLine();break;case c.OPS.transform:this.transform(C[0],C[1],C[2],C[3],C[4],C[5]);break;case c.OPS.constructPath:this.constructPath(C[0],C[1]);break;case c.OPS.endPath:this.endPath();break;case 92:this.group(a.items);break;default:(0,c.warn)(`Unimplemented operator ${_}`);break}}}setWordSpacing(e){this.current.wordSpacing=e}setCharSpacing(e){this.current.charSpacing=e}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(e,a,_,T,C,P){let w=this.current;w.textMatrix=w.lineMatrix=[e,a,_,T,C,P],w.textMatrixScale=Math.hypot(e,a),w.x=w.lineX=0,w.y=w.lineY=0,w.xcoords=[],w.ycoords=[],w.tspan=this.svgFactory.createElement("svg:tspan"),w.tspan.setAttributeNS(null,"font-family",w.fontFamily),w.tspan.setAttributeNS(null,"font-size",`${r(w.fontSize)}px`),w.tspan.setAttributeNS(null,"y",r(-w.y)),w.txtElement=this.svgFactory.createElement("svg:text"),w.txtElement.appendChild(w.tspan)}beginText(){let e=this.current;e.x=e.lineX=0,e.y=e.lineY=0,e.textMatrix=c.IDENTITY_MATRIX,e.lineMatrix=c.IDENTITY_MATRIX,e.textMatrixScale=1,e.tspan=this.svgFactory.createElement("svg:tspan"),e.txtElement=this.svgFactory.createElement("svg:text"),e.txtgrp=this.svgFactory.createElement("svg:g"),e.xcoords=[],e.ycoords=[]}moveText(e,a){let _=this.current;_.x=_.lineX+=e,_.y=_.lineY+=a,_.xcoords=[],_.ycoords=[],_.tspan=this.svgFactory.createElement("svg:tspan"),_.tspan.setAttributeNS(null,"font-family",_.fontFamily),_.tspan.setAttributeNS(null,"font-size",`${r(_.fontSize)}px`),_.tspan.setAttributeNS(null,"y",r(-_.y))}showText(e){let a=this.current,_=a.font,T=a.fontSize;if(T===0)return;let C=a.fontSizeScale,P=a.charSpacing,w=a.wordSpacing,I=a.fontDirection,X=a.textHScale*I,W=_.vertical,z=W?1:-1,J=_.defaultVMetrics,Z=T*a.fontMatrix[0],Y=0;for(let st of e){if(st===null){Y+=I*w;continue}else if(typeof st=="number"){Y+=z*st*T/1e3;continue}let v=(st.isSpace?w:0)+P,l=st.fontChar,s,t,n=st.width;if(W){let d,h=st.vmetric||J;d=st.vmetric?h[1]:n*.5,d=-d*Z;let f=h[2]*Z;n=h?-h[0]:n,s=d/C,t=(Y+f)/C}else s=Y/C,t=0;(st.isInFont||_.missingFile)&&(a.xcoords.push(a.x+s),W&&a.ycoords.push(-a.y+t),a.tspan.textContent+=l);let i;W?i=n*Z-v*I:i=n*Z+v*I,Y+=i}a.tspan.setAttributeNS(null,"x",a.xcoords.map(r).join(" ")),W?a.tspan.setAttributeNS(null,"y",a.ycoords.map(r).join(" ")):a.tspan.setAttributeNS(null,"y",r(-a.y)),W?a.y-=Y:a.x+=Y*X,a.tspan.setAttributeNS(null,"font-family",a.fontFamily),a.tspan.setAttributeNS(null,"font-size",`${r(a.fontSize)}px`),a.fontStyle!==U.fontStyle&&a.tspan.setAttributeNS(null,"font-style",a.fontStyle),a.fontWeight!==U.fontWeight&&a.tspan.setAttributeNS(null,"font-weight",a.fontWeight);let et=a.textRenderingMode&c.TextRenderingMode.FILL_STROKE_MASK;if(et===c.TextRenderingMode.FILL||et===c.TextRenderingMode.FILL_STROKE?(a.fillColor!==U.fillColor&&a.tspan.setAttributeNS(null,"fill",a.fillColor),a.fillAlpha<1&&a.tspan.setAttributeNS(null,"fill-opacity",a.fillAlpha)):a.textRenderingMode===c.TextRenderingMode.ADD_TO_PATH?a.tspan.setAttributeNS(null,"fill","transparent"):a.tspan.setAttributeNS(null,"fill","none"),et===c.TextRenderingMode.STROKE||et===c.TextRenderingMode.FILL_STROKE){let st=1/(a.textMatrixScale||1);this._setStrokeAttributes(a.tspan,st)}let lt=a.textMatrix;a.textRise!==0&&(lt=lt.slice(),lt[5]+=a.textRise),a.txtElement.setAttributeNS(null,"transform",`${g(lt)} scale(${r(X)}, -1)`),a.txtElement.setAttributeNS(F,"xml:space","preserve"),a.txtElement.appendChild(a.tspan),a.txtgrp.appendChild(a.txtElement),this._ensureTransformGroup().appendChild(a.txtElement)}setLeadingMoveText(e,a){this.setLeading(-a),this.moveText(e,a)}addFontStyle(e){if(!e.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));let a=R(e.data,e.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${e.loadedName}"; src: url(${a}); }
`}setFont(e){let a=this.current,_=this.commonObjs.get(e[0]),T=e[1];a.font=_,this.embedFonts&&!_.missingFile&&!this.embeddedFonts[_.loadedName]&&(this.addFontStyle(_),this.embeddedFonts[_.loadedName]=_),a.fontMatrix=_.fontMatrix||c.FONT_IDENTITY_MATRIX;let C="normal";_.black?C="900":_.bold&&(C="bold");let P=_.italic?"italic":"normal";T<0?(T=-T,a.fontDirection=-1):a.fontDirection=1,a.fontSize=T,a.fontFamily=_.loadedName,a.fontWeight=C,a.fontStyle=P,a.tspan=this.svgFactory.createElement("svg:tspan"),a.tspan.setAttributeNS(null,"y",r(-a.y)),a.xcoords=[],a.ycoords=[]}endText(){var a;let e=this.current;e.textRenderingMode&c.TextRenderingMode.ADD_TO_PATH_FLAG&&((a=e.txtElement)==null?void 0:a.hasChildNodes())&&(e.element=e.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(e){e>0&&(this.current.lineWidth=e)}setLineCap(e){this.current.lineCap=x[e]}setLineJoin(e){this.current.lineJoin=k[e]}setMiterLimit(e){this.current.miterLimit=e}setStrokeAlpha(e){this.current.strokeAlpha=e}setStrokeRGBColor(e,a,_){this.current.strokeColor=c.Util.makeHexColor(e,a,_)}setFillAlpha(e){this.current.fillAlpha=e}setFillRGBColor(e,a,_){this.current.fillColor=c.Util.makeHexColor(e,a,_),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(e){this.current.strokeColor=this._makeColorN_Pattern(e)}setFillColorN(e){this.current.fillColor=this._makeColorN_Pattern(e)}shadingFill(e){let a=this.viewport.width,_=this.viewport.height,T=c.Util.inverseTransform(this.transformMatrix),C=c.Util.applyTransform([0,0],T),P=c.Util.applyTransform([0,_],T),w=c.Util.applyTransform([a,0],T),I=c.Util.applyTransform([a,_],T),X=Math.min(C[0],P[0],w[0],I[0]),W=Math.min(C[1],P[1],w[1],I[1]),z=Math.max(C[0],P[0],w[0],I[0]),J=Math.max(C[1],P[1],w[1],I[1]),Z=this.svgFactory.createElement("svg:rect");Z.setAttributeNS(null,"x",X),Z.setAttributeNS(null,"y",W),Z.setAttributeNS(null,"width",z-X),Z.setAttributeNS(null,"height",J-W),Z.setAttributeNS(null,"fill",this._makeShadingPattern(e)),this.current.fillAlpha<1&&Z.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().appendChild(Z)}_makeColorN_Pattern(e){return e[0]==="TilingPattern"?this._makeTilingPattern(e):this._makeShadingPattern(e)}_makeTilingPattern(e){let a=e[1],_=e[2],T=e[3]||c.IDENTITY_MATRIX,[C,P,w,I]=e[4],X=e[5],W=e[6],z=e[7],J=`shading${S++}`,[Z,Y,et,lt]=c.Util.normalizeRect([...c.Util.applyTransform([C,P],T),...c.Util.applyTransform([w,I],T)]),[st,v]=c.Util.singularValueDecompose2dScale(T),l=X*st,s=W*v,t=this.svgFactory.createElement("svg:pattern");t.setAttributeNS(null,"id",J),t.setAttributeNS(null,"patternUnits","userSpaceOnUse"),t.setAttributeNS(null,"width",l),t.setAttributeNS(null,"height",s),t.setAttributeNS(null,"x",`${Z}`),t.setAttributeNS(null,"y",`${Y}`);let n=this.svg,i=this.transformMatrix,d=this.current.fillColor,h=this.current.strokeColor,f=this.svgFactory.create(et-Z,lt-Y);if(this.svg=f,this.transformMatrix=T,z===2){let E=c.Util.makeHexColor(...a);this.current.fillColor=E,this.current.strokeColor=E}return this.executeOpTree(this.convertOpList(_)),this.svg=n,this.transformMatrix=i,this.current.fillColor=d,this.current.strokeColor=h,t.appendChild(f.childNodes[0]),this.defs.appendChild(t),`url(#${J})`}_makeShadingPattern(e){switch(typeof e=="string"&&(e=this.objs.get(e)),e[0]){case"RadialAxial":let a=`shading${S++}`,_=e[3],T;switch(e[1]){case"axial":let C=e[4],P=e[5];T=this.svgFactory.createElement("svg:linearGradient"),T.setAttributeNS(null,"id",a),T.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),T.setAttributeNS(null,"x1",C[0]),T.setAttributeNS(null,"y1",C[1]),T.setAttributeNS(null,"x2",P[0]),T.setAttributeNS(null,"y2",P[1]);break;case"radial":let w=e[4],I=e[5],X=e[6],W=e[7];T=this.svgFactory.createElement("svg:radialGradient"),T.setAttributeNS(null,"id",a),T.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),T.setAttributeNS(null,"cx",I[0]),T.setAttributeNS(null,"cy",I[1]),T.setAttributeNS(null,"r",W),T.setAttributeNS(null,"fx",w[0]),T.setAttributeNS(null,"fy",w[1]),T.setAttributeNS(null,"fr",X);break;default:throw new Error(`Unknown RadialAxial type: ${e[1]}`)}for(let C of _){let P=this.svgFactory.createElement("svg:stop");P.setAttributeNS(null,"offset",C[0]),P.setAttributeNS(null,"stop-color",C[1]),T.appendChild(P)}return this.defs.appendChild(T),`url(#${a})`;case"Mesh":return(0,c.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${e[0]}`)}}setDash(e,a){this.current.dashArray=e,this.current.dashPhase=a}constructPath(e,a){let _=this.current,T=_.x,C=_.y,P=[],w=0;for(let I of e)switch(I|0){case c.OPS.rectangle:T=a[w++],C=a[w++];let X=a[w++],W=a[w++],z=T+X,J=C+W;P.push("M",r(T),r(C),"L",r(z),r(C),"L",r(z),r(J),"L",r(T),r(J),"Z");break;case c.OPS.moveTo:T=a[w++],C=a[w++],P.push("M",r(T),r(C));break;case c.OPS.lineTo:T=a[w++],C=a[w++],P.push("L",r(T),r(C));break;case c.OPS.curveTo:T=a[w+4],C=a[w+5],P.push("C",r(a[w]),r(a[w+1]),r(a[w+2]),r(a[w+3]),r(T),r(C)),w+=6;break;case c.OPS.curveTo2:P.push("C",r(T),r(C),r(a[w]),r(a[w+1]),r(a[w+2]),r(a[w+3])),T=a[w+2],C=a[w+3],w+=4;break;case c.OPS.curveTo3:T=a[w+2],C=a[w+3],P.push("C",r(a[w]),r(a[w+1]),r(T),r(C),r(T),r(C)),w+=4;break;case c.OPS.closePath:P.push("Z");break}P=P.join(" "),_.path&&e.length>0&&e[0]!==c.OPS.rectangle&&e[0]!==c.OPS.moveTo?P=_.path.getAttributeNS(null,"d")+P:(_.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().appendChild(_.path)),_.path.setAttributeNS(null,"d",P),_.path.setAttributeNS(null,"fill","none"),_.element=_.path,_.setCurrentPoint(T,C)}endPath(){let e=this.current;if(e.path=null,!this.pendingClip)return;if(!e.element){this.pendingClip=null;return}let a=`clippath${b++}`,_=this.svgFactory.createElement("svg:clipPath");_.setAttributeNS(null,"id",a),_.setAttributeNS(null,"transform",g(this.transformMatrix));let T=e.element.cloneNode(!0);if(this.pendingClip==="evenodd"?T.setAttributeNS(null,"clip-rule","evenodd"):T.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,_.appendChild(T),this.defs.appendChild(_),e.activeClipUrl){e.clipGroup=null;for(let C of this.extraStack)C.clipGroup=null;_.setAttributeNS(null,"clip-path",e.activeClipUrl)}e.activeClipUrl=`url(#${a})`,this.tgrp=null}clip(e){this.pendingClip=e}closePath(){let e=this.current;if(e.path){let a=`${e.path.getAttributeNS(null,"d")}Z`;e.path.setAttributeNS(null,"d",a)}}setLeading(e){this.current.leading=-e}setTextRise(e){this.current.textRise=e}setTextRenderingMode(e){this.current.textRenderingMode=e}setHScale(e){this.current.textHScale=e/100}setRenderingIntent(e){}setFlatness(e){}setGState(e){for(let[a,_]of e)switch(a){case"LW":this.setLineWidth(_);break;case"LC":this.setLineCap(_);break;case"LJ":this.setLineJoin(_);break;case"ML":this.setMiterLimit(_);break;case"D":this.setDash(_[0],_[1]);break;case"RI":this.setRenderingIntent(_);break;case"FL":this.setFlatness(_);break;case"Font":this.setFont(_);break;case"CA":this.setStrokeAlpha(_);break;case"ca":this.setFillAlpha(_);break;default:(0,c.warn)(`Unimplemented graphic state operator ${a}`);break}}fill(){let e=this.current;e.element&&(e.element.setAttributeNS(null,"fill",e.fillColor),e.element.setAttributeNS(null,"fill-opacity",e.fillAlpha),this.endPath())}stroke(){let e=this.current;e.element&&(this._setStrokeAttributes(e.element),e.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(e,a=1){let _=this.current,T=_.dashArray;a!==1&&T.length>0&&(T=T.map(function(C){return a*C})),e.setAttributeNS(null,"stroke",_.strokeColor),e.setAttributeNS(null,"stroke-opacity",_.strokeAlpha),e.setAttributeNS(null,"stroke-miterlimit",r(_.miterLimit)),e.setAttributeNS(null,"stroke-linecap",_.lineCap),e.setAttributeNS(null,"stroke-linejoin",_.lineJoin),e.setAttributeNS(null,"stroke-width",r(a*_.lineWidth)+"px"),e.setAttributeNS(null,"stroke-dasharray",T.map(r).join(" ")),e.setAttributeNS(null,"stroke-dashoffset",r(a*_.dashPhase)+"px")}eoFill(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){let e=this.svgFactory.createElement("svg:rect");e.setAttributeNS(null,"x","0"),e.setAttributeNS(null,"y","0"),e.setAttributeNS(null,"width","1px"),e.setAttributeNS(null,"height","1px"),e.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().appendChild(e)}paintImageXObject(e){let a=e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e);if(!a){(0,c.warn)(`Dependent image with object ID ${e} is not ready yet`);return}this.paintInlineImageXObject(a)}paintInlineImageXObject(e,a){let _=e.width,T=e.height,C=A(e,this.forceDataSchema,!!a),P=this.svgFactory.createElement("svg:rect");P.setAttributeNS(null,"x","0"),P.setAttributeNS(null,"y","0"),P.setAttributeNS(null,"width",r(_)),P.setAttributeNS(null,"height",r(T)),this.current.element=P,this.clip("nonzero");let w=this.svgFactory.createElement("svg:image");w.setAttributeNS(m,"xlink:href",C),w.setAttributeNS(null,"x","0"),w.setAttributeNS(null,"y",r(-T)),w.setAttributeNS(null,"width",r(_)+"px"),w.setAttributeNS(null,"height",r(T)+"px"),w.setAttributeNS(null,"transform",`scale(${r(1/_)} ${r(-1/T)})`),a?a.appendChild(w):this._ensureTransformGroup().appendChild(w)}paintImageMaskXObject(e){let a=this.current,_=e.width,T=e.height,C=a.fillColor;a.maskId=`mask${y++}`;let P=this.svgFactory.createElement("svg:mask");P.setAttributeNS(null,"id",a.maskId);let w=this.svgFactory.createElement("svg:rect");w.setAttributeNS(null,"x","0"),w.setAttributeNS(null,"y","0"),w.setAttributeNS(null,"width",r(_)),w.setAttributeNS(null,"height",r(T)),w.setAttributeNS(null,"fill",C),w.setAttributeNS(null,"mask",`url(#${a.maskId})`),this.defs.appendChild(P),this._ensureTransformGroup().appendChild(w),this.paintInlineImageXObject(e,P)}paintFormXObjectBegin(e,a){if(Array.isArray(e)&&e.length===6&&this.transform(e[0],e[1],e[2],e[3],e[4],e[5]),a){let _=a[2]-a[0],T=a[3]-a[1],C=this.svgFactory.createElement("svg:rect");C.setAttributeNS(null,"x",a[0]),C.setAttributeNS(null,"y",a[1]),C.setAttributeNS(null,"width",r(_)),C.setAttributeNS(null,"height",r(T)),this.current.element=C,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(e){let a=this.svgFactory.create(e.width,e.height),_=this.svgFactory.createElement("svg:defs");a.appendChild(_),this.defs=_;let T=this.svgFactory.createElement("svg:g");return T.setAttributeNS(null,"transform",g(e.transform)),a.appendChild(T),this.svg=T,a}_ensureClipGroup(){if(!this.current.clipGroup){let e=this.svgFactory.createElement("svg:g");e.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(e),this.current.clipGroup=e}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",g(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}}}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.PDFNodeStream=void 0;var c=H(1),K=H(26);let q=$t(),G=ne(),U=se(),F=ie(),m=/^file:\/\/\/[a-zA-Z]:\//;function x(y){let S=F.parse(y);return S.protocol==="file:"||S.host?S:/^[a-z]:[/\\]/i.test(y)?F.parse(`file:///${y}`):(S.host||(S.protocol="file:"),S)}class k{constructor(S){this.source=S,this.url=x(S.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&S.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var S,e;return(e=(S=this._fullRequestReader)==null?void 0:S._loaded)!=null?e:0}getFullReader(){return(0,c.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new g(this):new u(this),this._fullRequestReader}getRangeReader(S,e){if(e<=this._progressiveDataLength)return null;let a=this.isFsUrl?new b(this,S,e):new r(this,S,e);return this._rangeRequestReaders.push(a),a}cancelAllRequests(S){this._fullRequestReader&&this._fullRequestReader.cancel(S);for(let e of this._rangeRequestReaders.slice(0))e.cancel(S)}}p.PDFNodeStream=k;class R{constructor(S){this._url=S.url,this._done=!1,this._storedError=null,this.onProgress=null;let e=S.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=(0,c.createPromiseCapability)(),this._headersCapability=(0,c.createPromiseCapability)()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;let S=this._readableStream.read();return S===null?(this._readCapability=(0,c.createPromiseCapability)(),this.read()):(this._loaded+=S.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(S).buffer,done:!1})}cancel(S){if(!this._readableStream){this._error(S);return}this._readableStream.destroy(S)}_error(S){this._storedError=S,this._readCapability.resolve()}_setReadableStream(S){this._readableStream=S,S.on("readable",()=>{this._readCapability.resolve()}),S.on("end",()=>{S.destroy(),this._done=!0,this._readCapability.resolve()}),S.on("error",e=>{this._error(e)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new c.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class A{constructor(S){this._url=S.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,c.createPromiseCapability)();let e=S.source;this._isStreamingSupported=!e.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;let S=this._readableStream.read();return S===null?(this._readCapability=(0,c.createPromiseCapability)(),this.read()):(this._loaded+=S.length,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(S).buffer,done:!1})}cancel(S){if(!this._readableStream){this._error(S);return}this._readableStream.destroy(S)}_error(S){this._storedError=S,this._readCapability.resolve()}_setReadableStream(S){this._readableStream=S,S.on("readable",()=>{this._readCapability.resolve()}),S.on("end",()=>{S.destroy(),this._done=!0,this._readCapability.resolve()}),S.on("error",e=>{this._error(e)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function o(y,S){return{protocol:y.protocol,auth:y.auth,host:y.hostname,port:y.port,path:y.path,method:"GET",headers:S}}class u extends R{constructor(S){super(S);let e=a=>{if(a.statusCode===404){let P=new c.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=P,this._headersCapability.reject(P);return}this._headersCapability.resolve(),this._setReadableStream(a);let _=P=>this._readableStream.headers[P.toLowerCase()],{allowRangeRequests:T,suggestedLength:C}=(0,K.validateRangeRequestCapabilities)({getResponseHeader:_,isHttp:S.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=T,this._contentLength=C||this._contentLength,this._filename=(0,K.extractFilenameFromHeader)(_)};this._request=null,this._url.protocol==="http:"?this._request=G.request(o(this._url,S.httpHeaders),e):this._request=U.request(o(this._url,S.httpHeaders),e),this._request.on("error",a=>{this._storedError=a,this._headersCapability.reject(a)}),this._request.end()}}class r extends A{constructor(S,e,a){super(S),this._httpHeaders={};for(let T in S.httpHeaders){let C=S.httpHeaders[T];typeof C>"u"||(this._httpHeaders[T]=C)}this._httpHeaders.Range=`bytes=${e}-${a-1}`;let _=T=>{if(T.statusCode===404){let C=new c.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=C;return}this._setReadableStream(T)};this._request=null,this._url.protocol==="http:"?this._request=G.request(o(this._url,this._httpHeaders),_):this._request=U.request(o(this._url,this._httpHeaders),_),this._request.on("error",T=>{this._storedError=T}),this._request.end()}}class g extends R{constructor(S){super(S);let e=decodeURIComponent(this._url.path);m.test(this._url.href)&&(e=e.replace(/^\//,"")),q.lstat(e,(a,_)=>{if(a){a.code==="ENOENT"&&(a=new c.MissingPDFException(`Missing PDF "${e}".`)),this._storedError=a,this._headersCapability.reject(a);return}this._contentLength=_.size,this._setReadableStream(q.createReadStream(e)),this._headersCapability.resolve()})}}class b extends A{constructor(S,e,a){super(S);let _=decodeURIComponent(this._url.path);m.test(this._url.href)&&(_=_.replace(/^\//,"")),this._setReadableStream(q.createReadStream(_,{start:e,end:a-1}))}}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.createResponseStatusError=F,p.extractFilenameFromHeader=U,p.validateRangeRequestCapabilities=G,p.validateResponseStatus=m;var c=H(1),K=H(27),q=H(5);function G({getResponseHeader:x,isHttp:k,rangeChunkSize:R,disableRange:A}){let o={allowRangeRequests:!1,suggestedLength:void 0},u=parseInt(x("Content-Length"),10);return!Number.isInteger(u)||(o.suggestedLength=u,u<=2*R)||A||!k||x("Accept-Ranges")!=="bytes"||(x("Content-Encoding")||"identity")!=="identity"||(o.allowRangeRequests=!0),o}function U(x){let k=x("Content-Disposition");if(k){let R=(0,K.getFilenameFromContentDispositionHeader)(k);if(R.includes("%"))try{R=decodeURIComponent(R)}catch(A){}if((0,q.isPdfFile)(R))return R}return null}function F(x,k){return x===404||x===0&&k.startsWith("file:")?new c.MissingPDFException('Missing PDF "'+k+'".'):new c.UnexpectedResponseException(`Unexpected server response (${x}) while retrieving PDF "${k}".`,x)}function m(x){return x===200||x===206}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.getFilenameFromContentDispositionHeader=K;var c=H(1);function K(q){let G=!0,U=F("filename\\*","i").exec(q);if(U){U=U[1];let u=R(U);return u=unescape(u),u=A(u),u=o(u),x(u)}if(U=k(q),U){let u=o(U);return x(u)}if(U=F("filename","i").exec(q),U){U=U[1];let u=R(U);return u=o(u),x(u)}function F(u,r){return new RegExp("(?:^|;)\\s*"+u+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',r)}function m(u,r){if(u){if(!/^[\x00-\xFF]+$/.test(r))return r;try{let g=new TextDecoder(u,{fatal:!0}),b=(0,c.stringToBytes)(r);r=g.decode(b),G=!1}catch(g){}}return r}function x(u){return G&&/[\x80-\xff]/.test(u)&&(u=m("utf-8",u),G&&(u=m("iso-8859-1",u))),u}function k(u){let r=[],g,b=F("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(g=b.exec(u))!==null;){let[,S,e,a]=g;if(S=parseInt(S,10),S in r){if(S===0)break;continue}r[S]=[e,a]}let y=[];for(let S=0;S<r.length&&S in r;++S){let[e,a]=r[S];a=R(a),e&&(a=unescape(a),S===0&&(a=A(a))),y.push(a)}return y.join("")}function R(u){if(u.startsWith('"')){let r=u.slice(1).split('\\"');for(let g=0;g<r.length;++g){let b=r[g].indexOf('"');b!==-1&&(r[g]=r[g].slice(0,b),r.length=g+1),r[g]=r[g].replace(/\\(.)/g,"$1")}u=r.join('"')}return u}function A(u){let r=u.indexOf("'");if(r===-1)return u;let g=u.slice(0,r),y=u.slice(r+1).replace(/^[^']*'/,"");return m(g,y)}function o(u){return!u.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(u)?u:u.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(r,g,b,y){if(b==="q"||b==="Q")return y=y.replace(/_/g," "),y=y.replace(/=([0-9a-fA-F]{2})/g,function(S,e){return String.fromCharCode(parseInt(e,16))}),m(g,y);try{y=atob(y)}catch(S){}return m(g,y)})}return""}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.PDFNetworkStream=void 0;var c=H(1),K=H(26);let q=200,G=206;function U(R){let A=R.response;return typeof A!="string"?A:(0,c.stringToBytes)(A).buffer}class F{constructor(A,o={}){this.url=A,this.isHttp=/^https?:/i.test(A),this.httpHeaders=this.isHttp&&o.httpHeaders||Object.create(null),this.withCredentials=o.withCredentials||!1,this.getXhr=o.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(A,o,u){let r={begin:A,end:o};for(let g in u)r[g]=u[g];return this.request(r)}requestFull(A){return this.request(A)}request(A){let o=this.getXhr(),u=this.currXhrId++,r=this.pendingRequests[u]={xhr:o};o.open("GET",this.url),o.withCredentials=this.withCredentials;for(let g in this.httpHeaders){let b=this.httpHeaders[g];typeof b>"u"||o.setRequestHeader(g,b)}return this.isHttp&&"begin"in A&&"end"in A?(o.setRequestHeader("Range",`bytes=${A.begin}-${A.end-1}`),r.expectedStatus=G):r.expectedStatus=q,o.responseType="arraybuffer",A.onError&&(o.onerror=function(g){A.onError(o.status)}),o.onreadystatechange=this.onStateChange.bind(this,u),o.onprogress=this.onProgress.bind(this,u),r.onHeadersReceived=A.onHeadersReceived,r.onDone=A.onDone,r.onError=A.onError,r.onProgress=A.onProgress,o.send(null),u}onProgress(A,o){var r;let u=this.pendingRequests[A];!u||(r=u.onProgress)==null||r.call(u,o)}onStateChange(A,o){var S,e,a;let u=this.pendingRequests[A];if(!u)return;let r=u.xhr;if(r.readyState>=2&&u.onHeadersReceived&&(u.onHeadersReceived(),delete u.onHeadersReceived),r.readyState!==4||!(A in this.pendingRequests))return;if(delete this.pendingRequests[A],r.status===0&&this.isHttp){(S=u.onError)==null||S.call(u,r.status);return}let g=r.status||q;if(!(g===q&&u.expectedStatus===G)&&g!==u.expectedStatus){(e=u.onError)==null||e.call(u,r.status);return}let y=U(r);if(g===G){let _=r.getResponseHeader("Content-Range"),T=/bytes (\d+)-(\d+)\/(\d+)/.exec(_);u.onDone({begin:parseInt(T[1],10),chunk:y})}else y?u.onDone({begin:0,chunk:y}):(a=u.onError)==null||a.call(u,r.status)}getRequestXhr(A){return this.pendingRequests[A].xhr}isPendingRequest(A){return A in this.pendingRequests}abortRequest(A){let o=this.pendingRequests[A].xhr;delete this.pendingRequests[A],o.abort()}}class m{constructor(A){this._source=A,this._manager=new F(A.url,{httpHeaders:A.httpHeaders,withCredentials:A.withCredentials}),this._rangeChunkSize=A.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(A){let o=this._rangeRequestReaders.indexOf(A);o>=0&&this._rangeRequestReaders.splice(o,1)}getFullReader(){return(0,c.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new x(this._manager,this._source),this._fullRequestReader}getRangeReader(A,o){let u=new k(this._manager,A,o);return u.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(u),u}cancelAllRequests(A){var o;(o=this._fullRequestReader)==null||o.cancel(A);for(let u of this._rangeRequestReaders.slice(0))u.cancel(A)}}p.PDFNetworkStream=m;class x{constructor(A,o){this._manager=A;let u={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=o.url,this._fullRequestId=A.requestFull(u),this._headersReceivedCapability=(0,c.createPromiseCapability)(),this._disableRange=o.disableRange||!1,this._contentLength=o.length,this._rangeChunkSize=o.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){let A=this._fullRequestId,o=this._manager.getRequestXhr(A),u=b=>o.getResponseHeader(b),{allowRangeRequests:r,suggestedLength:g}=(0,K.validateRangeRequestCapabilities)({getResponseHeader:u,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});r&&(this._isRangeSupported=!0),this._contentLength=g||this._contentLength,this._filename=(0,K.extractFilenameFromHeader)(u),this._isRangeSupported&&this._manager.abortRequest(A),this._headersReceivedCapability.resolve()}_onDone(A){if(A&&(this._requests.length>0?this._requests.shift().resolve({value:A.chunk,done:!1}):this._cachedChunks.push(A.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(let o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(A){this._storedError=(0,K.createResponseStatusError)(A,this._url),this._headersReceivedCapability.reject(this._storedError);for(let o of this._requests)o.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(A){var o;(o=this.onProgress)==null||o.call(this,{loaded:A.loaded,total:A.lengthComputable?A.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};let A=(0,c.createPromiseCapability)();return this._requests.push(A),A.promise}cancel(A){this._done=!0,this._headersReceivedCapability.reject(A);for(let o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class k{constructor(A,o,u){this._manager=A;let r={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=A.url,this._requestId=A.requestRange(o,u,r),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var A;(A=this.onClosed)==null||A.call(this,this)}_onDone(A){let o=A.chunk;this._requests.length>0?this._requests.shift().resolve({value:o,done:!1}):this._queuedChunk=o,this._done=!0;for(let u of this._requests)u.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(A){this._storedError=(0,K.createResponseStatusError)(A,this._url);for(let o of this._requests)o.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(A){var o;this.isStreamingSupported||(o=this.onProgress)==null||o.call(this,{loaded:A.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){let o=this._queuedChunk;return this._queuedChunk=null,{value:o,done:!1}}if(this._done)return{value:void 0,done:!0};let A=(0,c.createPromiseCapability)();return this._requests.push(A),A.promise}cancel(A){this._done=!0;for(let o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},($,p,H)=>{Object.defineProperty(p,"__esModule",{value:!0}),p.PDFFetchStream=void 0;var c=H(1),K=H(26);function q(x,k,R){return{method:"GET",headers:x,signal:R==null?void 0:R.signal,mode:"cors",credentials:k?"include":"same-origin",redirect:"follow"}}function G(x){let k=new Headers;for(let R in x){let A=x[R];typeof A>"u"||k.append(R,A)}return k}class U{constructor(k){this.source=k,this.isHttp=/^https?:/i.test(k.url),this.httpHeaders=this.isHttp&&k.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var k,R;return(R=(k=this._fullRequestReader)==null?void 0:k._loaded)!=null?R:0}getFullReader(){return(0,c.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new F(this),this._fullRequestReader}getRangeReader(k,R){if(R<=this._progressiveDataLength)return null;let A=new m(this,k,R);return this._rangeRequestReaders.push(A),A}cancelAllRequests(k){this._fullRequestReader&&this._fullRequestReader.cancel(k);for(let R of this._rangeRequestReaders.slice(0))R.cancel(k)}}p.PDFFetchStream=U;class F{constructor(k){this._stream=k,this._reader=null,this._loaded=0,this._filename=null;let R=k.source;this._withCredentials=R.withCredentials||!1,this._contentLength=R.length,this._headersCapability=(0,c.createPromiseCapability)(),this._disableRange=R.disableRange||!1,this._rangeChunkSize=R.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),typeof AbortController<"u"&&(this._abortController=new AbortController),this._isStreamingSupported=!R.disableStream,this._isRangeSupported=!R.disableRange,this._headers=G(this._stream.httpHeaders);let A=R.url;fetch(A,q(this._headers,this._withCredentials,this._abortController)).then(o=>{if(!(0,K.validateResponseStatus)(o.status))throw(0,K.createResponseStatusError)(o.status,A);this._reader=o.body.getReader(),this._headersCapability.resolve();let u=b=>o.headers.get(b),{allowRangeRequests:r,suggestedLength:g}=(0,K.validateRangeRequestCapabilities)({getResponseHeader:u,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=r,this._contentLength=g||this._contentLength,this._filename=(0,K.extractFilenameFromHeader)(u),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new c.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;let{value:k,done:R}=await this._reader.read();return R?{value:k,done:R}:(this._loaded+=k.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(k).buffer,done:!1})}cancel(k){this._reader&&this._reader.cancel(k),this._abortController&&this._abortController.abort()}}class m{constructor(k,R,A){this._stream=k,this._reader=null,this._loaded=0;let o=k.source;this._withCredentials=o.withCredentials||!1,this._readCapability=(0,c.createPromiseCapability)(),this._isStreamingSupported=!o.disableStream,typeof AbortController<"u"&&(this._abortController=new AbortController),this._headers=G(this._stream.httpHeaders),this._headers.append("Range",`bytes=${R}-${A-1}`);let u=o.url;fetch(u,q(this._headers,this._withCredentials,this._abortController)).then(r=>{if(!(0,K.validateResponseStatus)(r.status))throw(0,K.createResponseStatusError)(r.status,u);this._readCapability.resolve(),this._reader=r.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;let{value:k,done:R}=await this._reader.read();return R?{value:k,done:R}:(this._loaded+=k.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(k).buffer,done:!1})}cancel(k){this._reader&&this._reader.cancel(k),this._abortController&&this._abortController.abort()}}}],__webpack_module_cache__={};function __w_pdfjs_require__($){var p=__webpack_module_cache__[$];if(p!==void 0)return p.exports;var H=__webpack_module_cache__[$]={exports:{}};return __webpack_modules__[$](H,H.exports,__w_pdfjs_require__),H.exports}var __webpack_exports__={};return(()=>{var $=__webpack_exports__;Object.defineProperty($,"__esModule",{value:!0}),Object.defineProperty($,"AnnotationLayer",{enumerable:!0,get:function(){return K.AnnotationLayer}}),Object.defineProperty($,"AnnotationMode",{enumerable:!0,get:function(){return p.AnnotationMode}}),Object.defineProperty($,"CMapCompressionType",{enumerable:!0,get:function(){return p.CMapCompressionType}}),Object.defineProperty($,"GlobalWorkerOptions",{enumerable:!0,get:function(){return q.GlobalWorkerOptions}}),Object.defineProperty($,"InvalidPDFException",{enumerable:!0,get:function(){return p.InvalidPDFException}}),Object.defineProperty($,"LoopbackPort",{enumerable:!0,get:function(){return H.LoopbackPort}}),Object.defineProperty($,"MissingPDFException",{enumerable:!0,get:function(){return p.MissingPDFException}}),Object.defineProperty($,"OPS",{enumerable:!0,get:function(){return p.OPS}}),Object.defineProperty($,"PDFDataRangeTransport",{enumerable:!0,get:function(){return H.PDFDataRangeTransport}}),Object.defineProperty($,"PDFDateString",{enumerable:!0,get:function(){return c.PDFDateString}}),Object.defineProperty($,"PDFWorker",{enumerable:!0,get:function(){return H.PDFWorker}}),Object.defineProperty($,"PasswordResponses",{enumerable:!0,get:function(){return p.PasswordResponses}}),Object.defineProperty($,"PermissionFlag",{enumerable:!0,get:function(){return p.PermissionFlag}}),Object.defineProperty($,"PixelsPerInch",{enumerable:!0,get:function(){return c.PixelsPerInch}}),Object.defineProperty($,"RenderingCancelledException",{enumerable:!0,get:function(){return c.RenderingCancelledException}}),Object.defineProperty($,"SVGGraphics",{enumerable:!0,get:function(){return F.SVGGraphics}}),Object.defineProperty($,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return p.UNSUPPORTED_FEATURES}}),Object.defineProperty($,"UnexpectedResponseException",{enumerable:!0,get:function(){return p.UnexpectedResponseException}}),Object.defineProperty($,"Util",{enumerable:!0,get:function(){return p.Util}}),Object.defineProperty($,"VerbosityLevel",{enumerable:!0,get:function(){return p.VerbosityLevel}}),Object.defineProperty($,"XfaLayer",{enumerable:!0,get:function(){return m.XfaLayer}}),Object.defineProperty($,"build",{enumerable:!0,get:function(){return H.build}}),Object.defineProperty($,"createPromiseCapability",{enumerable:!0,get:function(){return p.createPromiseCapability}}),Object.defineProperty($,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return p.createValidAbsoluteUrl}}),Object.defineProperty($,"getDocument",{enumerable:!0,get:function(){return H.getDocument}}),Object.defineProperty($,"getFilenameFromUrl",{enumerable:!0,get:function(){return c.getFilenameFromUrl}}),Object.defineProperty($,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return c.getPdfFilenameFromUrl}}),Object.defineProperty($,"getXfaPageViewport",{enumerable:!0,get:function(){return c.getXfaPageViewport}}),Object.defineProperty($,"isPdfFile",{enumerable:!0,get:function(){return c.isPdfFile}}),Object.defineProperty($,"loadScript",{enumerable:!0,get:function(){return c.loadScript}}),Object.defineProperty($,"renderTextLayer",{enumerable:!0,get:function(){return U.renderTextLayer}}),Object.defineProperty($,"shadow",{enumerable:!0,get:function(){return p.shadow}}),Object.defineProperty($,"version",{enumerable:!0,get:function(){return H.version}});var p=__w_pdfjs_require__(1),H=__w_pdfjs_require__(4),c=__w_pdfjs_require__(5),K=__w_pdfjs_require__(20),q=__w_pdfjs_require__(13),G=__w_pdfjs_require__(3),U=__w_pdfjs_require__(23),F=__w_pdfjs_require__(24),m=__w_pdfjs_require__(22);let x="2.14.305",k="eaaa8b4ad";if(G.isNodeJS){let{PDFNodeStream:R}=__w_pdfjs_require__(25);(0,H.setPDFNetworkStreamFactory)(A=>new R(A))}else{let{PDFNetworkStream:R}=__w_pdfjs_require__(28),{PDFFetchStream:A}=__w_pdfjs_require__(29);(0,H.setPDFNetworkStreamFactory)(o=>(0,c.isValidFetchUrl)(o.url)?new A(o):new R(o))}})(),__webpack_exports__})())});var Wt=Qt(Jt()),re=Qt(Jt());Wt.GlobalWorkerOptions.workerSrc="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.14.305/pdf.worker.min.js";var ae=($,p)=>{Wt.getDocument($).promise.then(async c=>{let K=document.getElementById(p);for(let q=1;q<=c.numPages;q++)c.getPage(q).then(function(G){let F=G.getViewport({scale:1.5}),m=document.createElement("svg");m.style.width=F.width+"px",m.style.height=F.height+"px",K==null||K.appendChild(m),G.getOperatorList().then(function(x){return new re.SVGGraphics(G.commonObjs,G.objs).getSVG(x,F)}).then(function(x){m.appendChild(x)})})})};window.addEventListener("load",()=>{ae("./sample1.pdf","pdf-container")});})();
//# sourceMappingURL=data:application/json;base64,

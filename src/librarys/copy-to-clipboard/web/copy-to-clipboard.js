(()=>{var Q=Object.create;var D=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var Z=Object.getOwnPropertyNames;var tt=Object.getPrototypeOf,et=Object.prototype.hasOwnProperty;var nt=(b,f)=>()=>(f||b((f={exports:{}}).exports,f),f.exports);var rt=(b,f,i,a)=>{if(f&&typeof f=="object"||typeof f=="function")for(let r of Z(f))!et.call(b,r)&&r!==i&&D(b,r,{get:()=>f[r],enumerable:!(a=W(f,r))||a.enumerable});return b};var ot=(b,f,i)=>(i=b!=null?Q(tt(b)):{},rt(f||!b||!b.__esModule?D(i,"default",{value:b,enumerable:!0}):i,b));var N=nt((x,R)=>{(function(f,i){typeof x=="object"&&typeof R=="object"?R.exports=i():typeof define=="function"&&define.amd?define([],i):typeof x=="object"?x.ClipboardJS=i():f.ClipboardJS=i()})(x,function(){return function(){var b={686:function(a,r,t){"use strict";t.d(r,{default:function(){return K}});var l=t(279),d=t.n(l),y=t(370),h=t.n(y),m=t(817),S=t.n(m);function p(c){try{return document.execCommand(c)}catch(n){return!1}}var g=function(n){var e=S()(n);return p("cut"),e},v=g;function w(c){var n=document.documentElement.getAttribute("dir")==="rtl",e=document.createElement("textarea");e.style.fontSize="12pt",e.style.border="0",e.style.padding="0",e.style.margin="0",e.style.position="absolute",e.style[n?"right":"left"]="-9999px";var o=window.pageYOffset||document.documentElement.scrollTop;return e.style.top="".concat(o,"px"),e.setAttribute("readonly",""),e.value=c,e}var k=function(n,e){var o=w(n);e.container.appendChild(o);var u=S()(o);return p("copy"),o.remove(),u},H=function(n){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{container:document.body},o="";return typeof n=="string"?o=k(n,e):n instanceof HTMLInputElement&&!["text","search","url","tel","password"].includes(n==null?void 0:n.type)?o=k(n.value,e):(o=S()(n),p("copy")),o},O=H;function C(c){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(e){return typeof e}:C=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(c)}var J=function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=n.action,o=e===void 0?"copy":e,u=n.container,s=n.target,E=n.text;if(o!=="copy"&&o!=="cut")throw new Error('Invalid "action" value, use either "copy" or "cut"');if(s!==void 0)if(s&&C(s)==="object"&&s.nodeType===1){if(o==="copy"&&s.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if(o==="cut"&&(s.hasAttribute("readonly")||s.hasAttribute("disabled")))throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`)}else throw new Error('Invalid "target" value, use a valid Element');if(E)return O(E,{container:u});if(s)return o==="cut"?v(s):O(s,{container:u})},z=J;function T(c){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?T=function(e){return typeof e}:T=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(c)}function U(c,n){if(!(c instanceof n))throw new TypeError("Cannot call a class as a function")}function P(c,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(c,o.key,o)}}function Y(c,n,e){return n&&P(c.prototype,n),e&&P(c,e),c}function q(c,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function");c.prototype=Object.create(n&&n.prototype,{constructor:{value:c,writable:!0,configurable:!0}}),n&&L(c,n)}function L(c,n){return L=Object.setPrototypeOf||function(o,u){return o.__proto__=u,o},L(c,n)}function V(c){var n=B();return function(){var o=_(c),u;if(n){var s=_(this).constructor;u=Reflect.construct(o,arguments,s)}else u=o.apply(this,arguments);return X(this,u)}}function X(c,n){return n&&(T(n)==="object"||typeof n=="function")?n:$(c)}function $(c){if(c===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return c}function B(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(c){return!1}}function _(c){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},_(c)}function M(c,n){var e="data-clipboard-".concat(c);if(!!n.hasAttribute(e))return n.getAttribute(e)}var G=function(c){q(e,c);var n=V(e);function e(o,u){var s;return U(this,e),s=n.call(this),s.resolveOptions(u),s.listenClick(o),s}return Y(e,[{key:"resolveOptions",value:function(){var u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};this.action=typeof u.action=="function"?u.action:this.defaultAction,this.target=typeof u.target=="function"?u.target:this.defaultTarget,this.text=typeof u.text=="function"?u.text:this.defaultText,this.container=T(u.container)==="object"?u.container:document.body}},{key:"listenClick",value:function(u){var s=this;this.listener=h()(u,"click",function(E){return s.onClick(E)})}},{key:"onClick",value:function(u){var s=u.delegateTarget||u.currentTarget,E=this.action(s)||"copy",A=z({action:E,container:this.container,target:this.target(s),text:this.text(s)});this.emit(A?"success":"error",{action:E,text:A,trigger:s,clearSelection:function(){s&&s.focus(),window.getSelection().removeAllRanges()}})}},{key:"defaultAction",value:function(u){return M("action",u)}},{key:"defaultTarget",value:function(u){var s=M("target",u);if(s)return document.querySelector(s)}},{key:"defaultText",value:function(u){return M("text",u)}},{key:"destroy",value:function(){this.listener.destroy()}}],[{key:"copy",value:function(u){var s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{container:document.body};return O(u,s)}},{key:"cut",value:function(u){return v(u)}},{key:"isSupported",value:function(){var u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:["copy","cut"],s=typeof u=="string"?[u]:u,E=!!document.queryCommandSupported;return s.forEach(function(A){E=E&&!!document.queryCommandSupported(A)}),E}}]),e}(d()),K=G},828:function(a){var r=9;if(typeof Element<"u"&&!Element.prototype.matches){var t=Element.prototype;t.matches=t.matchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector}function l(d,y){for(;d&&d.nodeType!==r;){if(typeof d.matches=="function"&&d.matches(y))return d;d=d.parentNode}}a.exports=l},438:function(a,r,t){var l=t(828);function d(m,S,p,g,v){var w=h.apply(this,arguments);return m.addEventListener(p,w,v),{destroy:function(){m.removeEventListener(p,w,v)}}}function y(m,S,p,g,v){return typeof m.addEventListener=="function"?d.apply(null,arguments):typeof p=="function"?d.bind(null,document).apply(null,arguments):(typeof m=="string"&&(m=document.querySelectorAll(m)),Array.prototype.map.call(m,function(w){return d(w,S,p,g,v)}))}function h(m,S,p,g){return function(v){v.delegateTarget=l(v.target,S),v.delegateTarget&&g.call(m,v)}}a.exports=y},879:function(a,r){r.node=function(t){return t!==void 0&&t instanceof HTMLElement&&t.nodeType===1},r.nodeList=function(t){var l=Object.prototype.toString.call(t);return t!==void 0&&(l==="[object NodeList]"||l==="[object HTMLCollection]")&&"length"in t&&(t.length===0||r.node(t[0]))},r.string=function(t){return typeof t=="string"||t instanceof String},r.fn=function(t){var l=Object.prototype.toString.call(t);return l==="[object Function]"}},370:function(a,r,t){var l=t(879),d=t(438);function y(p,g,v){if(!p&&!g&&!v)throw new Error("Missing required arguments");if(!l.string(g))throw new TypeError("Second argument must be a String");if(!l.fn(v))throw new TypeError("Third argument must be a Function");if(l.node(p))return h(p,g,v);if(l.nodeList(p))return m(p,g,v);if(l.string(p))return S(p,g,v);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function h(p,g,v){return p.addEventListener(g,v),{destroy:function(){p.removeEventListener(g,v)}}}function m(p,g,v){return Array.prototype.forEach.call(p,function(w){w.addEventListener(g,v)}),{destroy:function(){Array.prototype.forEach.call(p,function(w){w.removeEventListener(g,v)})}}}function S(p,g,v){return d(document.body,p,g,v)}a.exports=y},817:function(a){function r(t){var l;if(t.nodeName==="SELECT")t.focus(),l=t.value;else if(t.nodeName==="INPUT"||t.nodeName==="TEXTAREA"){var d=t.hasAttribute("readonly");d||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),d||t.removeAttribute("readonly"),l=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var y=window.getSelection(),h=document.createRange();h.selectNodeContents(t),y.removeAllRanges(),y.addRange(h),l=y.toString()}return l}a.exports=r},279:function(a){function r(){}r.prototype={on:function(t,l,d){var y=this.e||(this.e={});return(y[t]||(y[t]=[])).push({fn:l,ctx:d}),this},once:function(t,l,d){var y=this;function h(){y.off(t,h),l.apply(d,arguments)}return h._=l,this.on(t,h,d)},emit:function(t){var l=[].slice.call(arguments,1),d=((this.e||(this.e={}))[t]||[]).slice(),y=0,h=d.length;for(y;y<h;y++)d[y].fn.apply(d[y].ctx,l);return this},off:function(t,l){var d=this.e||(this.e={}),y=d[t],h=[];if(y&&l)for(var m=0,S=y.length;m<S;m++)y[m].fn!==l&&y[m].fn._!==l&&h.push(y[m]);return h.length?d[t]=h:delete d[t],this}},a.exports=r,a.exports.TinyEmitter=r}},f={};function i(a){if(f[a])return f[a].exports;var r=f[a]={exports:{}};return b[a](r,r.exports,i),r.exports}return function(){i.n=function(a){var r=a&&a.__esModule?function(){return a.default}:function(){return a};return i.d(r,{a:r}),r}}(),function(){i.d=function(a,r){for(var t in r)i.o(r,t)&&!i.o(a,t)&&Object.defineProperty(a,t,{enumerable:!0,get:r[t]})}}(),function(){i.o=function(a,r){return Object.prototype.hasOwnProperty.call(a,r)}}(),i(686)}().default})});var F=ot(N());var j=(b,f,i)=>{if(b===null)return console.error("target \uC774 null \uC785\uB2C8\uB2E4."),null;let a=new MutationObserver(t=>{f(t)}),r={attributes:typeof(i==null?void 0:i.attributes)=="boolean"?i==null?void 0:i.attributes:!0,childList:typeof(i==null?void 0:i.childList)=="boolean"?i==null?void 0:i.childList:!0,characterData:typeof(i==null?void 0:i.characterData)=="boolean"?i==null?void 0:i.characterData:!0};return a.observe(b,r),a},I=b=>(b.disconnect(),!0);var it=b=>{let f=document.createElement("button");f.classList.add("btn"),f.setAttribute("data-clipboard-text",b),f.style.opacity="0",f.style.position="fixed",f.style.top="0",f.style.left="-9000px",f.style.width="1px",f.style.height="1px",f.style.overflow="hidden";let i=a=>{var r;(r=document.querySelector("body"))==null||r.removeChild(f),a!==null&&I(a)};return new Promise(function(a,r){var l;let t=j(document.querySelector("body"),d=>{let y=new F.default(f);y.on("success",function(h){i(t),h.result="success",a(h),h.clearSelection()}),y.on("error",function(h){i(t),h.result="error",r(h)}),f.click()});(l=document.querySelector("body"))==null||l.appendChild(f)})};typeof window<"u"&&(window.copyToClipboard=it);})();
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
//# sourceMappingURL=data:application/json;base64,
